// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mem_write_HH_
#define _mem_write_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct mem_write : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > out_r_TDATA;
    sc_out< sc_logic > out_r_TVALID;
    sc_in< sc_logic > out_r_TREADY;
    sc_out< sc_lv<4> > out_r_TKEEP;
    sc_out< sc_lv<4> > out_r_TSTRB;
    sc_out< sc_lv<1> > out_r_TUSER;
    sc_out< sc_lv<1> > out_r_TLAST;
    sc_out< sc_lv<1> > out_r_TID;
    sc_out< sc_lv<1> > out_r_TDEST;
    sc_in< sc_lv<32> > mask_dout;
    sc_in< sc_logic > mask_empty_n;
    sc_out< sc_logic > mask_read;
    sc_out< sc_lv<8> > test_init_arr_V_address0;
    sc_out< sc_logic > test_init_arr_V_ce0;
    sc_in< sc_lv<32> > test_init_arr_V_q0;


    // Module declarations
    mem_write(sc_module_name name);
    SC_HAS_PROCESS(mem_write);

    ~mem_write();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > out_stream_V_data_V_1_data_out;
    sc_signal< sc_logic > out_stream_V_data_V_1_vld_in;
    sc_signal< sc_logic > out_stream_V_data_V_1_vld_out;
    sc_signal< sc_logic > out_stream_V_data_V_1_ack_in;
    sc_signal< sc_logic > out_stream_V_data_V_1_ack_out;
    sc_signal< sc_lv<32> > out_stream_V_data_V_1_payload_A;
    sc_signal< sc_lv<32> > out_stream_V_data_V_1_payload_B;
    sc_signal< sc_logic > out_stream_V_data_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_V_data_V_1_sel_wr;
    sc_signal< sc_logic > out_stream_V_data_V_1_sel;
    sc_signal< sc_logic > out_stream_V_data_V_1_load_A;
    sc_signal< sc_logic > out_stream_V_data_V_1_load_B;
    sc_signal< sc_lv<2> > out_stream_V_data_V_1_state;
    sc_signal< sc_logic > out_stream_V_data_V_1_state_cmp_full;
    sc_signal< sc_lv<4> > out_stream_V_keep_V_1_data_out;
    sc_signal< sc_logic > out_stream_V_keep_V_1_vld_in;
    sc_signal< sc_logic > out_stream_V_keep_V_1_vld_out;
    sc_signal< sc_logic > out_stream_V_keep_V_1_ack_in;
    sc_signal< sc_logic > out_stream_V_keep_V_1_ack_out;
    sc_signal< sc_logic > out_stream_V_keep_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_V_keep_V_1_sel;
    sc_signal< sc_lv<2> > out_stream_V_keep_V_1_state;
    sc_signal< sc_lv<4> > out_stream_V_strb_V_1_data_out;
    sc_signal< sc_logic > out_stream_V_strb_V_1_vld_in;
    sc_signal< sc_logic > out_stream_V_strb_V_1_vld_out;
    sc_signal< sc_logic > out_stream_V_strb_V_1_ack_in;
    sc_signal< sc_logic > out_stream_V_strb_V_1_ack_out;
    sc_signal< sc_logic > out_stream_V_strb_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_V_strb_V_1_sel;
    sc_signal< sc_lv<2> > out_stream_V_strb_V_1_state;
    sc_signal< sc_lv<1> > out_stream_V_user_V_1_data_out;
    sc_signal< sc_logic > out_stream_V_user_V_1_vld_in;
    sc_signal< sc_logic > out_stream_V_user_V_1_vld_out;
    sc_signal< sc_logic > out_stream_V_user_V_1_ack_in;
    sc_signal< sc_logic > out_stream_V_user_V_1_ack_out;
    sc_signal< sc_lv<1> > out_stream_V_user_V_1_payload_A;
    sc_signal< sc_lv<1> > out_stream_V_user_V_1_payload_B;
    sc_signal< sc_logic > out_stream_V_user_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_V_user_V_1_sel_wr;
    sc_signal< sc_logic > out_stream_V_user_V_1_sel;
    sc_signal< sc_logic > out_stream_V_user_V_1_load_A;
    sc_signal< sc_logic > out_stream_V_user_V_1_load_B;
    sc_signal< sc_lv<2> > out_stream_V_user_V_1_state;
    sc_signal< sc_logic > out_stream_V_user_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > out_stream_V_last_V_1_data_out;
    sc_signal< sc_logic > out_stream_V_last_V_1_vld_in;
    sc_signal< sc_logic > out_stream_V_last_V_1_vld_out;
    sc_signal< sc_logic > out_stream_V_last_V_1_ack_in;
    sc_signal< sc_logic > out_stream_V_last_V_1_ack_out;
    sc_signal< sc_lv<1> > out_stream_V_last_V_1_payload_A;
    sc_signal< sc_lv<1> > out_stream_V_last_V_1_payload_B;
    sc_signal< sc_logic > out_stream_V_last_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_V_last_V_1_sel_wr;
    sc_signal< sc_logic > out_stream_V_last_V_1_sel;
    sc_signal< sc_logic > out_stream_V_last_V_1_load_A;
    sc_signal< sc_logic > out_stream_V_last_V_1_load_B;
    sc_signal< sc_lv<2> > out_stream_V_last_V_1_state;
    sc_signal< sc_logic > out_stream_V_last_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > out_stream_V_id_V_1_data_out;
    sc_signal< sc_logic > out_stream_V_id_V_1_vld_in;
    sc_signal< sc_logic > out_stream_V_id_V_1_vld_out;
    sc_signal< sc_logic > out_stream_V_id_V_1_ack_in;
    sc_signal< sc_logic > out_stream_V_id_V_1_ack_out;
    sc_signal< sc_logic > out_stream_V_id_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_V_id_V_1_sel;
    sc_signal< sc_lv<2> > out_stream_V_id_V_1_state;
    sc_signal< sc_lv<1> > out_stream_V_dest_V_1_data_out;
    sc_signal< sc_logic > out_stream_V_dest_V_1_vld_in;
    sc_signal< sc_logic > out_stream_V_dest_V_1_vld_out;
    sc_signal< sc_logic > out_stream_V_dest_V_1_ack_in;
    sc_signal< sc_logic > out_stream_V_dest_V_1_ack_out;
    sc_signal< sc_logic > out_stream_V_dest_V_1_sel_rd;
    sc_signal< sc_logic > out_stream_V_dest_V_1_sel;
    sc_signal< sc_lv<2> > out_stream_V_dest_V_1_state;
    sc_signal< sc_logic > out_r_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_291;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_flatten_reg_291;
    sc_signal< sc_logic > mask_blk_n;
    sc_signal< sc_lv<20> > indvar_flatten_reg_157;
    sc_signal< sc_lv<12> > i_i_reg_168;
    sc_signal< sc_lv<1> > axi_user_V_reg_179;
    sc_signal< sc_lv<9> > j_i_reg_194;
    sc_signal< sc_lv<32> > mask_read_reg_286;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_205_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<20> > indvar_flatten_next_fu_211_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<12> > tmp_i_mid2_v_v_fu_237_p3;
    sc_signal< sc_lv<12> > tmp_i_mid2_v_v_reg_300;
    sc_signal< sc_lv<1> > axi_last_V_fu_263_p2;
    sc_signal< sc_lv<1> > axi_last_V_reg_305;
    sc_signal< sc_lv<9> > j_fu_274_p2;
    sc_signal< sc_lv<32> > axi_data_V_fu_280_p2;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<12> > i_i_phi_fu_172_p4;
    sc_signal< sc_lv<1> > axi_user_V_phi_fu_185_p4;
    sc_signal< sc_lv<64> > tmp_4_i_fu_269_p1;
    sc_signal< bool > ap_block_pp0_stage0_flag00001001;
    sc_signal< sc_lv<1> > exitcond_i6_fu_217_p2;
    sc_signal< sc_lv<12> > i4_fu_231_p2;
    sc_signal< sc_lv<9> > j_i_mid2_fu_223_p3;
    sc_signal< sc_lv<20> > j_cast3_i_fu_253_p1;
    sc_signal< sc_lv<20> > tmp_i_mid2_fu_245_p3;
    sc_signal< sc_lv<20> > tmp_2_i_fu_257_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_state5;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<20> ap_const_lv20_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<20> ap_const_lv20_FFF00;
    static const sc_lv<20> ap_const_lv20_1;
    static const sc_lv<9> ap_const_lv9_100;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<20> ap_const_lv20_FFEFF;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00001001();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_axi_data_V_fu_280_p2();
    void thread_axi_last_V_fu_263_p2();
    void thread_axi_user_V_phi_fu_185_p4();
    void thread_exitcond_flatten_fu_205_p2();
    void thread_exitcond_i6_fu_217_p2();
    void thread_i4_fu_231_p2();
    void thread_i_i_phi_fu_172_p4();
    void thread_indvar_flatten_next_fu_211_p2();
    void thread_j_cast3_i_fu_253_p1();
    void thread_j_fu_274_p2();
    void thread_j_i_mid2_fu_223_p3();
    void thread_mask_blk_n();
    void thread_mask_read();
    void thread_out_r_TDATA();
    void thread_out_r_TDATA_blk_n();
    void thread_out_r_TDEST();
    void thread_out_r_TID();
    void thread_out_r_TKEEP();
    void thread_out_r_TLAST();
    void thread_out_r_TSTRB();
    void thread_out_r_TUSER();
    void thread_out_r_TVALID();
    void thread_out_stream_V_data_V_1_ack_in();
    void thread_out_stream_V_data_V_1_ack_out();
    void thread_out_stream_V_data_V_1_data_out();
    void thread_out_stream_V_data_V_1_load_A();
    void thread_out_stream_V_data_V_1_load_B();
    void thread_out_stream_V_data_V_1_sel();
    void thread_out_stream_V_data_V_1_state_cmp_full();
    void thread_out_stream_V_data_V_1_vld_in();
    void thread_out_stream_V_data_V_1_vld_out();
    void thread_out_stream_V_dest_V_1_ack_in();
    void thread_out_stream_V_dest_V_1_ack_out();
    void thread_out_stream_V_dest_V_1_data_out();
    void thread_out_stream_V_dest_V_1_sel();
    void thread_out_stream_V_dest_V_1_vld_in();
    void thread_out_stream_V_dest_V_1_vld_out();
    void thread_out_stream_V_id_V_1_ack_in();
    void thread_out_stream_V_id_V_1_ack_out();
    void thread_out_stream_V_id_V_1_data_out();
    void thread_out_stream_V_id_V_1_sel();
    void thread_out_stream_V_id_V_1_vld_in();
    void thread_out_stream_V_id_V_1_vld_out();
    void thread_out_stream_V_keep_V_1_ack_in();
    void thread_out_stream_V_keep_V_1_ack_out();
    void thread_out_stream_V_keep_V_1_data_out();
    void thread_out_stream_V_keep_V_1_sel();
    void thread_out_stream_V_keep_V_1_vld_in();
    void thread_out_stream_V_keep_V_1_vld_out();
    void thread_out_stream_V_last_V_1_ack_in();
    void thread_out_stream_V_last_V_1_ack_out();
    void thread_out_stream_V_last_V_1_data_out();
    void thread_out_stream_V_last_V_1_load_A();
    void thread_out_stream_V_last_V_1_load_B();
    void thread_out_stream_V_last_V_1_sel();
    void thread_out_stream_V_last_V_1_state_cmp_full();
    void thread_out_stream_V_last_V_1_vld_in();
    void thread_out_stream_V_last_V_1_vld_out();
    void thread_out_stream_V_strb_V_1_ack_in();
    void thread_out_stream_V_strb_V_1_ack_out();
    void thread_out_stream_V_strb_V_1_data_out();
    void thread_out_stream_V_strb_V_1_sel();
    void thread_out_stream_V_strb_V_1_vld_in();
    void thread_out_stream_V_strb_V_1_vld_out();
    void thread_out_stream_V_user_V_1_ack_in();
    void thread_out_stream_V_user_V_1_ack_out();
    void thread_out_stream_V_user_V_1_data_out();
    void thread_out_stream_V_user_V_1_load_A();
    void thread_out_stream_V_user_V_1_load_B();
    void thread_out_stream_V_user_V_1_sel();
    void thread_out_stream_V_user_V_1_state_cmp_full();
    void thread_out_stream_V_user_V_1_vld_in();
    void thread_out_stream_V_user_V_1_vld_out();
    void thread_test_init_arr_V_address0();
    void thread_test_init_arr_V_ce0();
    void thread_tmp_2_i_fu_257_p2();
    void thread_tmp_4_i_fu_269_p1();
    void thread_tmp_i_mid2_fu_245_p3();
    void thread_tmp_i_mid2_v_v_fu_237_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
