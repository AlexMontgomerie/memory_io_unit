// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Block_proc_HH_
#define _Block_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mem_write.h"
#include "mem_read.h"

namespace ap_rtl {

struct Block_proc : public sc_module {
    // Port declarations 30
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > rw;
    sc_in< sc_lv<64> > in_r_TDATA;
    sc_in< sc_logic > in_r_TVALID;
    sc_out< sc_logic > in_r_TREADY;
    sc_in< sc_lv<8> > in_r_TKEEP;
    sc_in< sc_lv<8> > in_r_TSTRB;
    sc_in< sc_lv<1> > in_r_TUSER;
    sc_in< sc_lv<1> > in_r_TLAST;
    sc_in< sc_lv<1> > in_r_TID;
    sc_in< sc_lv<1> > in_r_TDEST;
    sc_in< sc_lv<64> > mask;
    sc_out< sc_lv<64> > out_r_TDATA;
    sc_out< sc_logic > out_r_TVALID;
    sc_in< sc_logic > out_r_TREADY;
    sc_out< sc_lv<8> > out_r_TKEEP;
    sc_out< sc_lv<8> > out_r_TSTRB;
    sc_out< sc_lv<1> > out_r_TUSER;
    sc_out< sc_lv<1> > out_r_TLAST;
    sc_out< sc_lv<1> > out_r_TID;
    sc_out< sc_lv<1> > out_r_TDEST;
    sc_out< sc_lv<8> > test_init_arr_V_address0;
    sc_out< sc_logic > test_init_arr_V_ce0;
    sc_in< sc_lv<64> > test_init_arr_V_q0;


    // Module declarations
    Block_proc(sc_module_name name);
    SC_HAS_PROCESS(Block_proc);

    ~Block_proc();

    sc_trace_file* mVcdFile;

    mem_write* grp_mem_write_fu_76;
    mem_read* grp_mem_read_fu_97;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<64> > in_V_data_V_0_data_out;
    sc_signal< sc_logic > in_V_data_V_0_vld_in;
    sc_signal< sc_logic > in_V_data_V_0_vld_out;
    sc_signal< sc_logic > in_V_data_V_0_ack_in;
    sc_signal< sc_logic > in_V_data_V_0_ack_out;
    sc_signal< sc_lv<64> > in_V_data_V_0_payload_A;
    sc_signal< sc_lv<64> > in_V_data_V_0_payload_B;
    sc_signal< sc_logic > in_V_data_V_0_sel_rd;
    sc_signal< sc_logic > in_V_data_V_0_sel_wr;
    sc_signal< sc_logic > in_V_data_V_0_sel;
    sc_signal< sc_logic > in_V_data_V_0_load_A;
    sc_signal< sc_logic > in_V_data_V_0_load_B;
    sc_signal< sc_lv<2> > in_V_data_V_0_state;
    sc_signal< sc_logic > in_V_data_V_0_state_cmp_full;
    sc_signal< sc_lv<8> > in_V_keep_V_0_data_out;
    sc_signal< sc_logic > in_V_keep_V_0_vld_in;
    sc_signal< sc_logic > in_V_keep_V_0_vld_out;
    sc_signal< sc_logic > in_V_keep_V_0_ack_in;
    sc_signal< sc_logic > in_V_keep_V_0_ack_out;
    sc_signal< sc_lv<8> > in_V_keep_V_0_payload_A;
    sc_signal< sc_lv<8> > in_V_keep_V_0_payload_B;
    sc_signal< sc_logic > in_V_keep_V_0_sel_rd;
    sc_signal< sc_logic > in_V_keep_V_0_sel_wr;
    sc_signal< sc_logic > in_V_keep_V_0_sel;
    sc_signal< sc_logic > in_V_keep_V_0_load_A;
    sc_signal< sc_logic > in_V_keep_V_0_load_B;
    sc_signal< sc_lv<2> > in_V_keep_V_0_state;
    sc_signal< sc_logic > in_V_keep_V_0_state_cmp_full;
    sc_signal< sc_lv<8> > in_V_strb_V_0_data_out;
    sc_signal< sc_logic > in_V_strb_V_0_vld_in;
    sc_signal< sc_logic > in_V_strb_V_0_vld_out;
    sc_signal< sc_logic > in_V_strb_V_0_ack_in;
    sc_signal< sc_logic > in_V_strb_V_0_ack_out;
    sc_signal< sc_lv<8> > in_V_strb_V_0_payload_A;
    sc_signal< sc_lv<8> > in_V_strb_V_0_payload_B;
    sc_signal< sc_logic > in_V_strb_V_0_sel_rd;
    sc_signal< sc_logic > in_V_strb_V_0_sel_wr;
    sc_signal< sc_logic > in_V_strb_V_0_sel;
    sc_signal< sc_logic > in_V_strb_V_0_load_A;
    sc_signal< sc_logic > in_V_strb_V_0_load_B;
    sc_signal< sc_lv<2> > in_V_strb_V_0_state;
    sc_signal< sc_logic > in_V_strb_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > in_V_user_V_0_data_out;
    sc_signal< sc_logic > in_V_user_V_0_vld_in;
    sc_signal< sc_logic > in_V_user_V_0_vld_out;
    sc_signal< sc_logic > in_V_user_V_0_ack_in;
    sc_signal< sc_logic > in_V_user_V_0_ack_out;
    sc_signal< sc_lv<1> > in_V_user_V_0_payload_A;
    sc_signal< sc_lv<1> > in_V_user_V_0_payload_B;
    sc_signal< sc_logic > in_V_user_V_0_sel_rd;
    sc_signal< sc_logic > in_V_user_V_0_sel_wr;
    sc_signal< sc_logic > in_V_user_V_0_sel;
    sc_signal< sc_logic > in_V_user_V_0_load_A;
    sc_signal< sc_logic > in_V_user_V_0_load_B;
    sc_signal< sc_lv<2> > in_V_user_V_0_state;
    sc_signal< sc_logic > in_V_user_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > in_V_last_V_0_data_out;
    sc_signal< sc_logic > in_V_last_V_0_vld_in;
    sc_signal< sc_logic > in_V_last_V_0_vld_out;
    sc_signal< sc_logic > in_V_last_V_0_ack_in;
    sc_signal< sc_logic > in_V_last_V_0_ack_out;
    sc_signal< sc_lv<1> > in_V_last_V_0_payload_A;
    sc_signal< sc_lv<1> > in_V_last_V_0_payload_B;
    sc_signal< sc_logic > in_V_last_V_0_sel_rd;
    sc_signal< sc_logic > in_V_last_V_0_sel_wr;
    sc_signal< sc_logic > in_V_last_V_0_sel;
    sc_signal< sc_logic > in_V_last_V_0_load_A;
    sc_signal< sc_logic > in_V_last_V_0_load_B;
    sc_signal< sc_lv<2> > in_V_last_V_0_state;
    sc_signal< sc_logic > in_V_last_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > in_V_id_V_0_data_out;
    sc_signal< sc_logic > in_V_id_V_0_vld_in;
    sc_signal< sc_logic > in_V_id_V_0_vld_out;
    sc_signal< sc_logic > in_V_id_V_0_ack_in;
    sc_signal< sc_logic > in_V_id_V_0_ack_out;
    sc_signal< sc_lv<1> > in_V_id_V_0_payload_A;
    sc_signal< sc_lv<1> > in_V_id_V_0_payload_B;
    sc_signal< sc_logic > in_V_id_V_0_sel_rd;
    sc_signal< sc_logic > in_V_id_V_0_sel_wr;
    sc_signal< sc_logic > in_V_id_V_0_sel;
    sc_signal< sc_logic > in_V_id_V_0_load_A;
    sc_signal< sc_logic > in_V_id_V_0_load_B;
    sc_signal< sc_lv<2> > in_V_id_V_0_state;
    sc_signal< sc_logic > in_V_id_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > in_V_dest_V_0_data_out;
    sc_signal< sc_logic > in_V_dest_V_0_vld_in;
    sc_signal< sc_logic > in_V_dest_V_0_vld_out;
    sc_signal< sc_logic > in_V_dest_V_0_ack_in;
    sc_signal< sc_logic > in_V_dest_V_0_ack_out;
    sc_signal< sc_lv<1> > in_V_dest_V_0_payload_A;
    sc_signal< sc_lv<1> > in_V_dest_V_0_payload_B;
    sc_signal< sc_logic > in_V_dest_V_0_sel_rd;
    sc_signal< sc_logic > in_V_dest_V_0_sel_wr;
    sc_signal< sc_logic > in_V_dest_V_0_sel;
    sc_signal< sc_logic > in_V_dest_V_0_load_A;
    sc_signal< sc_logic > in_V_dest_V_0_load_B;
    sc_signal< sc_lv<2> > in_V_dest_V_0_state;
    sc_signal< sc_logic > in_V_dest_V_0_state_cmp_full;
    sc_signal< sc_lv<64> > out_V_data_V_1_data_out;
    sc_signal< sc_logic > out_V_data_V_1_vld_in;
    sc_signal< sc_logic > out_V_data_V_1_vld_out;
    sc_signal< sc_logic > out_V_data_V_1_ack_in;
    sc_signal< sc_logic > out_V_data_V_1_ack_out;
    sc_signal< sc_lv<64> > out_V_data_V_1_payload_A;
    sc_signal< sc_lv<64> > out_V_data_V_1_payload_B;
    sc_signal< sc_logic > out_V_data_V_1_sel_rd;
    sc_signal< sc_logic > out_V_data_V_1_sel_wr;
    sc_signal< sc_logic > out_V_data_V_1_sel;
    sc_signal< sc_logic > out_V_data_V_1_load_A;
    sc_signal< sc_logic > out_V_data_V_1_load_B;
    sc_signal< sc_lv<2> > out_V_data_V_1_state;
    sc_signal< sc_logic > out_V_data_V_1_state_cmp_full;
    sc_signal< sc_lv<8> > out_V_keep_V_1_data_out;
    sc_signal< sc_logic > out_V_keep_V_1_vld_in;
    sc_signal< sc_logic > out_V_keep_V_1_vld_out;
    sc_signal< sc_logic > out_V_keep_V_1_ack_in;
    sc_signal< sc_logic > out_V_keep_V_1_ack_out;
    sc_signal< sc_lv<8> > out_V_keep_V_1_payload_A;
    sc_signal< sc_lv<8> > out_V_keep_V_1_payload_B;
    sc_signal< sc_logic > out_V_keep_V_1_sel_rd;
    sc_signal< sc_logic > out_V_keep_V_1_sel_wr;
    sc_signal< sc_logic > out_V_keep_V_1_sel;
    sc_signal< sc_logic > out_V_keep_V_1_load_A;
    sc_signal< sc_logic > out_V_keep_V_1_load_B;
    sc_signal< sc_lv<2> > out_V_keep_V_1_state;
    sc_signal< sc_logic > out_V_keep_V_1_state_cmp_full;
    sc_signal< sc_lv<8> > out_V_strb_V_1_data_out;
    sc_signal< sc_logic > out_V_strb_V_1_vld_in;
    sc_signal< sc_logic > out_V_strb_V_1_vld_out;
    sc_signal< sc_logic > out_V_strb_V_1_ack_in;
    sc_signal< sc_logic > out_V_strb_V_1_ack_out;
    sc_signal< sc_lv<8> > out_V_strb_V_1_payload_A;
    sc_signal< sc_lv<8> > out_V_strb_V_1_payload_B;
    sc_signal< sc_logic > out_V_strb_V_1_sel_rd;
    sc_signal< sc_logic > out_V_strb_V_1_sel_wr;
    sc_signal< sc_logic > out_V_strb_V_1_sel;
    sc_signal< sc_logic > out_V_strb_V_1_load_A;
    sc_signal< sc_logic > out_V_strb_V_1_load_B;
    sc_signal< sc_lv<2> > out_V_strb_V_1_state;
    sc_signal< sc_logic > out_V_strb_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > out_V_user_V_1_data_out;
    sc_signal< sc_logic > out_V_user_V_1_vld_in;
    sc_signal< sc_logic > out_V_user_V_1_vld_out;
    sc_signal< sc_logic > out_V_user_V_1_ack_in;
    sc_signal< sc_logic > out_V_user_V_1_ack_out;
    sc_signal< sc_lv<1> > out_V_user_V_1_payload_A;
    sc_signal< sc_lv<1> > out_V_user_V_1_payload_B;
    sc_signal< sc_logic > out_V_user_V_1_sel_rd;
    sc_signal< sc_logic > out_V_user_V_1_sel_wr;
    sc_signal< sc_logic > out_V_user_V_1_sel;
    sc_signal< sc_logic > out_V_user_V_1_load_A;
    sc_signal< sc_logic > out_V_user_V_1_load_B;
    sc_signal< sc_lv<2> > out_V_user_V_1_state;
    sc_signal< sc_logic > out_V_user_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > out_V_last_V_1_data_out;
    sc_signal< sc_logic > out_V_last_V_1_vld_in;
    sc_signal< sc_logic > out_V_last_V_1_vld_out;
    sc_signal< sc_logic > out_V_last_V_1_ack_in;
    sc_signal< sc_logic > out_V_last_V_1_ack_out;
    sc_signal< sc_lv<1> > out_V_last_V_1_payload_A;
    sc_signal< sc_lv<1> > out_V_last_V_1_payload_B;
    sc_signal< sc_logic > out_V_last_V_1_sel_rd;
    sc_signal< sc_logic > out_V_last_V_1_sel_wr;
    sc_signal< sc_logic > out_V_last_V_1_sel;
    sc_signal< sc_logic > out_V_last_V_1_load_A;
    sc_signal< sc_logic > out_V_last_V_1_load_B;
    sc_signal< sc_lv<2> > out_V_last_V_1_state;
    sc_signal< sc_logic > out_V_last_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > out_V_id_V_1_data_out;
    sc_signal< sc_logic > out_V_id_V_1_vld_in;
    sc_signal< sc_logic > out_V_id_V_1_vld_out;
    sc_signal< sc_logic > out_V_id_V_1_ack_in;
    sc_signal< sc_logic > out_V_id_V_1_ack_out;
    sc_signal< sc_lv<1> > out_V_id_V_1_payload_A;
    sc_signal< sc_lv<1> > out_V_id_V_1_payload_B;
    sc_signal< sc_logic > out_V_id_V_1_sel_rd;
    sc_signal< sc_logic > out_V_id_V_1_sel_wr;
    sc_signal< sc_logic > out_V_id_V_1_sel;
    sc_signal< sc_logic > out_V_id_V_1_load_A;
    sc_signal< sc_logic > out_V_id_V_1_load_B;
    sc_signal< sc_lv<2> > out_V_id_V_1_state;
    sc_signal< sc_logic > out_V_id_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > out_V_dest_V_1_data_out;
    sc_signal< sc_logic > out_V_dest_V_1_vld_in;
    sc_signal< sc_logic > out_V_dest_V_1_vld_out;
    sc_signal< sc_logic > out_V_dest_V_1_ack_in;
    sc_signal< sc_logic > out_V_dest_V_1_ack_out;
    sc_signal< sc_lv<1> > out_V_dest_V_1_payload_A;
    sc_signal< sc_lv<1> > out_V_dest_V_1_payload_B;
    sc_signal< sc_logic > out_V_dest_V_1_sel_rd;
    sc_signal< sc_logic > out_V_dest_V_1_sel_wr;
    sc_signal< sc_logic > out_V_dest_V_1_sel;
    sc_signal< sc_logic > out_V_dest_V_1_load_A;
    sc_signal< sc_logic > out_V_dest_V_1_load_B;
    sc_signal< sc_lv<2> > out_V_dest_V_1_state;
    sc_signal< sc_logic > out_V_dest_V_1_state_cmp_full;
    sc_signal< sc_lv<32> > tmp_2_fu_125_p1;
    sc_signal< sc_lv<32> > tmp_2_reg_137;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > tmp_8_fu_119_p2;
    sc_signal< sc_lv<1> > tmp_1_fu_130_p1;
    sc_signal< sc_lv<1> > tmp_1_reg_142;
    sc_signal< sc_logic > grp_mem_write_fu_76_ap_start;
    sc_signal< sc_logic > grp_mem_write_fu_76_ap_done;
    sc_signal< sc_logic > grp_mem_write_fu_76_ap_idle;
    sc_signal< sc_logic > grp_mem_write_fu_76_ap_ready;
    sc_signal< sc_lv<64> > grp_mem_write_fu_76_out_r_TDATA;
    sc_signal< sc_logic > grp_mem_write_fu_76_out_r_TVALID;
    sc_signal< sc_logic > grp_mem_write_fu_76_out_r_TREADY;
    sc_signal< sc_lv<8> > grp_mem_write_fu_76_out_r_TKEEP;
    sc_signal< sc_lv<8> > grp_mem_write_fu_76_out_r_TSTRB;
    sc_signal< sc_lv<1> > grp_mem_write_fu_76_out_r_TUSER;
    sc_signal< sc_lv<1> > grp_mem_write_fu_76_out_r_TLAST;
    sc_signal< sc_lv<1> > grp_mem_write_fu_76_out_r_TID;
    sc_signal< sc_lv<1> > grp_mem_write_fu_76_out_r_TDEST;
    sc_signal< sc_lv<8> > grp_mem_write_fu_76_test_init_arr_V_address0;
    sc_signal< sc_logic > grp_mem_write_fu_76_test_init_arr_V_ce0;
    sc_signal< sc_logic > grp_mem_read_fu_97_ap_start;
    sc_signal< sc_logic > grp_mem_read_fu_97_ap_done;
    sc_signal< sc_logic > grp_mem_read_fu_97_ap_idle;
    sc_signal< sc_logic > grp_mem_read_fu_97_ap_ready;
    sc_signal< sc_logic > grp_mem_read_fu_97_in_r_TVALID;
    sc_signal< sc_logic > grp_mem_read_fu_97_in_r_TREADY;
    sc_signal< sc_logic > ap_reg_grp_mem_write_fu_76_ap_start;
    sc_signal< bool > ap_block_state1_ignore_call2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_reg_grp_mem_read_fu_97_ap_start;
    sc_signal< bool > ap_block_state1_ignore_call0;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<2> > tmp_fu_115_p1;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< bool > ap_block_state4;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< bool > ap_block_state2_on_subcall_done;
    sc_signal< bool > ap_block_state3_on_subcall_done;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state1();
    void thread_ap_block_state1_ignore_call0();
    void thread_ap_block_state1_ignore_call2();
    void thread_ap_block_state2_on_subcall_done();
    void thread_ap_block_state3_on_subcall_done();
    void thread_ap_block_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_mem_read_fu_97_ap_start();
    void thread_grp_mem_read_fu_97_in_r_TVALID();
    void thread_grp_mem_write_fu_76_ap_start();
    void thread_grp_mem_write_fu_76_out_r_TREADY();
    void thread_in_V_data_V_0_ack_in();
    void thread_in_V_data_V_0_ack_out();
    void thread_in_V_data_V_0_data_out();
    void thread_in_V_data_V_0_load_A();
    void thread_in_V_data_V_0_load_B();
    void thread_in_V_data_V_0_sel();
    void thread_in_V_data_V_0_state_cmp_full();
    void thread_in_V_data_V_0_vld_in();
    void thread_in_V_data_V_0_vld_out();
    void thread_in_V_dest_V_0_ack_in();
    void thread_in_V_dest_V_0_ack_out();
    void thread_in_V_dest_V_0_data_out();
    void thread_in_V_dest_V_0_load_A();
    void thread_in_V_dest_V_0_load_B();
    void thread_in_V_dest_V_0_sel();
    void thread_in_V_dest_V_0_state_cmp_full();
    void thread_in_V_dest_V_0_vld_in();
    void thread_in_V_dest_V_0_vld_out();
    void thread_in_V_id_V_0_ack_in();
    void thread_in_V_id_V_0_ack_out();
    void thread_in_V_id_V_0_data_out();
    void thread_in_V_id_V_0_load_A();
    void thread_in_V_id_V_0_load_B();
    void thread_in_V_id_V_0_sel();
    void thread_in_V_id_V_0_state_cmp_full();
    void thread_in_V_id_V_0_vld_in();
    void thread_in_V_id_V_0_vld_out();
    void thread_in_V_keep_V_0_ack_in();
    void thread_in_V_keep_V_0_ack_out();
    void thread_in_V_keep_V_0_data_out();
    void thread_in_V_keep_V_0_load_A();
    void thread_in_V_keep_V_0_load_B();
    void thread_in_V_keep_V_0_sel();
    void thread_in_V_keep_V_0_state_cmp_full();
    void thread_in_V_keep_V_0_vld_in();
    void thread_in_V_keep_V_0_vld_out();
    void thread_in_V_last_V_0_ack_in();
    void thread_in_V_last_V_0_ack_out();
    void thread_in_V_last_V_0_data_out();
    void thread_in_V_last_V_0_load_A();
    void thread_in_V_last_V_0_load_B();
    void thread_in_V_last_V_0_sel();
    void thread_in_V_last_V_0_state_cmp_full();
    void thread_in_V_last_V_0_vld_in();
    void thread_in_V_last_V_0_vld_out();
    void thread_in_V_strb_V_0_ack_in();
    void thread_in_V_strb_V_0_ack_out();
    void thread_in_V_strb_V_0_data_out();
    void thread_in_V_strb_V_0_load_A();
    void thread_in_V_strb_V_0_load_B();
    void thread_in_V_strb_V_0_sel();
    void thread_in_V_strb_V_0_state_cmp_full();
    void thread_in_V_strb_V_0_vld_in();
    void thread_in_V_strb_V_0_vld_out();
    void thread_in_V_user_V_0_ack_in();
    void thread_in_V_user_V_0_ack_out();
    void thread_in_V_user_V_0_data_out();
    void thread_in_V_user_V_0_load_A();
    void thread_in_V_user_V_0_load_B();
    void thread_in_V_user_V_0_sel();
    void thread_in_V_user_V_0_state_cmp_full();
    void thread_in_V_user_V_0_vld_in();
    void thread_in_V_user_V_0_vld_out();
    void thread_in_r_TREADY();
    void thread_out_V_data_V_1_ack_in();
    void thread_out_V_data_V_1_ack_out();
    void thread_out_V_data_V_1_data_out();
    void thread_out_V_data_V_1_load_A();
    void thread_out_V_data_V_1_load_B();
    void thread_out_V_data_V_1_sel();
    void thread_out_V_data_V_1_state_cmp_full();
    void thread_out_V_data_V_1_vld_in();
    void thread_out_V_data_V_1_vld_out();
    void thread_out_V_dest_V_1_ack_in();
    void thread_out_V_dest_V_1_ack_out();
    void thread_out_V_dest_V_1_data_out();
    void thread_out_V_dest_V_1_load_A();
    void thread_out_V_dest_V_1_load_B();
    void thread_out_V_dest_V_1_sel();
    void thread_out_V_dest_V_1_state_cmp_full();
    void thread_out_V_dest_V_1_vld_in();
    void thread_out_V_dest_V_1_vld_out();
    void thread_out_V_id_V_1_ack_in();
    void thread_out_V_id_V_1_ack_out();
    void thread_out_V_id_V_1_data_out();
    void thread_out_V_id_V_1_load_A();
    void thread_out_V_id_V_1_load_B();
    void thread_out_V_id_V_1_sel();
    void thread_out_V_id_V_1_state_cmp_full();
    void thread_out_V_id_V_1_vld_in();
    void thread_out_V_id_V_1_vld_out();
    void thread_out_V_keep_V_1_ack_in();
    void thread_out_V_keep_V_1_ack_out();
    void thread_out_V_keep_V_1_data_out();
    void thread_out_V_keep_V_1_load_A();
    void thread_out_V_keep_V_1_load_B();
    void thread_out_V_keep_V_1_sel();
    void thread_out_V_keep_V_1_state_cmp_full();
    void thread_out_V_keep_V_1_vld_in();
    void thread_out_V_keep_V_1_vld_out();
    void thread_out_V_last_V_1_ack_in();
    void thread_out_V_last_V_1_ack_out();
    void thread_out_V_last_V_1_data_out();
    void thread_out_V_last_V_1_load_A();
    void thread_out_V_last_V_1_load_B();
    void thread_out_V_last_V_1_sel();
    void thread_out_V_last_V_1_state_cmp_full();
    void thread_out_V_last_V_1_vld_in();
    void thread_out_V_last_V_1_vld_out();
    void thread_out_V_strb_V_1_ack_in();
    void thread_out_V_strb_V_1_ack_out();
    void thread_out_V_strb_V_1_data_out();
    void thread_out_V_strb_V_1_load_A();
    void thread_out_V_strb_V_1_load_B();
    void thread_out_V_strb_V_1_sel();
    void thread_out_V_strb_V_1_state_cmp_full();
    void thread_out_V_strb_V_1_vld_in();
    void thread_out_V_strb_V_1_vld_out();
    void thread_out_V_user_V_1_ack_in();
    void thread_out_V_user_V_1_ack_out();
    void thread_out_V_user_V_1_data_out();
    void thread_out_V_user_V_1_load_A();
    void thread_out_V_user_V_1_load_B();
    void thread_out_V_user_V_1_sel();
    void thread_out_V_user_V_1_state_cmp_full();
    void thread_out_V_user_V_1_vld_in();
    void thread_out_V_user_V_1_vld_out();
    void thread_out_r_TDATA();
    void thread_out_r_TDEST();
    void thread_out_r_TID();
    void thread_out_r_TKEEP();
    void thread_out_r_TLAST();
    void thread_out_r_TSTRB();
    void thread_out_r_TUSER();
    void thread_out_r_TVALID();
    void thread_test_init_arr_V_address0();
    void thread_test_init_arr_V_ce0();
    void thread_tmp_1_fu_130_p1();
    void thread_tmp_2_fu_125_p1();
    void thread_tmp_8_fu_119_p2();
    void thread_tmp_fu_115_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
