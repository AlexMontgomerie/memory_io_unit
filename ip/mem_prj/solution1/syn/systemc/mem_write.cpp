// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mem_write.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mem_write::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mem_write::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> mem_write::ap_ST_fsm_state1 = "1";
const sc_lv<3> mem_write::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> mem_write::ap_ST_fsm_state5 = "100";
const sc_lv<32> mem_write::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool mem_write::ap_const_boolean_1 = true;
const sc_lv<1> mem_write::ap_const_lv1_0 = "0";
const sc_lv<1> mem_write::ap_const_lv1_1 = "1";
const sc_lv<2> mem_write::ap_const_lv2_0 = "00";
const sc_lv<2> mem_write::ap_const_lv2_2 = "10";
const sc_lv<2> mem_write::ap_const_lv2_3 = "11";
const sc_lv<2> mem_write::ap_const_lv2_1 = "1";
const sc_lv<32> mem_write::ap_const_lv32_1 = "1";
const bool mem_write::ap_const_boolean_0 = false;
const sc_lv<20> mem_write::ap_const_lv20_0 = "00000000000000000000";
const sc_lv<12> mem_write::ap_const_lv12_0 = "000000000000";
const sc_lv<9> mem_write::ap_const_lv9_0 = "000000000";
const sc_lv<4> mem_write::ap_const_lv4_F = "1111";
const sc_lv<4> mem_write::ap_const_lv4_0 = "0000";
const sc_lv<20> mem_write::ap_const_lv20_FFF00 = "11111111111100000000";
const sc_lv<20> mem_write::ap_const_lv20_1 = "1";
const sc_lv<9> mem_write::ap_const_lv9_100 = "100000000";
const sc_lv<12> mem_write::ap_const_lv12_1 = "1";
const sc_lv<8> mem_write::ap_const_lv8_0 = "00000000";
const sc_lv<20> mem_write::ap_const_lv20_FFEFF = "11111111111011111111";
const sc_lv<9> mem_write::ap_const_lv9_1 = "1";
const sc_lv<32> mem_write::ap_const_lv32_2 = "10";

mem_write::mem_write(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00001001);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011011);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( mask_empty_n );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( exitcond_flatten_reg_291 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( ap_reg_pp0_iter1_exitcond_flatten_reg_291 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( out_stream_V_keep_V_1_ack_in );
    sensitive << ( out_stream_V_strb_V_1_ack_in );
    sensitive << ( out_stream_V_user_V_1_ack_in );
    sensitive << ( out_stream_V_last_V_1_ack_in );
    sensitive << ( out_stream_V_id_V_1_ack_in );
    sensitive << ( out_stream_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_flatten_fu_205_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( out_stream_V_keep_V_1_ack_in );
    sensitive << ( out_stream_V_strb_V_1_ack_in );
    sensitive << ( out_stream_V_user_V_1_ack_in );
    sensitive << ( out_stream_V_last_V_1_ack_in );
    sensitive << ( out_stream_V_id_V_1_ack_in );
    sensitive << ( out_stream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( out_stream_V_keep_V_1_ack_in );
    sensitive << ( out_stream_V_strb_V_1_ack_in );
    sensitive << ( out_stream_V_user_V_1_ack_in );
    sensitive << ( out_stream_V_last_V_1_ack_in );
    sensitive << ( out_stream_V_id_V_1_ack_in );
    sensitive << ( out_stream_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_axi_data_V_fu_280_p2);
    sensitive << ( test_init_arr_V_q0 );
    sensitive << ( mask_read_reg_286 );

    SC_METHOD(thread_axi_last_V_fu_263_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( exitcond_flatten_fu_205_p2 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_2_i_fu_257_p2 );

    SC_METHOD(thread_axi_user_V_phi_fu_185_p4);
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_flatten_reg_291 );
    sensitive << ( axi_user_V_reg_179 );

    SC_METHOD(thread_exitcond_flatten_fu_205_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_157 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_exitcond_i6_fu_217_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( j_i_reg_194 );
    sensitive << ( exitcond_flatten_fu_205_p2 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i4_fu_231_p2);
    sensitive << ( i_i_phi_fu_172_p4 );

    SC_METHOD(thread_i_i_phi_fu_172_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( exitcond_flatten_reg_291 );
    sensitive << ( i_i_reg_168 );
    sensitive << ( tmp_i_mid2_v_v_reg_300 );

    SC_METHOD(thread_indvar_flatten_next_fu_211_p2);
    sensitive << ( indvar_flatten_reg_157 );

    SC_METHOD(thread_j_cast3_i_fu_253_p1);
    sensitive << ( j_i_mid2_fu_223_p3 );

    SC_METHOD(thread_j_fu_274_p2);
    sensitive << ( j_i_mid2_fu_223_p3 );

    SC_METHOD(thread_j_i_mid2_fu_223_p3);
    sensitive << ( j_i_reg_194 );
    sensitive << ( exitcond_i6_fu_217_p2 );

    SC_METHOD(thread_mask_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mask_empty_n );

    SC_METHOD(thread_mask_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mask_empty_n );

    SC_METHOD(thread_out_r_TDATA);
    sensitive << ( out_stream_V_data_V_1_data_out );

    SC_METHOD(thread_out_r_TDATA_blk_n);
    sensitive << ( out_stream_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( exitcond_flatten_reg_291 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_flatten_reg_291 );

    SC_METHOD(thread_out_r_TDEST);
    sensitive << ( out_stream_V_dest_V_1_data_out );

    SC_METHOD(thread_out_r_TID);
    sensitive << ( out_stream_V_id_V_1_data_out );

    SC_METHOD(thread_out_r_TKEEP);
    sensitive << ( out_stream_V_keep_V_1_data_out );

    SC_METHOD(thread_out_r_TLAST);
    sensitive << ( out_stream_V_last_V_1_data_out );

    SC_METHOD(thread_out_r_TSTRB);
    sensitive << ( out_stream_V_strb_V_1_data_out );

    SC_METHOD(thread_out_r_TUSER);
    sensitive << ( out_stream_V_user_V_1_data_out );

    SC_METHOD(thread_out_r_TVALID);
    sensitive << ( out_stream_V_dest_V_1_state );

    SC_METHOD(thread_out_stream_V_data_V_1_ack_in);
    sensitive << ( out_stream_V_data_V_1_state );

    SC_METHOD(thread_out_stream_V_data_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_stream_V_data_V_1_data_out);
    sensitive << ( out_stream_V_data_V_1_payload_A );
    sensitive << ( out_stream_V_data_V_1_payload_B );
    sensitive << ( out_stream_V_data_V_1_sel );

    SC_METHOD(thread_out_stream_V_data_V_1_load_A);
    sensitive << ( out_stream_V_data_V_1_sel_wr );
    sensitive << ( out_stream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_data_V_1_load_B);
    sensitive << ( out_stream_V_data_V_1_sel_wr );
    sensitive << ( out_stream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_data_V_1_sel);
    sensitive << ( out_stream_V_data_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_data_V_1_state_cmp_full);
    sensitive << ( out_stream_V_data_V_1_state );

    SC_METHOD(thread_out_stream_V_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_291 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_out_stream_V_data_V_1_vld_out);
    sensitive << ( out_stream_V_data_V_1_state );

    SC_METHOD(thread_out_stream_V_dest_V_1_ack_in);
    sensitive << ( out_stream_V_dest_V_1_state );

    SC_METHOD(thread_out_stream_V_dest_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_stream_V_dest_V_1_data_out);
    sensitive << ( out_stream_V_dest_V_1_sel );

    SC_METHOD(thread_out_stream_V_dest_V_1_sel);
    sensitive << ( out_stream_V_dest_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_dest_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_291 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_out_stream_V_dest_V_1_vld_out);
    sensitive << ( out_stream_V_dest_V_1_state );

    SC_METHOD(thread_out_stream_V_id_V_1_ack_in);
    sensitive << ( out_stream_V_id_V_1_state );

    SC_METHOD(thread_out_stream_V_id_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_stream_V_id_V_1_data_out);
    sensitive << ( out_stream_V_id_V_1_sel );

    SC_METHOD(thread_out_stream_V_id_V_1_sel);
    sensitive << ( out_stream_V_id_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_id_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_291 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_out_stream_V_id_V_1_vld_out);
    sensitive << ( out_stream_V_id_V_1_state );

    SC_METHOD(thread_out_stream_V_keep_V_1_ack_in);
    sensitive << ( out_stream_V_keep_V_1_state );

    SC_METHOD(thread_out_stream_V_keep_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_stream_V_keep_V_1_data_out);
    sensitive << ( out_stream_V_keep_V_1_sel );

    SC_METHOD(thread_out_stream_V_keep_V_1_sel);
    sensitive << ( out_stream_V_keep_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_keep_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_291 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_out_stream_V_keep_V_1_vld_out);
    sensitive << ( out_stream_V_keep_V_1_state );

    SC_METHOD(thread_out_stream_V_last_V_1_ack_in);
    sensitive << ( out_stream_V_last_V_1_state );

    SC_METHOD(thread_out_stream_V_last_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_stream_V_last_V_1_data_out);
    sensitive << ( out_stream_V_last_V_1_payload_A );
    sensitive << ( out_stream_V_last_V_1_payload_B );
    sensitive << ( out_stream_V_last_V_1_sel );

    SC_METHOD(thread_out_stream_V_last_V_1_load_A);
    sensitive << ( out_stream_V_last_V_1_sel_wr );
    sensitive << ( out_stream_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_last_V_1_load_B);
    sensitive << ( out_stream_V_last_V_1_sel_wr );
    sensitive << ( out_stream_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_last_V_1_sel);
    sensitive << ( out_stream_V_last_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_last_V_1_state_cmp_full);
    sensitive << ( out_stream_V_last_V_1_state );

    SC_METHOD(thread_out_stream_V_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_291 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_out_stream_V_last_V_1_vld_out);
    sensitive << ( out_stream_V_last_V_1_state );

    SC_METHOD(thread_out_stream_V_strb_V_1_ack_in);
    sensitive << ( out_stream_V_strb_V_1_state );

    SC_METHOD(thread_out_stream_V_strb_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_stream_V_strb_V_1_data_out);
    sensitive << ( out_stream_V_strb_V_1_sel );

    SC_METHOD(thread_out_stream_V_strb_V_1_sel);
    sensitive << ( out_stream_V_strb_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_strb_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_291 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_out_stream_V_strb_V_1_vld_out);
    sensitive << ( out_stream_V_strb_V_1_state );

    SC_METHOD(thread_out_stream_V_user_V_1_ack_in);
    sensitive << ( out_stream_V_user_V_1_state );

    SC_METHOD(thread_out_stream_V_user_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_stream_V_user_V_1_data_out);
    sensitive << ( out_stream_V_user_V_1_payload_A );
    sensitive << ( out_stream_V_user_V_1_payload_B );
    sensitive << ( out_stream_V_user_V_1_sel );

    SC_METHOD(thread_out_stream_V_user_V_1_load_A);
    sensitive << ( out_stream_V_user_V_1_sel_wr );
    sensitive << ( out_stream_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_user_V_1_load_B);
    sensitive << ( out_stream_V_user_V_1_sel_wr );
    sensitive << ( out_stream_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_V_user_V_1_sel);
    sensitive << ( out_stream_V_user_V_1_sel_rd );

    SC_METHOD(thread_out_stream_V_user_V_1_state_cmp_full);
    sensitive << ( out_stream_V_user_V_1_state );

    SC_METHOD(thread_out_stream_V_user_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_291 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_out_stream_V_user_V_1_vld_out);
    sensitive << ( out_stream_V_user_V_1_state );

    SC_METHOD(thread_test_init_arr_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_4_i_fu_269_p1 );

    SC_METHOD(thread_test_init_arr_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_tmp_2_i_fu_257_p2);
    sensitive << ( j_cast3_i_fu_253_p1 );
    sensitive << ( tmp_i_mid2_fu_245_p3 );

    SC_METHOD(thread_tmp_4_i_fu_269_p1);
    sensitive << ( j_i_mid2_fu_223_p3 );

    SC_METHOD(thread_tmp_i_mid2_fu_245_p3);
    sensitive << ( tmp_i_mid2_v_v_fu_237_p3 );

    SC_METHOD(thread_tmp_i_mid2_v_v_fu_237_p3);
    sensitive << ( i_i_phi_fu_172_p4 );
    sensitive << ( exitcond_i6_fu_217_p2 );
    sensitive << ( i4_fu_231_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_stream_V_data_V_1_ack_in );
    sensitive << ( out_stream_V_keep_V_1_ack_in );
    sensitive << ( out_stream_V_strb_V_1_ack_in );
    sensitive << ( out_stream_V_user_V_1_ack_in );
    sensitive << ( out_stream_V_last_V_1_ack_in );
    sensitive << ( out_stream_V_id_V_1_ack_in );
    sensitive << ( out_stream_V_dest_V_1_ack_in );
    sensitive << ( mask_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_flatten_fu_205_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_flag00011011 );
    sensitive << ( ap_CS_fsm_state5 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    out_stream_V_data_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_data_V_1_sel_wr = SC_LOGIC_0;
    out_stream_V_data_V_1_state = "00";
    out_stream_V_keep_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_keep_V_1_state = "00";
    out_stream_V_strb_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_strb_V_1_state = "00";
    out_stream_V_user_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_user_V_1_sel_wr = SC_LOGIC_0;
    out_stream_V_user_V_1_state = "00";
    out_stream_V_last_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_last_V_1_sel_wr = SC_LOGIC_0;
    out_stream_V_last_V_1_state = "00";
    out_stream_V_id_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_id_V_1_state = "00";
    out_stream_V_dest_V_1_sel_rd = SC_LOGIC_0;
    out_stream_V_dest_V_1_state = "00";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mem_write_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, out_r_TDATA, "(port)out_r_TDATA");
    sc_trace(mVcdFile, out_r_TVALID, "(port)out_r_TVALID");
    sc_trace(mVcdFile, out_r_TREADY, "(port)out_r_TREADY");
    sc_trace(mVcdFile, out_r_TKEEP, "(port)out_r_TKEEP");
    sc_trace(mVcdFile, out_r_TSTRB, "(port)out_r_TSTRB");
    sc_trace(mVcdFile, out_r_TUSER, "(port)out_r_TUSER");
    sc_trace(mVcdFile, out_r_TLAST, "(port)out_r_TLAST");
    sc_trace(mVcdFile, out_r_TID, "(port)out_r_TID");
    sc_trace(mVcdFile, out_r_TDEST, "(port)out_r_TDEST");
    sc_trace(mVcdFile, mask_dout, "(port)mask_dout");
    sc_trace(mVcdFile, mask_empty_n, "(port)mask_empty_n");
    sc_trace(mVcdFile, mask_read, "(port)mask_read");
    sc_trace(mVcdFile, test_init_arr_V_address0, "(port)test_init_arr_V_address0");
    sc_trace(mVcdFile, test_init_arr_V_ce0, "(port)test_init_arr_V_ce0");
    sc_trace(mVcdFile, test_init_arr_V_q0, "(port)test_init_arr_V_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_stream_V_data_V_1_data_out, "out_stream_V_data_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_data_V_1_vld_in, "out_stream_V_data_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_data_V_1_vld_out, "out_stream_V_data_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_data_V_1_ack_in, "out_stream_V_data_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_data_V_1_ack_out, "out_stream_V_data_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_data_V_1_payload_A, "out_stream_V_data_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_V_data_V_1_payload_B, "out_stream_V_data_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_V_data_V_1_sel_rd, "out_stream_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_data_V_1_sel_wr, "out_stream_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_V_data_V_1_sel, "out_stream_V_data_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_data_V_1_load_A, "out_stream_V_data_V_1_load_A");
    sc_trace(mVcdFile, out_stream_V_data_V_1_load_B, "out_stream_V_data_V_1_load_B");
    sc_trace(mVcdFile, out_stream_V_data_V_1_state, "out_stream_V_data_V_1_state");
    sc_trace(mVcdFile, out_stream_V_data_V_1_state_cmp_full, "out_stream_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_stream_V_keep_V_1_data_out, "out_stream_V_keep_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_keep_V_1_vld_in, "out_stream_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_keep_V_1_vld_out, "out_stream_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_keep_V_1_ack_in, "out_stream_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_keep_V_1_ack_out, "out_stream_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_keep_V_1_sel_rd, "out_stream_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_keep_V_1_sel, "out_stream_V_keep_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_keep_V_1_state, "out_stream_V_keep_V_1_state");
    sc_trace(mVcdFile, out_stream_V_strb_V_1_data_out, "out_stream_V_strb_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_strb_V_1_vld_in, "out_stream_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_strb_V_1_vld_out, "out_stream_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_strb_V_1_ack_in, "out_stream_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_strb_V_1_ack_out, "out_stream_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_strb_V_1_sel_rd, "out_stream_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_strb_V_1_sel, "out_stream_V_strb_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_strb_V_1_state, "out_stream_V_strb_V_1_state");
    sc_trace(mVcdFile, out_stream_V_user_V_1_data_out, "out_stream_V_user_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_user_V_1_vld_in, "out_stream_V_user_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_user_V_1_vld_out, "out_stream_V_user_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_user_V_1_ack_in, "out_stream_V_user_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_user_V_1_ack_out, "out_stream_V_user_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_user_V_1_payload_A, "out_stream_V_user_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_V_user_V_1_payload_B, "out_stream_V_user_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_V_user_V_1_sel_rd, "out_stream_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_user_V_1_sel_wr, "out_stream_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_V_user_V_1_sel, "out_stream_V_user_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_user_V_1_load_A, "out_stream_V_user_V_1_load_A");
    sc_trace(mVcdFile, out_stream_V_user_V_1_load_B, "out_stream_V_user_V_1_load_B");
    sc_trace(mVcdFile, out_stream_V_user_V_1_state, "out_stream_V_user_V_1_state");
    sc_trace(mVcdFile, out_stream_V_user_V_1_state_cmp_full, "out_stream_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_stream_V_last_V_1_data_out, "out_stream_V_last_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_last_V_1_vld_in, "out_stream_V_last_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_last_V_1_vld_out, "out_stream_V_last_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_last_V_1_ack_in, "out_stream_V_last_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_last_V_1_ack_out, "out_stream_V_last_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_last_V_1_payload_A, "out_stream_V_last_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_V_last_V_1_payload_B, "out_stream_V_last_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_V_last_V_1_sel_rd, "out_stream_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_last_V_1_sel_wr, "out_stream_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_V_last_V_1_sel, "out_stream_V_last_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_last_V_1_load_A, "out_stream_V_last_V_1_load_A");
    sc_trace(mVcdFile, out_stream_V_last_V_1_load_B, "out_stream_V_last_V_1_load_B");
    sc_trace(mVcdFile, out_stream_V_last_V_1_state, "out_stream_V_last_V_1_state");
    sc_trace(mVcdFile, out_stream_V_last_V_1_state_cmp_full, "out_stream_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_stream_V_id_V_1_data_out, "out_stream_V_id_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_id_V_1_vld_in, "out_stream_V_id_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_id_V_1_vld_out, "out_stream_V_id_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_id_V_1_ack_in, "out_stream_V_id_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_id_V_1_ack_out, "out_stream_V_id_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_id_V_1_sel_rd, "out_stream_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_id_V_1_sel, "out_stream_V_id_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_id_V_1_state, "out_stream_V_id_V_1_state");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_data_out, "out_stream_V_dest_V_1_data_out");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_vld_in, "out_stream_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_vld_out, "out_stream_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_ack_in, "out_stream_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_ack_out, "out_stream_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_sel_rd, "out_stream_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_sel, "out_stream_V_dest_V_1_sel");
    sc_trace(mVcdFile, out_stream_V_dest_V_1_state, "out_stream_V_dest_V_1_state");
    sc_trace(mVcdFile, out_r_TDATA_blk_n, "out_r_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00000000, "ap_block_pp0_stage0_flag00000000");
    sc_trace(mVcdFile, exitcond_flatten_reg_291, "exitcond_flatten_reg_291");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_exitcond_flatten_reg_291, "ap_reg_pp0_iter1_exitcond_flatten_reg_291");
    sc_trace(mVcdFile, mask_blk_n, "mask_blk_n");
    sc_trace(mVcdFile, indvar_flatten_reg_157, "indvar_flatten_reg_157");
    sc_trace(mVcdFile, i_i_reg_168, "i_i_reg_168");
    sc_trace(mVcdFile, axi_user_V_reg_179, "axi_user_V_reg_179");
    sc_trace(mVcdFile, j_i_reg_194, "j_i_reg_194");
    sc_trace(mVcdFile, mask_read_reg_286, "mask_read_reg_286");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, exitcond_flatten_fu_205_p2, "exitcond_flatten_fu_205_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011001, "ap_block_pp0_stage0_flag00011001");
    sc_trace(mVcdFile, indvar_flatten_next_fu_211_p2, "indvar_flatten_next_fu_211_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_i_mid2_v_v_fu_237_p3, "tmp_i_mid2_v_v_fu_237_p3");
    sc_trace(mVcdFile, tmp_i_mid2_v_v_reg_300, "tmp_i_mid2_v_v_reg_300");
    sc_trace(mVcdFile, axi_last_V_fu_263_p2, "axi_last_V_fu_263_p2");
    sc_trace(mVcdFile, axi_last_V_reg_305, "axi_last_V_reg_305");
    sc_trace(mVcdFile, j_fu_274_p2, "j_fu_274_p2");
    sc_trace(mVcdFile, axi_data_V_fu_280_p2, "axi_data_V_fu_280_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011011, "ap_block_pp0_stage0_flag00011011");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, i_i_phi_fu_172_p4, "i_i_phi_fu_172_p4");
    sc_trace(mVcdFile, axi_user_V_phi_fu_185_p4, "axi_user_V_phi_fu_185_p4");
    sc_trace(mVcdFile, tmp_4_i_fu_269_p1, "tmp_4_i_fu_269_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00001001, "ap_block_pp0_stage0_flag00001001");
    sc_trace(mVcdFile, exitcond_i6_fu_217_p2, "exitcond_i6_fu_217_p2");
    sc_trace(mVcdFile, i4_fu_231_p2, "i4_fu_231_p2");
    sc_trace(mVcdFile, j_i_mid2_fu_223_p3, "j_i_mid2_fu_223_p3");
    sc_trace(mVcdFile, j_cast3_i_fu_253_p1, "j_cast3_i_fu_253_p1");
    sc_trace(mVcdFile, tmp_i_mid2_fu_245_p3, "tmp_i_mid2_fu_245_p3");
    sc_trace(mVcdFile, tmp_2_i_fu_257_p2, "tmp_2_i_fu_257_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

mem_write::~mem_write() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void mem_write::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_dest_V_1_ack_in.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mask_empty_n.read())))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mask_empty_n.read())))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_flatten_reg_291.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        axi_user_V_reg_179 = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mask_empty_n.read())))) {
        axi_user_V_reg_179 = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_291.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        i_i_reg_168 = tmp_i_mid2_v_v_reg_300.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mask_empty_n.read())))) {
        i_i_reg_168 = ap_const_lv12_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_205_p2.read()))) {
        indvar_flatten_reg_157 = indvar_flatten_next_fu_211_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mask_empty_n.read())))) {
        indvar_flatten_reg_157 = ap_const_lv20_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_205_p2.read()))) {
        j_i_reg_194 = j_fu_274_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mask_empty_n.read())))) {
        j_i_reg_194 = ap_const_lv9_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_out.read()))) {
            out_stream_V_data_V_1_sel_rd =  (sc_logic) (~out_stream_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_in.read()))) {
            out_stream_V_data_V_1_sel_wr =  (sc_logic) (~out_stream_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            out_stream_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            out_stream_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(out_stream_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_ack_out.read()))))) {
            out_stream_V_data_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_vld_out.read()))) {
            out_stream_V_dest_V_1_sel_rd =  (sc_logic) (~out_stream_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_dest_V_1_state.read())))) {
            out_stream_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_dest_V_1_state.read())))) {
            out_stream_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_dest_V_1_ack_out.read()))))) {
            out_stream_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_vld_out.read()))) {
            out_stream_V_id_V_1_sel_rd =  (sc_logic) (~out_stream_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_id_V_1_state.read())))) {
            out_stream_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_id_V_1_state.read())))) {
            out_stream_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_id_V_1_ack_out.read()))))) {
            out_stream_V_id_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_keep_V_1_vld_out.read()))) {
            out_stream_V_keep_V_1_sel_rd =  (sc_logic) (~out_stream_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_keep_V_1_state.read())))) {
            out_stream_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_keep_V_1_state.read())))) {
            out_stream_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_keep_V_1_ack_out.read()))))) {
            out_stream_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_vld_out.read()))) {
            out_stream_V_last_V_1_sel_rd =  (sc_logic) (~out_stream_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_ack_in.read()))) {
            out_stream_V_last_V_1_sel_wr =  (sc_logic) (~out_stream_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_last_V_1_state.read())))) {
            out_stream_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_last_V_1_state.read())))) {
            out_stream_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_ack_out.read()))))) {
            out_stream_V_last_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_strb_V_1_vld_out.read()))) {
            out_stream_V_strb_V_1_sel_rd =  (sc_logic) (~out_stream_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_strb_V_1_state.read())))) {
            out_stream_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_strb_V_1_state.read())))) {
            out_stream_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_strb_V_1_ack_out.read()))))) {
            out_stream_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_vld_out.read()))) {
            out_stream_V_user_V_1_sel_rd =  (sc_logic) (~out_stream_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_ack_in.read()))) {
            out_stream_V_user_V_1_sel_wr =  (sc_logic) (~out_stream_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_user_V_1_state.read())))) {
            out_stream_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_user_V_1_state.read())))) {
            out_stream_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_stream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_stream_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_stream_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_ack_out.read()))))) {
            out_stream_V_user_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_exitcond_flatten_reg_291 = exitcond_flatten_reg_291.read();
        exitcond_flatten_reg_291 = exitcond_flatten_fu_205_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_205_p2.read()))) {
        axi_last_V_reg_305 = axi_last_V_fu_263_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mask_empty_n.read())))) {
        mask_read_reg_286 = mask_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_load_A.read())) {
        out_stream_V_data_V_1_payload_A = axi_data_V_fu_280_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_load_B.read())) {
        out_stream_V_data_V_1_payload_B = axi_data_V_fu_280_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_load_A.read())) {
        out_stream_V_last_V_1_payload_A = axi_last_V_reg_305.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_load_B.read())) {
        out_stream_V_last_V_1_payload_B = axi_last_V_reg_305.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_load_A.read())) {
        out_stream_V_user_V_1_payload_A = axi_user_V_phi_fu_185_p4.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_load_B.read())) {
        out_stream_V_user_V_1_payload_B = axi_user_V_phi_fu_185_p4.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_205_p2.read()))) {
        tmp_i_mid2_v_v_reg_300 = tmp_i_mid2_v_v_fu_237_p3.read();
    }
}

void mem_write::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void mem_write::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mem_write::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void mem_write::thread_ap_block_pp0_stage0_flag00000000() {
    ap_block_pp0_stage0_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem_write::thread_ap_block_pp0_stage0_flag00001001() {
    ap_block_pp0_stage0_flag00001001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem_write::thread_ap_block_pp0_stage0_flag00011001() {
    ap_block_pp0_stage0_flag00011001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())));
}

void mem_write::thread_ap_block_pp0_stage0_flag00011011() {
    ap_block_pp0_stage0_flag00011011 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())));
}

void mem_write::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mask_empty_n.read()));
}

void mem_write::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem_write::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_291.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()));
}

void mem_write::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem_write::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_flatten_reg_291.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()));
}

void mem_write::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem_write::thread_ap_block_state5() {
    ap_block_state5 = (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_dest_V_1_ack_in.read()));
}

void mem_write::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_205_p2.read())) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void mem_write::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_dest_V_1_ack_in.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void mem_write::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void mem_write::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mem_write::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void mem_write::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_dest_V_1_ack_in.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mem_write::thread_axi_data_V_fu_280_p2() {
    axi_data_V_fu_280_p2 = (test_init_arr_V_q0.read() & mask_read_reg_286.read());
}

void mem_write::thread_axi_last_V_fu_263_p2() {
    axi_last_V_fu_263_p2 = (!tmp_2_i_fu_257_p2.read().is_01() || !ap_const_lv20_FFEFF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_2_i_fu_257_p2.read() == ap_const_lv20_FFEFF);
}

void mem_write::thread_axi_user_V_phi_fu_185_p4() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_flatten_reg_291.read()))) {
        axi_user_V_phi_fu_185_p4 = ap_const_lv1_0;
    } else {
        axi_user_V_phi_fu_185_p4 = axi_user_V_reg_179.read();
    }
}

void mem_write::thread_exitcond_flatten_fu_205_p2() {
    exitcond_flatten_fu_205_p2 = (!indvar_flatten_reg_157.read().is_01() || !ap_const_lv20_FFF00.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_157.read() == ap_const_lv20_FFF00);
}

void mem_write::thread_exitcond_i6_fu_217_p2() {
    exitcond_i6_fu_217_p2 = (!j_i_reg_194.read().is_01() || !ap_const_lv9_100.is_01())? sc_lv<1>(): sc_lv<1>(j_i_reg_194.read() == ap_const_lv9_100);
}

void mem_write::thread_i4_fu_231_p2() {
    i4_fu_231_p2 = (!i_i_phi_fu_172_p4.read().is_01() || !ap_const_lv12_1.is_01())? sc_lv<12>(): (sc_biguint<12>(i_i_phi_fu_172_p4.read()) + sc_biguint<12>(ap_const_lv12_1));
}

void mem_write::thread_i_i_phi_fu_172_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_291.read()))) {
        i_i_phi_fu_172_p4 = tmp_i_mid2_v_v_reg_300.read();
    } else {
        i_i_phi_fu_172_p4 = i_i_reg_168.read();
    }
}

void mem_write::thread_indvar_flatten_next_fu_211_p2() {
    indvar_flatten_next_fu_211_p2 = (!indvar_flatten_reg_157.read().is_01() || !ap_const_lv20_1.is_01())? sc_lv<20>(): (sc_biguint<20>(indvar_flatten_reg_157.read()) + sc_biguint<20>(ap_const_lv20_1));
}

void mem_write::thread_j_cast3_i_fu_253_p1() {
    j_cast3_i_fu_253_p1 = esl_zext<20,9>(j_i_mid2_fu_223_p3.read());
}

void mem_write::thread_j_fu_274_p2() {
    j_fu_274_p2 = (!j_i_mid2_fu_223_p3.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(j_i_mid2_fu_223_p3.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void mem_write::thread_j_i_mid2_fu_223_p3() {
    j_i_mid2_fu_223_p3 = (!exitcond_i6_fu_217_p2.read()[0].is_01())? sc_lv<9>(): ((exitcond_i6_fu_217_p2.read()[0].to_bool())? ap_const_lv9_0: j_i_reg_194.read());
}

void mem_write::thread_mask_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        mask_blk_n = mask_empty_n.read();
    } else {
        mask_blk_n = ap_const_logic_1;
    }
}

void mem_write::thread_mask_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mask_empty_n.read())))) {
        mask_read = ap_const_logic_1;
    } else {
        mask_read = ap_const_logic_0;
    }
}

void mem_write::thread_out_r_TDATA() {
    out_r_TDATA = out_stream_V_data_V_1_data_out.read();
}

void mem_write::thread_out_r_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_291.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_flatten_reg_291.read())))) {
        out_r_TDATA_blk_n = out_stream_V_data_V_1_state.read()[1];
    } else {
        out_r_TDATA_blk_n = ap_const_logic_1;
    }
}

void mem_write::thread_out_r_TDEST() {
    out_r_TDEST = out_stream_V_dest_V_1_data_out.read();
}

void mem_write::thread_out_r_TID() {
    out_r_TID = out_stream_V_id_V_1_data_out.read();
}

void mem_write::thread_out_r_TKEEP() {
    out_r_TKEEP = out_stream_V_keep_V_1_data_out.read();
}

void mem_write::thread_out_r_TLAST() {
    out_r_TLAST = out_stream_V_last_V_1_data_out.read();
}

void mem_write::thread_out_r_TSTRB() {
    out_r_TSTRB = out_stream_V_strb_V_1_data_out.read();
}

void mem_write::thread_out_r_TUSER() {
    out_r_TUSER = out_stream_V_user_V_1_data_out.read();
}

void mem_write::thread_out_r_TVALID() {
    out_r_TVALID = out_stream_V_dest_V_1_state.read()[0];
}

void mem_write::thread_out_stream_V_data_V_1_ack_in() {
    out_stream_V_data_V_1_ack_in = out_stream_V_data_V_1_state.read()[1];
}

void mem_write::thread_out_stream_V_data_V_1_ack_out() {
    out_stream_V_data_V_1_ack_out = out_r_TREADY.read();
}

void mem_write::thread_out_stream_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_data_V_1_sel.read())) {
        out_stream_V_data_V_1_data_out = out_stream_V_data_V_1_payload_B.read();
    } else {
        out_stream_V_data_V_1_data_out = out_stream_V_data_V_1_payload_A.read();
    }
}

void mem_write::thread_out_stream_V_data_V_1_load_A() {
    out_stream_V_data_V_1_load_A = (out_stream_V_data_V_1_state_cmp_full.read() & ~out_stream_V_data_V_1_sel_wr.read());
}

void mem_write::thread_out_stream_V_data_V_1_load_B() {
    out_stream_V_data_V_1_load_B = (out_stream_V_data_V_1_sel_wr.read() & out_stream_V_data_V_1_state_cmp_full.read());
}

void mem_write::thread_out_stream_V_data_V_1_sel() {
    out_stream_V_data_V_1_sel = out_stream_V_data_V_1_sel_rd.read();
}

void mem_write::thread_out_stream_V_data_V_1_state_cmp_full() {
    out_stream_V_data_V_1_state_cmp_full =  (sc_logic) ((!out_stream_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void mem_write::thread_out_stream_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_291.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        out_stream_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void mem_write::thread_out_stream_V_data_V_1_vld_out() {
    out_stream_V_data_V_1_vld_out = out_stream_V_data_V_1_state.read()[0];
}

void mem_write::thread_out_stream_V_dest_V_1_ack_in() {
    out_stream_V_dest_V_1_ack_in = out_stream_V_dest_V_1_state.read()[1];
}

void mem_write::thread_out_stream_V_dest_V_1_ack_out() {
    out_stream_V_dest_V_1_ack_out = out_r_TREADY.read();
}

void mem_write::thread_out_stream_V_dest_V_1_data_out() {
    out_stream_V_dest_V_1_data_out = ap_const_lv1_0;
}

void mem_write::thread_out_stream_V_dest_V_1_sel() {
    out_stream_V_dest_V_1_sel = out_stream_V_dest_V_1_sel_rd.read();
}

void mem_write::thread_out_stream_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_291.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        out_stream_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void mem_write::thread_out_stream_V_dest_V_1_vld_out() {
    out_stream_V_dest_V_1_vld_out = out_stream_V_dest_V_1_state.read()[0];
}

void mem_write::thread_out_stream_V_id_V_1_ack_in() {
    out_stream_V_id_V_1_ack_in = out_stream_V_id_V_1_state.read()[1];
}

void mem_write::thread_out_stream_V_id_V_1_ack_out() {
    out_stream_V_id_V_1_ack_out = out_r_TREADY.read();
}

void mem_write::thread_out_stream_V_id_V_1_data_out() {
    out_stream_V_id_V_1_data_out = ap_const_lv1_0;
}

void mem_write::thread_out_stream_V_id_V_1_sel() {
    out_stream_V_id_V_1_sel = out_stream_V_id_V_1_sel_rd.read();
}

void mem_write::thread_out_stream_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_291.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        out_stream_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void mem_write::thread_out_stream_V_id_V_1_vld_out() {
    out_stream_V_id_V_1_vld_out = out_stream_V_id_V_1_state.read()[0];
}

void mem_write::thread_out_stream_V_keep_V_1_ack_in() {
    out_stream_V_keep_V_1_ack_in = out_stream_V_keep_V_1_state.read()[1];
}

void mem_write::thread_out_stream_V_keep_V_1_ack_out() {
    out_stream_V_keep_V_1_ack_out = out_r_TREADY.read();
}

void mem_write::thread_out_stream_V_keep_V_1_data_out() {
    out_stream_V_keep_V_1_data_out = ap_const_lv4_F;
}

void mem_write::thread_out_stream_V_keep_V_1_sel() {
    out_stream_V_keep_V_1_sel = out_stream_V_keep_V_1_sel_rd.read();
}

void mem_write::thread_out_stream_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_291.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        out_stream_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void mem_write::thread_out_stream_V_keep_V_1_vld_out() {
    out_stream_V_keep_V_1_vld_out = out_stream_V_keep_V_1_state.read()[0];
}

void mem_write::thread_out_stream_V_last_V_1_ack_in() {
    out_stream_V_last_V_1_ack_in = out_stream_V_last_V_1_state.read()[1];
}

void mem_write::thread_out_stream_V_last_V_1_ack_out() {
    out_stream_V_last_V_1_ack_out = out_r_TREADY.read();
}

void mem_write::thread_out_stream_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_last_V_1_sel.read())) {
        out_stream_V_last_V_1_data_out = out_stream_V_last_V_1_payload_B.read();
    } else {
        out_stream_V_last_V_1_data_out = out_stream_V_last_V_1_payload_A.read();
    }
}

void mem_write::thread_out_stream_V_last_V_1_load_A() {
    out_stream_V_last_V_1_load_A = (out_stream_V_last_V_1_state_cmp_full.read() & ~out_stream_V_last_V_1_sel_wr.read());
}

void mem_write::thread_out_stream_V_last_V_1_load_B() {
    out_stream_V_last_V_1_load_B = (out_stream_V_last_V_1_sel_wr.read() & out_stream_V_last_V_1_state_cmp_full.read());
}

void mem_write::thread_out_stream_V_last_V_1_sel() {
    out_stream_V_last_V_1_sel = out_stream_V_last_V_1_sel_rd.read();
}

void mem_write::thread_out_stream_V_last_V_1_state_cmp_full() {
    out_stream_V_last_V_1_state_cmp_full =  (sc_logic) ((!out_stream_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void mem_write::thread_out_stream_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_291.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        out_stream_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void mem_write::thread_out_stream_V_last_V_1_vld_out() {
    out_stream_V_last_V_1_vld_out = out_stream_V_last_V_1_state.read()[0];
}

void mem_write::thread_out_stream_V_strb_V_1_ack_in() {
    out_stream_V_strb_V_1_ack_in = out_stream_V_strb_V_1_state.read()[1];
}

void mem_write::thread_out_stream_V_strb_V_1_ack_out() {
    out_stream_V_strb_V_1_ack_out = out_r_TREADY.read();
}

void mem_write::thread_out_stream_V_strb_V_1_data_out() {
    out_stream_V_strb_V_1_data_out = ap_const_lv4_0;
}

void mem_write::thread_out_stream_V_strb_V_1_sel() {
    out_stream_V_strb_V_1_sel = out_stream_V_strb_V_1_sel_rd.read();
}

void mem_write::thread_out_stream_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_291.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        out_stream_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void mem_write::thread_out_stream_V_strb_V_1_vld_out() {
    out_stream_V_strb_V_1_vld_out = out_stream_V_strb_V_1_state.read()[0];
}

void mem_write::thread_out_stream_V_user_V_1_ack_in() {
    out_stream_V_user_V_1_ack_in = out_stream_V_user_V_1_state.read()[1];
}

void mem_write::thread_out_stream_V_user_V_1_ack_out() {
    out_stream_V_user_V_1_ack_out = out_r_TREADY.read();
}

void mem_write::thread_out_stream_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_V_user_V_1_sel.read())) {
        out_stream_V_user_V_1_data_out = out_stream_V_user_V_1_payload_B.read();
    } else {
        out_stream_V_user_V_1_data_out = out_stream_V_user_V_1_payload_A.read();
    }
}

void mem_write::thread_out_stream_V_user_V_1_load_A() {
    out_stream_V_user_V_1_load_A = (out_stream_V_user_V_1_state_cmp_full.read() & ~out_stream_V_user_V_1_sel_wr.read());
}

void mem_write::thread_out_stream_V_user_V_1_load_B() {
    out_stream_V_user_V_1_load_B = (out_stream_V_user_V_1_sel_wr.read() & out_stream_V_user_V_1_state_cmp_full.read());
}

void mem_write::thread_out_stream_V_user_V_1_sel() {
    out_stream_V_user_V_1_sel = out_stream_V_user_V_1_sel_rd.read();
}

void mem_write::thread_out_stream_V_user_V_1_state_cmp_full() {
    out_stream_V_user_V_1_state_cmp_full =  (sc_logic) ((!out_stream_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void mem_write::thread_out_stream_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_291.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        out_stream_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void mem_write::thread_out_stream_V_user_V_1_vld_out() {
    out_stream_V_user_V_1_vld_out = out_stream_V_user_V_1_state.read()[0];
}

void mem_write::thread_test_init_arr_V_address0() {
    test_init_arr_V_address0 =  (sc_lv<8>) (tmp_4_i_fu_269_p1.read());
}

void mem_write::thread_test_init_arr_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        test_init_arr_V_ce0 = ap_const_logic_1;
    } else {
        test_init_arr_V_ce0 = ap_const_logic_0;
    }
}

void mem_write::thread_tmp_2_i_fu_257_p2() {
    tmp_2_i_fu_257_p2 = (!j_cast3_i_fu_253_p1.read().is_01() || !tmp_i_mid2_fu_245_p3.read().is_01())? sc_lv<20>(): (sc_biguint<20>(j_cast3_i_fu_253_p1.read()) + sc_biguint<20>(tmp_i_mid2_fu_245_p3.read()));
}

void mem_write::thread_tmp_4_i_fu_269_p1() {
    tmp_4_i_fu_269_p1 = esl_zext<64,9>(j_i_mid2_fu_223_p3.read());
}

void mem_write::thread_tmp_i_mid2_fu_245_p3() {
    tmp_i_mid2_fu_245_p3 = esl_concat<12,8>(tmp_i_mid2_v_v_fu_237_p3.read(), ap_const_lv8_0);
}

void mem_write::thread_tmp_i_mid2_v_v_fu_237_p3() {
    tmp_i_mid2_v_v_fu_237_p3 = (!exitcond_i6_fu_217_p2.read()[0].is_01())? sc_lv<12>(): ((exitcond_i6_fu_217_p2.read()[0].to_bool())? i4_fu_231_p2.read(): i_i_phi_fu_172_p4.read());
}

void mem_write::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, mask_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_205_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_205_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_V_dest_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

