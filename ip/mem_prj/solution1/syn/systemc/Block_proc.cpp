// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Block_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Block_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Block_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Block_proc::ap_ST_fsm_state1 = "1";
const sc_lv<4> Block_proc::ap_ST_fsm_state2 = "10";
const sc_lv<4> Block_proc::ap_ST_fsm_state3 = "100";
const sc_lv<4> Block_proc::ap_ST_fsm_state4 = "1000";
const sc_lv<32> Block_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Block_proc::ap_const_lv1_0 = "0";
const sc_lv<1> Block_proc::ap_const_lv1_1 = "1";
const sc_lv<2> Block_proc::ap_const_lv2_0 = "00";
const sc_lv<2> Block_proc::ap_const_lv2_2 = "10";
const sc_lv<2> Block_proc::ap_const_lv2_3 = "11";
const sc_lv<2> Block_proc::ap_const_lv2_1 = "1";
const sc_lv<32> Block_proc::ap_const_lv32_1 = "1";
const sc_lv<32> Block_proc::ap_const_lv32_2 = "10";
const sc_lv<32> Block_proc::ap_const_lv32_3 = "11";
const bool Block_proc::ap_const_boolean_0 = false;
const bool Block_proc::ap_const_boolean_1 = true;

Block_proc::Block_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_mem_write_fu_76 = new mem_write("grp_mem_write_fu_76");
    grp_mem_write_fu_76->ap_clk(ap_clk);
    grp_mem_write_fu_76->ap_rst(ap_rst);
    grp_mem_write_fu_76->ap_start(grp_mem_write_fu_76_ap_start);
    grp_mem_write_fu_76->ap_done(grp_mem_write_fu_76_ap_done);
    grp_mem_write_fu_76->ap_idle(grp_mem_write_fu_76_ap_idle);
    grp_mem_write_fu_76->ap_ready(grp_mem_write_fu_76_ap_ready);
    grp_mem_write_fu_76->out_r_TDATA(grp_mem_write_fu_76_out_r_TDATA);
    grp_mem_write_fu_76->out_r_TVALID(grp_mem_write_fu_76_out_r_TVALID);
    grp_mem_write_fu_76->out_r_TREADY(grp_mem_write_fu_76_out_r_TREADY);
    grp_mem_write_fu_76->out_r_TKEEP(grp_mem_write_fu_76_out_r_TKEEP);
    grp_mem_write_fu_76->out_r_TSTRB(grp_mem_write_fu_76_out_r_TSTRB);
    grp_mem_write_fu_76->out_r_TUSER(grp_mem_write_fu_76_out_r_TUSER);
    grp_mem_write_fu_76->out_r_TLAST(grp_mem_write_fu_76_out_r_TLAST);
    grp_mem_write_fu_76->out_r_TID(grp_mem_write_fu_76_out_r_TID);
    grp_mem_write_fu_76->out_r_TDEST(grp_mem_write_fu_76_out_r_TDEST);
    grp_mem_write_fu_76->mask(tmp_2_reg_137);
    grp_mem_write_fu_76->test_init_arr_V_address0(grp_mem_write_fu_76_test_init_arr_V_address0);
    grp_mem_write_fu_76->test_init_arr_V_ce0(grp_mem_write_fu_76_test_init_arr_V_ce0);
    grp_mem_write_fu_76->test_init_arr_V_q0(test_init_arr_V_q0);
    grp_mem_read_fu_97 = new mem_read("grp_mem_read_fu_97");
    grp_mem_read_fu_97->ap_clk(ap_clk);
    grp_mem_read_fu_97->ap_rst(ap_rst);
    grp_mem_read_fu_97->ap_start(grp_mem_read_fu_97_ap_start);
    grp_mem_read_fu_97->ap_done(grp_mem_read_fu_97_ap_done);
    grp_mem_read_fu_97->ap_idle(grp_mem_read_fu_97_ap_idle);
    grp_mem_read_fu_97->ap_ready(grp_mem_read_fu_97_ap_ready);
    grp_mem_read_fu_97->in_r_TDATA(in_V_data_V_0_data_out);
    grp_mem_read_fu_97->in_r_TVALID(grp_mem_read_fu_97_in_r_TVALID);
    grp_mem_read_fu_97->in_r_TREADY(grp_mem_read_fu_97_in_r_TREADY);
    grp_mem_read_fu_97->in_r_TKEEP(in_V_keep_V_0_data_out);
    grp_mem_read_fu_97->in_r_TSTRB(in_V_strb_V_0_data_out);
    grp_mem_read_fu_97->in_r_TUSER(in_V_user_V_0_data_out);
    grp_mem_read_fu_97->in_r_TLAST(in_V_last_V_0_data_out);
    grp_mem_read_fu_97->in_r_TID(in_V_id_V_0_data_out);
    grp_mem_read_fu_97->in_r_TDEST(in_V_dest_V_0_data_out);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state1_ignore_call0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state1_ignore_call2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_on_subcall_done);
    sensitive << ( grp_mem_write_fu_76_ap_done );
    sensitive << ( grp_mem_read_fu_97_ap_done );

    SC_METHOD(thread_ap_block_state3_on_subcall_done);
    sensitive << ( tmp_1_reg_142 );
    sensitive << ( grp_mem_read_fu_97_ap_done );

    SC_METHOD(thread_ap_block_state4);
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( out_V_keep_V_1_ack_in );
    sensitive << ( out_V_strb_V_1_ack_in );
    sensitive << ( out_V_user_V_1_ack_in );
    sensitive << ( out_V_last_V_1_ack_in );
    sensitive << ( out_V_id_V_1_ack_in );
    sensitive << ( out_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( out_V_keep_V_1_ack_in );
    sensitive << ( out_V_strb_V_1_ack_in );
    sensitive << ( out_V_user_V_1_ack_in );
    sensitive << ( out_V_last_V_1_ack_in );
    sensitive << ( out_V_id_V_1_ack_in );
    sensitive << ( out_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( out_V_keep_V_1_ack_in );
    sensitive << ( out_V_strb_V_1_ack_in );
    sensitive << ( out_V_user_V_1_ack_in );
    sensitive << ( out_V_last_V_1_ack_in );
    sensitive << ( out_V_id_V_1_ack_in );
    sensitive << ( out_V_dest_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_mem_read_fu_97_ap_start);
    sensitive << ( ap_reg_grp_mem_read_fu_97_ap_start );

    SC_METHOD(thread_grp_mem_read_fu_97_in_r_TVALID);
    sensitive << ( in_V_dest_V_0_state );

    SC_METHOD(thread_grp_mem_write_fu_76_ap_start);
    sensitive << ( ap_reg_grp_mem_write_fu_76_ap_start );

    SC_METHOD(thread_grp_mem_write_fu_76_out_r_TREADY);
    sensitive << ( out_V_dest_V_1_state );

    SC_METHOD(thread_in_V_data_V_0_ack_in);
    sensitive << ( in_V_data_V_0_state );

    SC_METHOD(thread_in_V_data_V_0_ack_out);
    sensitive << ( tmp_1_reg_142 );
    sensitive << ( grp_mem_read_fu_97_in_r_TREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in_V_data_V_0_data_out);
    sensitive << ( in_V_data_V_0_payload_A );
    sensitive << ( in_V_data_V_0_payload_B );
    sensitive << ( in_V_data_V_0_sel );

    SC_METHOD(thread_in_V_data_V_0_load_A);
    sensitive << ( in_V_data_V_0_sel_wr );
    sensitive << ( in_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_data_V_0_load_B);
    sensitive << ( in_V_data_V_0_sel_wr );
    sensitive << ( in_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_data_V_0_sel);
    sensitive << ( in_V_data_V_0_sel_rd );

    SC_METHOD(thread_in_V_data_V_0_state_cmp_full);
    sensitive << ( in_V_data_V_0_state );

    SC_METHOD(thread_in_V_data_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_V_data_V_0_vld_out);
    sensitive << ( in_V_data_V_0_state );

    SC_METHOD(thread_in_V_dest_V_0_ack_in);
    sensitive << ( in_V_dest_V_0_state );

    SC_METHOD(thread_in_V_dest_V_0_ack_out);
    sensitive << ( tmp_1_reg_142 );
    sensitive << ( grp_mem_read_fu_97_in_r_TREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in_V_dest_V_0_data_out);
    sensitive << ( in_V_dest_V_0_payload_A );
    sensitive << ( in_V_dest_V_0_payload_B );
    sensitive << ( in_V_dest_V_0_sel );

    SC_METHOD(thread_in_V_dest_V_0_load_A);
    sensitive << ( in_V_dest_V_0_sel_wr );
    sensitive << ( in_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_dest_V_0_load_B);
    sensitive << ( in_V_dest_V_0_sel_wr );
    sensitive << ( in_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_dest_V_0_sel);
    sensitive << ( in_V_dest_V_0_sel_rd );

    SC_METHOD(thread_in_V_dest_V_0_state_cmp_full);
    sensitive << ( in_V_dest_V_0_state );

    SC_METHOD(thread_in_V_dest_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_V_dest_V_0_vld_out);
    sensitive << ( in_V_dest_V_0_state );

    SC_METHOD(thread_in_V_id_V_0_ack_in);
    sensitive << ( in_V_id_V_0_state );

    SC_METHOD(thread_in_V_id_V_0_ack_out);
    sensitive << ( tmp_1_reg_142 );
    sensitive << ( grp_mem_read_fu_97_in_r_TREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in_V_id_V_0_data_out);
    sensitive << ( in_V_id_V_0_payload_A );
    sensitive << ( in_V_id_V_0_payload_B );
    sensitive << ( in_V_id_V_0_sel );

    SC_METHOD(thread_in_V_id_V_0_load_A);
    sensitive << ( in_V_id_V_0_sel_wr );
    sensitive << ( in_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_id_V_0_load_B);
    sensitive << ( in_V_id_V_0_sel_wr );
    sensitive << ( in_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_id_V_0_sel);
    sensitive << ( in_V_id_V_0_sel_rd );

    SC_METHOD(thread_in_V_id_V_0_state_cmp_full);
    sensitive << ( in_V_id_V_0_state );

    SC_METHOD(thread_in_V_id_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_V_id_V_0_vld_out);
    sensitive << ( in_V_id_V_0_state );

    SC_METHOD(thread_in_V_keep_V_0_ack_in);
    sensitive << ( in_V_keep_V_0_state );

    SC_METHOD(thread_in_V_keep_V_0_ack_out);
    sensitive << ( tmp_1_reg_142 );
    sensitive << ( grp_mem_read_fu_97_in_r_TREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in_V_keep_V_0_data_out);
    sensitive << ( in_V_keep_V_0_payload_A );
    sensitive << ( in_V_keep_V_0_payload_B );
    sensitive << ( in_V_keep_V_0_sel );

    SC_METHOD(thread_in_V_keep_V_0_load_A);
    sensitive << ( in_V_keep_V_0_sel_wr );
    sensitive << ( in_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_keep_V_0_load_B);
    sensitive << ( in_V_keep_V_0_sel_wr );
    sensitive << ( in_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_keep_V_0_sel);
    sensitive << ( in_V_keep_V_0_sel_rd );

    SC_METHOD(thread_in_V_keep_V_0_state_cmp_full);
    sensitive << ( in_V_keep_V_0_state );

    SC_METHOD(thread_in_V_keep_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_V_keep_V_0_vld_out);
    sensitive << ( in_V_keep_V_0_state );

    SC_METHOD(thread_in_V_last_V_0_ack_in);
    sensitive << ( in_V_last_V_0_state );

    SC_METHOD(thread_in_V_last_V_0_ack_out);
    sensitive << ( tmp_1_reg_142 );
    sensitive << ( grp_mem_read_fu_97_in_r_TREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in_V_last_V_0_data_out);
    sensitive << ( in_V_last_V_0_payload_A );
    sensitive << ( in_V_last_V_0_payload_B );
    sensitive << ( in_V_last_V_0_sel );

    SC_METHOD(thread_in_V_last_V_0_load_A);
    sensitive << ( in_V_last_V_0_sel_wr );
    sensitive << ( in_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_last_V_0_load_B);
    sensitive << ( in_V_last_V_0_sel_wr );
    sensitive << ( in_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_last_V_0_sel);
    sensitive << ( in_V_last_V_0_sel_rd );

    SC_METHOD(thread_in_V_last_V_0_state_cmp_full);
    sensitive << ( in_V_last_V_0_state );

    SC_METHOD(thread_in_V_last_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_V_last_V_0_vld_out);
    sensitive << ( in_V_last_V_0_state );

    SC_METHOD(thread_in_V_strb_V_0_ack_in);
    sensitive << ( in_V_strb_V_0_state );

    SC_METHOD(thread_in_V_strb_V_0_ack_out);
    sensitive << ( tmp_1_reg_142 );
    sensitive << ( grp_mem_read_fu_97_in_r_TREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in_V_strb_V_0_data_out);
    sensitive << ( in_V_strb_V_0_payload_A );
    sensitive << ( in_V_strb_V_0_payload_B );
    sensitive << ( in_V_strb_V_0_sel );

    SC_METHOD(thread_in_V_strb_V_0_load_A);
    sensitive << ( in_V_strb_V_0_sel_wr );
    sensitive << ( in_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_strb_V_0_load_B);
    sensitive << ( in_V_strb_V_0_sel_wr );
    sensitive << ( in_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_strb_V_0_sel);
    sensitive << ( in_V_strb_V_0_sel_rd );

    SC_METHOD(thread_in_V_strb_V_0_state_cmp_full);
    sensitive << ( in_V_strb_V_0_state );

    SC_METHOD(thread_in_V_strb_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_V_strb_V_0_vld_out);
    sensitive << ( in_V_strb_V_0_state );

    SC_METHOD(thread_in_V_user_V_0_ack_in);
    sensitive << ( in_V_user_V_0_state );

    SC_METHOD(thread_in_V_user_V_0_ack_out);
    sensitive << ( tmp_1_reg_142 );
    sensitive << ( grp_mem_read_fu_97_in_r_TREADY );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in_V_user_V_0_data_out);
    sensitive << ( in_V_user_V_0_payload_A );
    sensitive << ( in_V_user_V_0_payload_B );
    sensitive << ( in_V_user_V_0_sel );

    SC_METHOD(thread_in_V_user_V_0_load_A);
    sensitive << ( in_V_user_V_0_sel_wr );
    sensitive << ( in_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_user_V_0_load_B);
    sensitive << ( in_V_user_V_0_sel_wr );
    sensitive << ( in_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_user_V_0_sel);
    sensitive << ( in_V_user_V_0_sel_rd );

    SC_METHOD(thread_in_V_user_V_0_state_cmp_full);
    sensitive << ( in_V_user_V_0_state );

    SC_METHOD(thread_in_V_user_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_V_user_V_0_vld_out);
    sensitive << ( in_V_user_V_0_state );

    SC_METHOD(thread_in_r_TREADY);
    sensitive << ( in_V_dest_V_0_state );

    SC_METHOD(thread_out_V_data_V_1_ack_in);
    sensitive << ( out_V_data_V_1_state );

    SC_METHOD(thread_out_V_data_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_V_data_V_1_data_out);
    sensitive << ( out_V_data_V_1_payload_A );
    sensitive << ( out_V_data_V_1_payload_B );
    sensitive << ( out_V_data_V_1_sel );

    SC_METHOD(thread_out_V_data_V_1_load_A);
    sensitive << ( out_V_data_V_1_sel_wr );
    sensitive << ( out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_data_V_1_load_B);
    sensitive << ( out_V_data_V_1_sel_wr );
    sensitive << ( out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_data_V_1_sel);
    sensitive << ( out_V_data_V_1_sel_rd );

    SC_METHOD(thread_out_V_data_V_1_state_cmp_full);
    sensitive << ( out_V_data_V_1_state );

    SC_METHOD(thread_out_V_data_V_1_vld_in);
    sensitive << ( grp_mem_write_fu_76_out_r_TVALID );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_V_data_V_1_vld_out);
    sensitive << ( out_V_data_V_1_state );

    SC_METHOD(thread_out_V_dest_V_1_ack_in);
    sensitive << ( out_V_dest_V_1_state );

    SC_METHOD(thread_out_V_dest_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_V_dest_V_1_data_out);
    sensitive << ( out_V_dest_V_1_payload_A );
    sensitive << ( out_V_dest_V_1_payload_B );
    sensitive << ( out_V_dest_V_1_sel );

    SC_METHOD(thread_out_V_dest_V_1_load_A);
    sensitive << ( out_V_dest_V_1_sel_wr );
    sensitive << ( out_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_dest_V_1_load_B);
    sensitive << ( out_V_dest_V_1_sel_wr );
    sensitive << ( out_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_dest_V_1_sel);
    sensitive << ( out_V_dest_V_1_sel_rd );

    SC_METHOD(thread_out_V_dest_V_1_state_cmp_full);
    sensitive << ( out_V_dest_V_1_state );

    SC_METHOD(thread_out_V_dest_V_1_vld_in);
    sensitive << ( grp_mem_write_fu_76_out_r_TVALID );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_V_dest_V_1_vld_out);
    sensitive << ( out_V_dest_V_1_state );

    SC_METHOD(thread_out_V_id_V_1_ack_in);
    sensitive << ( out_V_id_V_1_state );

    SC_METHOD(thread_out_V_id_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_V_id_V_1_data_out);
    sensitive << ( out_V_id_V_1_payload_A );
    sensitive << ( out_V_id_V_1_payload_B );
    sensitive << ( out_V_id_V_1_sel );

    SC_METHOD(thread_out_V_id_V_1_load_A);
    sensitive << ( out_V_id_V_1_sel_wr );
    sensitive << ( out_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_id_V_1_load_B);
    sensitive << ( out_V_id_V_1_sel_wr );
    sensitive << ( out_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_id_V_1_sel);
    sensitive << ( out_V_id_V_1_sel_rd );

    SC_METHOD(thread_out_V_id_V_1_state_cmp_full);
    sensitive << ( out_V_id_V_1_state );

    SC_METHOD(thread_out_V_id_V_1_vld_in);
    sensitive << ( grp_mem_write_fu_76_out_r_TVALID );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_V_id_V_1_vld_out);
    sensitive << ( out_V_id_V_1_state );

    SC_METHOD(thread_out_V_keep_V_1_ack_in);
    sensitive << ( out_V_keep_V_1_state );

    SC_METHOD(thread_out_V_keep_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_V_keep_V_1_data_out);
    sensitive << ( out_V_keep_V_1_payload_A );
    sensitive << ( out_V_keep_V_1_payload_B );
    sensitive << ( out_V_keep_V_1_sel );

    SC_METHOD(thread_out_V_keep_V_1_load_A);
    sensitive << ( out_V_keep_V_1_sel_wr );
    sensitive << ( out_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_keep_V_1_load_B);
    sensitive << ( out_V_keep_V_1_sel_wr );
    sensitive << ( out_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_keep_V_1_sel);
    sensitive << ( out_V_keep_V_1_sel_rd );

    SC_METHOD(thread_out_V_keep_V_1_state_cmp_full);
    sensitive << ( out_V_keep_V_1_state );

    SC_METHOD(thread_out_V_keep_V_1_vld_in);
    sensitive << ( grp_mem_write_fu_76_out_r_TVALID );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_V_keep_V_1_vld_out);
    sensitive << ( out_V_keep_V_1_state );

    SC_METHOD(thread_out_V_last_V_1_ack_in);
    sensitive << ( out_V_last_V_1_state );

    SC_METHOD(thread_out_V_last_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_V_last_V_1_data_out);
    sensitive << ( out_V_last_V_1_payload_A );
    sensitive << ( out_V_last_V_1_payload_B );
    sensitive << ( out_V_last_V_1_sel );

    SC_METHOD(thread_out_V_last_V_1_load_A);
    sensitive << ( out_V_last_V_1_sel_wr );
    sensitive << ( out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_last_V_1_load_B);
    sensitive << ( out_V_last_V_1_sel_wr );
    sensitive << ( out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_last_V_1_sel);
    sensitive << ( out_V_last_V_1_sel_rd );

    SC_METHOD(thread_out_V_last_V_1_state_cmp_full);
    sensitive << ( out_V_last_V_1_state );

    SC_METHOD(thread_out_V_last_V_1_vld_in);
    sensitive << ( grp_mem_write_fu_76_out_r_TVALID );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_V_last_V_1_vld_out);
    sensitive << ( out_V_last_V_1_state );

    SC_METHOD(thread_out_V_strb_V_1_ack_in);
    sensitive << ( out_V_strb_V_1_state );

    SC_METHOD(thread_out_V_strb_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_V_strb_V_1_data_out);
    sensitive << ( out_V_strb_V_1_payload_A );
    sensitive << ( out_V_strb_V_1_payload_B );
    sensitive << ( out_V_strb_V_1_sel );

    SC_METHOD(thread_out_V_strb_V_1_load_A);
    sensitive << ( out_V_strb_V_1_sel_wr );
    sensitive << ( out_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_strb_V_1_load_B);
    sensitive << ( out_V_strb_V_1_sel_wr );
    sensitive << ( out_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_strb_V_1_sel);
    sensitive << ( out_V_strb_V_1_sel_rd );

    SC_METHOD(thread_out_V_strb_V_1_state_cmp_full);
    sensitive << ( out_V_strb_V_1_state );

    SC_METHOD(thread_out_V_strb_V_1_vld_in);
    sensitive << ( grp_mem_write_fu_76_out_r_TVALID );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_V_strb_V_1_vld_out);
    sensitive << ( out_V_strb_V_1_state );

    SC_METHOD(thread_out_V_user_V_1_ack_in);
    sensitive << ( out_V_user_V_1_state );

    SC_METHOD(thread_out_V_user_V_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_V_user_V_1_data_out);
    sensitive << ( out_V_user_V_1_payload_A );
    sensitive << ( out_V_user_V_1_payload_B );
    sensitive << ( out_V_user_V_1_sel );

    SC_METHOD(thread_out_V_user_V_1_load_A);
    sensitive << ( out_V_user_V_1_sel_wr );
    sensitive << ( out_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_user_V_1_load_B);
    sensitive << ( out_V_user_V_1_sel_wr );
    sensitive << ( out_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_out_V_user_V_1_sel);
    sensitive << ( out_V_user_V_1_sel_rd );

    SC_METHOD(thread_out_V_user_V_1_state_cmp_full);
    sensitive << ( out_V_user_V_1_state );

    SC_METHOD(thread_out_V_user_V_1_vld_in);
    sensitive << ( grp_mem_write_fu_76_out_r_TVALID );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_V_user_V_1_vld_out);
    sensitive << ( out_V_user_V_1_state );

    SC_METHOD(thread_out_r_TDATA);
    sensitive << ( out_V_data_V_1_data_out );

    SC_METHOD(thread_out_r_TDEST);
    sensitive << ( out_V_dest_V_1_data_out );

    SC_METHOD(thread_out_r_TID);
    sensitive << ( out_V_id_V_1_data_out );

    SC_METHOD(thread_out_r_TKEEP);
    sensitive << ( out_V_keep_V_1_data_out );

    SC_METHOD(thread_out_r_TLAST);
    sensitive << ( out_V_last_V_1_data_out );

    SC_METHOD(thread_out_r_TSTRB);
    sensitive << ( out_V_strb_V_1_data_out );

    SC_METHOD(thread_out_r_TUSER);
    sensitive << ( out_V_user_V_1_data_out );

    SC_METHOD(thread_out_r_TVALID);
    sensitive << ( out_V_dest_V_1_state );

    SC_METHOD(thread_test_init_arr_V_address0);
    sensitive << ( grp_mem_write_fu_76_test_init_arr_V_address0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_test_init_arr_V_ce0);
    sensitive << ( grp_mem_write_fu_76_test_init_arr_V_ce0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_1_fu_130_p1);
    sensitive << ( rw );

    SC_METHOD(thread_tmp_2_fu_125_p1);
    sensitive << ( mask );

    SC_METHOD(thread_tmp_8_fu_119_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_115_p1 );

    SC_METHOD(thread_tmp_fu_115_p1);
    sensitive << ( rw );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_data_V_1_ack_in );
    sensitive << ( out_V_keep_V_1_ack_in );
    sensitive << ( out_V_strb_V_1_ack_in );
    sensitive << ( out_V_user_V_1_ack_in );
    sensitive << ( out_V_last_V_1_ack_in );
    sensitive << ( out_V_id_V_1_ack_in );
    sensitive << ( out_V_dest_V_1_ack_in );
    sensitive << ( tmp_8_fu_119_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_block_state2_on_subcall_done );
    sensitive << ( ap_block_state3_on_subcall_done );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    in_V_data_V_0_sel_rd = SC_LOGIC_0;
    in_V_data_V_0_sel_wr = SC_LOGIC_0;
    in_V_data_V_0_state = "00";
    in_V_keep_V_0_sel_rd = SC_LOGIC_0;
    in_V_keep_V_0_sel_wr = SC_LOGIC_0;
    in_V_keep_V_0_state = "00";
    in_V_strb_V_0_sel_rd = SC_LOGIC_0;
    in_V_strb_V_0_sel_wr = SC_LOGIC_0;
    in_V_strb_V_0_state = "00";
    in_V_user_V_0_sel_rd = SC_LOGIC_0;
    in_V_user_V_0_sel_wr = SC_LOGIC_0;
    in_V_user_V_0_state = "00";
    in_V_last_V_0_sel_rd = SC_LOGIC_0;
    in_V_last_V_0_sel_wr = SC_LOGIC_0;
    in_V_last_V_0_state = "00";
    in_V_id_V_0_sel_rd = SC_LOGIC_0;
    in_V_id_V_0_sel_wr = SC_LOGIC_0;
    in_V_id_V_0_state = "00";
    in_V_dest_V_0_sel_rd = SC_LOGIC_0;
    in_V_dest_V_0_sel_wr = SC_LOGIC_0;
    in_V_dest_V_0_state = "00";
    out_V_data_V_1_sel_rd = SC_LOGIC_0;
    out_V_data_V_1_sel_wr = SC_LOGIC_0;
    out_V_data_V_1_state = "00";
    out_V_keep_V_1_sel_rd = SC_LOGIC_0;
    out_V_keep_V_1_sel_wr = SC_LOGIC_0;
    out_V_keep_V_1_state = "00";
    out_V_strb_V_1_sel_rd = SC_LOGIC_0;
    out_V_strb_V_1_sel_wr = SC_LOGIC_0;
    out_V_strb_V_1_state = "00";
    out_V_user_V_1_sel_rd = SC_LOGIC_0;
    out_V_user_V_1_sel_wr = SC_LOGIC_0;
    out_V_user_V_1_state = "00";
    out_V_last_V_1_sel_rd = SC_LOGIC_0;
    out_V_last_V_1_sel_wr = SC_LOGIC_0;
    out_V_last_V_1_state = "00";
    out_V_id_V_1_sel_rd = SC_LOGIC_0;
    out_V_id_V_1_sel_wr = SC_LOGIC_0;
    out_V_id_V_1_state = "00";
    out_V_dest_V_1_sel_rd = SC_LOGIC_0;
    out_V_dest_V_1_sel_wr = SC_LOGIC_0;
    out_V_dest_V_1_state = "00";
    ap_reg_grp_mem_write_fu_76_ap_start = SC_LOGIC_0;
    ap_reg_grp_mem_read_fu_97_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Block_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, rw, "(port)rw");
    sc_trace(mVcdFile, in_r_TDATA, "(port)in_r_TDATA");
    sc_trace(mVcdFile, in_r_TVALID, "(port)in_r_TVALID");
    sc_trace(mVcdFile, in_r_TREADY, "(port)in_r_TREADY");
    sc_trace(mVcdFile, in_r_TKEEP, "(port)in_r_TKEEP");
    sc_trace(mVcdFile, in_r_TSTRB, "(port)in_r_TSTRB");
    sc_trace(mVcdFile, in_r_TUSER, "(port)in_r_TUSER");
    sc_trace(mVcdFile, in_r_TLAST, "(port)in_r_TLAST");
    sc_trace(mVcdFile, in_r_TID, "(port)in_r_TID");
    sc_trace(mVcdFile, in_r_TDEST, "(port)in_r_TDEST");
    sc_trace(mVcdFile, mask, "(port)mask");
    sc_trace(mVcdFile, out_r_TDATA, "(port)out_r_TDATA");
    sc_trace(mVcdFile, out_r_TVALID, "(port)out_r_TVALID");
    sc_trace(mVcdFile, out_r_TREADY, "(port)out_r_TREADY");
    sc_trace(mVcdFile, out_r_TKEEP, "(port)out_r_TKEEP");
    sc_trace(mVcdFile, out_r_TSTRB, "(port)out_r_TSTRB");
    sc_trace(mVcdFile, out_r_TUSER, "(port)out_r_TUSER");
    sc_trace(mVcdFile, out_r_TLAST, "(port)out_r_TLAST");
    sc_trace(mVcdFile, out_r_TID, "(port)out_r_TID");
    sc_trace(mVcdFile, out_r_TDEST, "(port)out_r_TDEST");
    sc_trace(mVcdFile, test_init_arr_V_address0, "(port)test_init_arr_V_address0");
    sc_trace(mVcdFile, test_init_arr_V_ce0, "(port)test_init_arr_V_ce0");
    sc_trace(mVcdFile, test_init_arr_V_q0, "(port)test_init_arr_V_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, in_V_data_V_0_data_out, "in_V_data_V_0_data_out");
    sc_trace(mVcdFile, in_V_data_V_0_vld_in, "in_V_data_V_0_vld_in");
    sc_trace(mVcdFile, in_V_data_V_0_vld_out, "in_V_data_V_0_vld_out");
    sc_trace(mVcdFile, in_V_data_V_0_ack_in, "in_V_data_V_0_ack_in");
    sc_trace(mVcdFile, in_V_data_V_0_ack_out, "in_V_data_V_0_ack_out");
    sc_trace(mVcdFile, in_V_data_V_0_payload_A, "in_V_data_V_0_payload_A");
    sc_trace(mVcdFile, in_V_data_V_0_payload_B, "in_V_data_V_0_payload_B");
    sc_trace(mVcdFile, in_V_data_V_0_sel_rd, "in_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, in_V_data_V_0_sel_wr, "in_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, in_V_data_V_0_sel, "in_V_data_V_0_sel");
    sc_trace(mVcdFile, in_V_data_V_0_load_A, "in_V_data_V_0_load_A");
    sc_trace(mVcdFile, in_V_data_V_0_load_B, "in_V_data_V_0_load_B");
    sc_trace(mVcdFile, in_V_data_V_0_state, "in_V_data_V_0_state");
    sc_trace(mVcdFile, in_V_data_V_0_state_cmp_full, "in_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_V_keep_V_0_data_out, "in_V_keep_V_0_data_out");
    sc_trace(mVcdFile, in_V_keep_V_0_vld_in, "in_V_keep_V_0_vld_in");
    sc_trace(mVcdFile, in_V_keep_V_0_vld_out, "in_V_keep_V_0_vld_out");
    sc_trace(mVcdFile, in_V_keep_V_0_ack_in, "in_V_keep_V_0_ack_in");
    sc_trace(mVcdFile, in_V_keep_V_0_ack_out, "in_V_keep_V_0_ack_out");
    sc_trace(mVcdFile, in_V_keep_V_0_payload_A, "in_V_keep_V_0_payload_A");
    sc_trace(mVcdFile, in_V_keep_V_0_payload_B, "in_V_keep_V_0_payload_B");
    sc_trace(mVcdFile, in_V_keep_V_0_sel_rd, "in_V_keep_V_0_sel_rd");
    sc_trace(mVcdFile, in_V_keep_V_0_sel_wr, "in_V_keep_V_0_sel_wr");
    sc_trace(mVcdFile, in_V_keep_V_0_sel, "in_V_keep_V_0_sel");
    sc_trace(mVcdFile, in_V_keep_V_0_load_A, "in_V_keep_V_0_load_A");
    sc_trace(mVcdFile, in_V_keep_V_0_load_B, "in_V_keep_V_0_load_B");
    sc_trace(mVcdFile, in_V_keep_V_0_state, "in_V_keep_V_0_state");
    sc_trace(mVcdFile, in_V_keep_V_0_state_cmp_full, "in_V_keep_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_V_strb_V_0_data_out, "in_V_strb_V_0_data_out");
    sc_trace(mVcdFile, in_V_strb_V_0_vld_in, "in_V_strb_V_0_vld_in");
    sc_trace(mVcdFile, in_V_strb_V_0_vld_out, "in_V_strb_V_0_vld_out");
    sc_trace(mVcdFile, in_V_strb_V_0_ack_in, "in_V_strb_V_0_ack_in");
    sc_trace(mVcdFile, in_V_strb_V_0_ack_out, "in_V_strb_V_0_ack_out");
    sc_trace(mVcdFile, in_V_strb_V_0_payload_A, "in_V_strb_V_0_payload_A");
    sc_trace(mVcdFile, in_V_strb_V_0_payload_B, "in_V_strb_V_0_payload_B");
    sc_trace(mVcdFile, in_V_strb_V_0_sel_rd, "in_V_strb_V_0_sel_rd");
    sc_trace(mVcdFile, in_V_strb_V_0_sel_wr, "in_V_strb_V_0_sel_wr");
    sc_trace(mVcdFile, in_V_strb_V_0_sel, "in_V_strb_V_0_sel");
    sc_trace(mVcdFile, in_V_strb_V_0_load_A, "in_V_strb_V_0_load_A");
    sc_trace(mVcdFile, in_V_strb_V_0_load_B, "in_V_strb_V_0_load_B");
    sc_trace(mVcdFile, in_V_strb_V_0_state, "in_V_strb_V_0_state");
    sc_trace(mVcdFile, in_V_strb_V_0_state_cmp_full, "in_V_strb_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_V_user_V_0_data_out, "in_V_user_V_0_data_out");
    sc_trace(mVcdFile, in_V_user_V_0_vld_in, "in_V_user_V_0_vld_in");
    sc_trace(mVcdFile, in_V_user_V_0_vld_out, "in_V_user_V_0_vld_out");
    sc_trace(mVcdFile, in_V_user_V_0_ack_in, "in_V_user_V_0_ack_in");
    sc_trace(mVcdFile, in_V_user_V_0_ack_out, "in_V_user_V_0_ack_out");
    sc_trace(mVcdFile, in_V_user_V_0_payload_A, "in_V_user_V_0_payload_A");
    sc_trace(mVcdFile, in_V_user_V_0_payload_B, "in_V_user_V_0_payload_B");
    sc_trace(mVcdFile, in_V_user_V_0_sel_rd, "in_V_user_V_0_sel_rd");
    sc_trace(mVcdFile, in_V_user_V_0_sel_wr, "in_V_user_V_0_sel_wr");
    sc_trace(mVcdFile, in_V_user_V_0_sel, "in_V_user_V_0_sel");
    sc_trace(mVcdFile, in_V_user_V_0_load_A, "in_V_user_V_0_load_A");
    sc_trace(mVcdFile, in_V_user_V_0_load_B, "in_V_user_V_0_load_B");
    sc_trace(mVcdFile, in_V_user_V_0_state, "in_V_user_V_0_state");
    sc_trace(mVcdFile, in_V_user_V_0_state_cmp_full, "in_V_user_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_V_last_V_0_data_out, "in_V_last_V_0_data_out");
    sc_trace(mVcdFile, in_V_last_V_0_vld_in, "in_V_last_V_0_vld_in");
    sc_trace(mVcdFile, in_V_last_V_0_vld_out, "in_V_last_V_0_vld_out");
    sc_trace(mVcdFile, in_V_last_V_0_ack_in, "in_V_last_V_0_ack_in");
    sc_trace(mVcdFile, in_V_last_V_0_ack_out, "in_V_last_V_0_ack_out");
    sc_trace(mVcdFile, in_V_last_V_0_payload_A, "in_V_last_V_0_payload_A");
    sc_trace(mVcdFile, in_V_last_V_0_payload_B, "in_V_last_V_0_payload_B");
    sc_trace(mVcdFile, in_V_last_V_0_sel_rd, "in_V_last_V_0_sel_rd");
    sc_trace(mVcdFile, in_V_last_V_0_sel_wr, "in_V_last_V_0_sel_wr");
    sc_trace(mVcdFile, in_V_last_V_0_sel, "in_V_last_V_0_sel");
    sc_trace(mVcdFile, in_V_last_V_0_load_A, "in_V_last_V_0_load_A");
    sc_trace(mVcdFile, in_V_last_V_0_load_B, "in_V_last_V_0_load_B");
    sc_trace(mVcdFile, in_V_last_V_0_state, "in_V_last_V_0_state");
    sc_trace(mVcdFile, in_V_last_V_0_state_cmp_full, "in_V_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_V_id_V_0_data_out, "in_V_id_V_0_data_out");
    sc_trace(mVcdFile, in_V_id_V_0_vld_in, "in_V_id_V_0_vld_in");
    sc_trace(mVcdFile, in_V_id_V_0_vld_out, "in_V_id_V_0_vld_out");
    sc_trace(mVcdFile, in_V_id_V_0_ack_in, "in_V_id_V_0_ack_in");
    sc_trace(mVcdFile, in_V_id_V_0_ack_out, "in_V_id_V_0_ack_out");
    sc_trace(mVcdFile, in_V_id_V_0_payload_A, "in_V_id_V_0_payload_A");
    sc_trace(mVcdFile, in_V_id_V_0_payload_B, "in_V_id_V_0_payload_B");
    sc_trace(mVcdFile, in_V_id_V_0_sel_rd, "in_V_id_V_0_sel_rd");
    sc_trace(mVcdFile, in_V_id_V_0_sel_wr, "in_V_id_V_0_sel_wr");
    sc_trace(mVcdFile, in_V_id_V_0_sel, "in_V_id_V_0_sel");
    sc_trace(mVcdFile, in_V_id_V_0_load_A, "in_V_id_V_0_load_A");
    sc_trace(mVcdFile, in_V_id_V_0_load_B, "in_V_id_V_0_load_B");
    sc_trace(mVcdFile, in_V_id_V_0_state, "in_V_id_V_0_state");
    sc_trace(mVcdFile, in_V_id_V_0_state_cmp_full, "in_V_id_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_V_dest_V_0_data_out, "in_V_dest_V_0_data_out");
    sc_trace(mVcdFile, in_V_dest_V_0_vld_in, "in_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, in_V_dest_V_0_vld_out, "in_V_dest_V_0_vld_out");
    sc_trace(mVcdFile, in_V_dest_V_0_ack_in, "in_V_dest_V_0_ack_in");
    sc_trace(mVcdFile, in_V_dest_V_0_ack_out, "in_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, in_V_dest_V_0_payload_A, "in_V_dest_V_0_payload_A");
    sc_trace(mVcdFile, in_V_dest_V_0_payload_B, "in_V_dest_V_0_payload_B");
    sc_trace(mVcdFile, in_V_dest_V_0_sel_rd, "in_V_dest_V_0_sel_rd");
    sc_trace(mVcdFile, in_V_dest_V_0_sel_wr, "in_V_dest_V_0_sel_wr");
    sc_trace(mVcdFile, in_V_dest_V_0_sel, "in_V_dest_V_0_sel");
    sc_trace(mVcdFile, in_V_dest_V_0_load_A, "in_V_dest_V_0_load_A");
    sc_trace(mVcdFile, in_V_dest_V_0_load_B, "in_V_dest_V_0_load_B");
    sc_trace(mVcdFile, in_V_dest_V_0_state, "in_V_dest_V_0_state");
    sc_trace(mVcdFile, in_V_dest_V_0_state_cmp_full, "in_V_dest_V_0_state_cmp_full");
    sc_trace(mVcdFile, out_V_data_V_1_data_out, "out_V_data_V_1_data_out");
    sc_trace(mVcdFile, out_V_data_V_1_vld_in, "out_V_data_V_1_vld_in");
    sc_trace(mVcdFile, out_V_data_V_1_vld_out, "out_V_data_V_1_vld_out");
    sc_trace(mVcdFile, out_V_data_V_1_ack_in, "out_V_data_V_1_ack_in");
    sc_trace(mVcdFile, out_V_data_V_1_ack_out, "out_V_data_V_1_ack_out");
    sc_trace(mVcdFile, out_V_data_V_1_payload_A, "out_V_data_V_1_payload_A");
    sc_trace(mVcdFile, out_V_data_V_1_payload_B, "out_V_data_V_1_payload_B");
    sc_trace(mVcdFile, out_V_data_V_1_sel_rd, "out_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_data_V_1_sel_wr, "out_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, out_V_data_V_1_sel, "out_V_data_V_1_sel");
    sc_trace(mVcdFile, out_V_data_V_1_load_A, "out_V_data_V_1_load_A");
    sc_trace(mVcdFile, out_V_data_V_1_load_B, "out_V_data_V_1_load_B");
    sc_trace(mVcdFile, out_V_data_V_1_state, "out_V_data_V_1_state");
    sc_trace(mVcdFile, out_V_data_V_1_state_cmp_full, "out_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_V_keep_V_1_data_out, "out_V_keep_V_1_data_out");
    sc_trace(mVcdFile, out_V_keep_V_1_vld_in, "out_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, out_V_keep_V_1_vld_out, "out_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, out_V_keep_V_1_ack_in, "out_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, out_V_keep_V_1_ack_out, "out_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, out_V_keep_V_1_payload_A, "out_V_keep_V_1_payload_A");
    sc_trace(mVcdFile, out_V_keep_V_1_payload_B, "out_V_keep_V_1_payload_B");
    sc_trace(mVcdFile, out_V_keep_V_1_sel_rd, "out_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_keep_V_1_sel_wr, "out_V_keep_V_1_sel_wr");
    sc_trace(mVcdFile, out_V_keep_V_1_sel, "out_V_keep_V_1_sel");
    sc_trace(mVcdFile, out_V_keep_V_1_load_A, "out_V_keep_V_1_load_A");
    sc_trace(mVcdFile, out_V_keep_V_1_load_B, "out_V_keep_V_1_load_B");
    sc_trace(mVcdFile, out_V_keep_V_1_state, "out_V_keep_V_1_state");
    sc_trace(mVcdFile, out_V_keep_V_1_state_cmp_full, "out_V_keep_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_V_strb_V_1_data_out, "out_V_strb_V_1_data_out");
    sc_trace(mVcdFile, out_V_strb_V_1_vld_in, "out_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, out_V_strb_V_1_vld_out, "out_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, out_V_strb_V_1_ack_in, "out_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, out_V_strb_V_1_ack_out, "out_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, out_V_strb_V_1_payload_A, "out_V_strb_V_1_payload_A");
    sc_trace(mVcdFile, out_V_strb_V_1_payload_B, "out_V_strb_V_1_payload_B");
    sc_trace(mVcdFile, out_V_strb_V_1_sel_rd, "out_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_strb_V_1_sel_wr, "out_V_strb_V_1_sel_wr");
    sc_trace(mVcdFile, out_V_strb_V_1_sel, "out_V_strb_V_1_sel");
    sc_trace(mVcdFile, out_V_strb_V_1_load_A, "out_V_strb_V_1_load_A");
    sc_trace(mVcdFile, out_V_strb_V_1_load_B, "out_V_strb_V_1_load_B");
    sc_trace(mVcdFile, out_V_strb_V_1_state, "out_V_strb_V_1_state");
    sc_trace(mVcdFile, out_V_strb_V_1_state_cmp_full, "out_V_strb_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_V_user_V_1_data_out, "out_V_user_V_1_data_out");
    sc_trace(mVcdFile, out_V_user_V_1_vld_in, "out_V_user_V_1_vld_in");
    sc_trace(mVcdFile, out_V_user_V_1_vld_out, "out_V_user_V_1_vld_out");
    sc_trace(mVcdFile, out_V_user_V_1_ack_in, "out_V_user_V_1_ack_in");
    sc_trace(mVcdFile, out_V_user_V_1_ack_out, "out_V_user_V_1_ack_out");
    sc_trace(mVcdFile, out_V_user_V_1_payload_A, "out_V_user_V_1_payload_A");
    sc_trace(mVcdFile, out_V_user_V_1_payload_B, "out_V_user_V_1_payload_B");
    sc_trace(mVcdFile, out_V_user_V_1_sel_rd, "out_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_user_V_1_sel_wr, "out_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, out_V_user_V_1_sel, "out_V_user_V_1_sel");
    sc_trace(mVcdFile, out_V_user_V_1_load_A, "out_V_user_V_1_load_A");
    sc_trace(mVcdFile, out_V_user_V_1_load_B, "out_V_user_V_1_load_B");
    sc_trace(mVcdFile, out_V_user_V_1_state, "out_V_user_V_1_state");
    sc_trace(mVcdFile, out_V_user_V_1_state_cmp_full, "out_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_V_last_V_1_data_out, "out_V_last_V_1_data_out");
    sc_trace(mVcdFile, out_V_last_V_1_vld_in, "out_V_last_V_1_vld_in");
    sc_trace(mVcdFile, out_V_last_V_1_vld_out, "out_V_last_V_1_vld_out");
    sc_trace(mVcdFile, out_V_last_V_1_ack_in, "out_V_last_V_1_ack_in");
    sc_trace(mVcdFile, out_V_last_V_1_ack_out, "out_V_last_V_1_ack_out");
    sc_trace(mVcdFile, out_V_last_V_1_payload_A, "out_V_last_V_1_payload_A");
    sc_trace(mVcdFile, out_V_last_V_1_payload_B, "out_V_last_V_1_payload_B");
    sc_trace(mVcdFile, out_V_last_V_1_sel_rd, "out_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_last_V_1_sel_wr, "out_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, out_V_last_V_1_sel, "out_V_last_V_1_sel");
    sc_trace(mVcdFile, out_V_last_V_1_load_A, "out_V_last_V_1_load_A");
    sc_trace(mVcdFile, out_V_last_V_1_load_B, "out_V_last_V_1_load_B");
    sc_trace(mVcdFile, out_V_last_V_1_state, "out_V_last_V_1_state");
    sc_trace(mVcdFile, out_V_last_V_1_state_cmp_full, "out_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_V_id_V_1_data_out, "out_V_id_V_1_data_out");
    sc_trace(mVcdFile, out_V_id_V_1_vld_in, "out_V_id_V_1_vld_in");
    sc_trace(mVcdFile, out_V_id_V_1_vld_out, "out_V_id_V_1_vld_out");
    sc_trace(mVcdFile, out_V_id_V_1_ack_in, "out_V_id_V_1_ack_in");
    sc_trace(mVcdFile, out_V_id_V_1_ack_out, "out_V_id_V_1_ack_out");
    sc_trace(mVcdFile, out_V_id_V_1_payload_A, "out_V_id_V_1_payload_A");
    sc_trace(mVcdFile, out_V_id_V_1_payload_B, "out_V_id_V_1_payload_B");
    sc_trace(mVcdFile, out_V_id_V_1_sel_rd, "out_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_id_V_1_sel_wr, "out_V_id_V_1_sel_wr");
    sc_trace(mVcdFile, out_V_id_V_1_sel, "out_V_id_V_1_sel");
    sc_trace(mVcdFile, out_V_id_V_1_load_A, "out_V_id_V_1_load_A");
    sc_trace(mVcdFile, out_V_id_V_1_load_B, "out_V_id_V_1_load_B");
    sc_trace(mVcdFile, out_V_id_V_1_state, "out_V_id_V_1_state");
    sc_trace(mVcdFile, out_V_id_V_1_state_cmp_full, "out_V_id_V_1_state_cmp_full");
    sc_trace(mVcdFile, out_V_dest_V_1_data_out, "out_V_dest_V_1_data_out");
    sc_trace(mVcdFile, out_V_dest_V_1_vld_in, "out_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, out_V_dest_V_1_vld_out, "out_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, out_V_dest_V_1_ack_in, "out_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, out_V_dest_V_1_ack_out, "out_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, out_V_dest_V_1_payload_A, "out_V_dest_V_1_payload_A");
    sc_trace(mVcdFile, out_V_dest_V_1_payload_B, "out_V_dest_V_1_payload_B");
    sc_trace(mVcdFile, out_V_dest_V_1_sel_rd, "out_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, out_V_dest_V_1_sel_wr, "out_V_dest_V_1_sel_wr");
    sc_trace(mVcdFile, out_V_dest_V_1_sel, "out_V_dest_V_1_sel");
    sc_trace(mVcdFile, out_V_dest_V_1_load_A, "out_V_dest_V_1_load_A");
    sc_trace(mVcdFile, out_V_dest_V_1_load_B, "out_V_dest_V_1_load_B");
    sc_trace(mVcdFile, out_V_dest_V_1_state, "out_V_dest_V_1_state");
    sc_trace(mVcdFile, out_V_dest_V_1_state_cmp_full, "out_V_dest_V_1_state_cmp_full");
    sc_trace(mVcdFile, tmp_2_fu_125_p1, "tmp_2_fu_125_p1");
    sc_trace(mVcdFile, tmp_2_reg_137, "tmp_2_reg_137");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_8_fu_119_p2, "tmp_8_fu_119_p2");
    sc_trace(mVcdFile, tmp_1_fu_130_p1, "tmp_1_fu_130_p1");
    sc_trace(mVcdFile, tmp_1_reg_142, "tmp_1_reg_142");
    sc_trace(mVcdFile, grp_mem_write_fu_76_ap_start, "grp_mem_write_fu_76_ap_start");
    sc_trace(mVcdFile, grp_mem_write_fu_76_ap_done, "grp_mem_write_fu_76_ap_done");
    sc_trace(mVcdFile, grp_mem_write_fu_76_ap_idle, "grp_mem_write_fu_76_ap_idle");
    sc_trace(mVcdFile, grp_mem_write_fu_76_ap_ready, "grp_mem_write_fu_76_ap_ready");
    sc_trace(mVcdFile, grp_mem_write_fu_76_out_r_TDATA, "grp_mem_write_fu_76_out_r_TDATA");
    sc_trace(mVcdFile, grp_mem_write_fu_76_out_r_TVALID, "grp_mem_write_fu_76_out_r_TVALID");
    sc_trace(mVcdFile, grp_mem_write_fu_76_out_r_TREADY, "grp_mem_write_fu_76_out_r_TREADY");
    sc_trace(mVcdFile, grp_mem_write_fu_76_out_r_TKEEP, "grp_mem_write_fu_76_out_r_TKEEP");
    sc_trace(mVcdFile, grp_mem_write_fu_76_out_r_TSTRB, "grp_mem_write_fu_76_out_r_TSTRB");
    sc_trace(mVcdFile, grp_mem_write_fu_76_out_r_TUSER, "grp_mem_write_fu_76_out_r_TUSER");
    sc_trace(mVcdFile, grp_mem_write_fu_76_out_r_TLAST, "grp_mem_write_fu_76_out_r_TLAST");
    sc_trace(mVcdFile, grp_mem_write_fu_76_out_r_TID, "grp_mem_write_fu_76_out_r_TID");
    sc_trace(mVcdFile, grp_mem_write_fu_76_out_r_TDEST, "grp_mem_write_fu_76_out_r_TDEST");
    sc_trace(mVcdFile, grp_mem_write_fu_76_test_init_arr_V_address0, "grp_mem_write_fu_76_test_init_arr_V_address0");
    sc_trace(mVcdFile, grp_mem_write_fu_76_test_init_arr_V_ce0, "grp_mem_write_fu_76_test_init_arr_V_ce0");
    sc_trace(mVcdFile, grp_mem_read_fu_97_ap_start, "grp_mem_read_fu_97_ap_start");
    sc_trace(mVcdFile, grp_mem_read_fu_97_ap_done, "grp_mem_read_fu_97_ap_done");
    sc_trace(mVcdFile, grp_mem_read_fu_97_ap_idle, "grp_mem_read_fu_97_ap_idle");
    sc_trace(mVcdFile, grp_mem_read_fu_97_ap_ready, "grp_mem_read_fu_97_ap_ready");
    sc_trace(mVcdFile, grp_mem_read_fu_97_in_r_TVALID, "grp_mem_read_fu_97_in_r_TVALID");
    sc_trace(mVcdFile, grp_mem_read_fu_97_in_r_TREADY, "grp_mem_read_fu_97_in_r_TREADY");
    sc_trace(mVcdFile, ap_reg_grp_mem_write_fu_76_ap_start, "ap_reg_grp_mem_write_fu_76_ap_start");
    sc_trace(mVcdFile, ap_block_state1_ignore_call2, "ap_block_state1_ignore_call2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_reg_grp_mem_read_fu_97_ap_start, "ap_reg_grp_mem_read_fu_97_ap_start");
    sc_trace(mVcdFile, ap_block_state1_ignore_call0, "ap_block_state1_ignore_call0");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_fu_115_p1, "tmp_fu_115_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_block_state4, "ap_block_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_state2_on_subcall_done, "ap_block_state2_on_subcall_done");
    sc_trace(mVcdFile, ap_block_state3_on_subcall_done, "ap_block_state3_on_subcall_done");
#endif

    }
}

Block_proc::~Block_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_mem_write_fu_76;
    delete grp_mem_read_fu_97;
}

void Block_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_ack_in.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_mem_read_fu_97_ap_start = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_119_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, tmp_8_fu_119_p2.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_fu_130_p1.read())))) {
            ap_reg_grp_mem_read_fu_97_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_mem_read_fu_97_ap_ready.read())) {
            ap_reg_grp_mem_read_fu_97_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_mem_write_fu_76_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_119_p2.read()))) {
            ap_reg_grp_mem_write_fu_76_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_mem_write_fu_76_ap_ready.read())) {
            ap_reg_grp_mem_write_fu_76_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_vld_out.read()))) {
            in_V_data_V_0_sel_rd =  (sc_logic) (~in_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_ack_in.read()))) {
            in_V_data_V_0_sel_wr =  (sc_logic) (~in_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            in_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            in_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_ack_out.read()))))) {
            in_V_data_V_0_state = ap_const_lv2_3;
        } else {
            in_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_dest_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_vld_out.read()))) {
            in_V_dest_V_0_sel_rd =  (sc_logic) (~in_V_dest_V_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_dest_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_ack_in.read()))) {
            in_V_dest_V_0_sel_wr =  (sc_logic) (~in_V_dest_V_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_V_dest_V_0_state.read())))) {
            in_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_dest_V_0_state.read())))) {
            in_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_ack_out.read()))))) {
            in_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            in_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_id_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_vld_out.read()))) {
            in_V_id_V_0_sel_rd =  (sc_logic) (~in_V_id_V_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_id_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_ack_in.read()))) {
            in_V_id_V_0_sel_wr =  (sc_logic) (~in_V_id_V_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_id_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_V_id_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_V_id_V_0_state.read())))) {
            in_V_id_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_id_V_0_state.read())))) {
            in_V_id_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_id_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_V_id_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_id_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_ack_out.read()))))) {
            in_V_id_V_0_state = ap_const_lv2_3;
        } else {
            in_V_id_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_keep_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_keep_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_keep_V_0_vld_out.read()))) {
            in_V_keep_V_0_sel_rd =  (sc_logic) (~in_V_keep_V_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_keep_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_keep_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_keep_V_0_ack_in.read()))) {
            in_V_keep_V_0_sel_wr =  (sc_logic) (~in_V_keep_V_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_keep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_V_keep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_V_keep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_V_keep_V_0_state.read())))) {
            in_V_keep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_keep_V_0_state.read())))) {
            in_V_keep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_V_keep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_keep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_V_keep_V_0_ack_out.read()))))) {
            in_V_keep_V_0_state = ap_const_lv2_3;
        } else {
            in_V_keep_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_vld_out.read()))) {
            in_V_last_V_0_sel_rd =  (sc_logic) (~in_V_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_ack_in.read()))) {
            in_V_last_V_0_sel_wr =  (sc_logic) (~in_V_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_V_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_V_last_V_0_state.read())))) {
            in_V_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_last_V_0_state.read())))) {
            in_V_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_V_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_ack_out.read()))))) {
            in_V_last_V_0_state = ap_const_lv2_3;
        } else {
            in_V_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_strb_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_strb_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_strb_V_0_vld_out.read()))) {
            in_V_strb_V_0_sel_rd =  (sc_logic) (~in_V_strb_V_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_strb_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_strb_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_strb_V_0_ack_in.read()))) {
            in_V_strb_V_0_sel_wr =  (sc_logic) (~in_V_strb_V_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_strb_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_V_strb_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_V_strb_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_V_strb_V_0_state.read())))) {
            in_V_strb_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_strb_V_0_state.read())))) {
            in_V_strb_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_V_strb_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_strb_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_V_strb_V_0_ack_out.read()))))) {
            in_V_strb_V_0_state = ap_const_lv2_3;
        } else {
            in_V_strb_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_user_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_vld_out.read()))) {
            in_V_user_V_0_sel_rd =  (sc_logic) (~in_V_user_V_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_user_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_ack_in.read()))) {
            in_V_user_V_0_sel_wr =  (sc_logic) (~in_V_user_V_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_user_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_V_user_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_V_user_V_0_state.read())))) {
            in_V_user_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_user_V_0_state.read())))) {
            in_V_user_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_user_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_V_user_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_user_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_ack_out.read()))))) {
            in_V_user_V_0_state = ap_const_lv2_3;
        } else {
            in_V_user_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_vld_out.read()))) {
            out_V_data_V_1_sel_rd =  (sc_logic) (~out_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_ack_in.read()))) {
            out_V_data_V_1_sel_wr =  (sc_logic) (~out_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_V_data_V_1_state.read())))) {
            out_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_data_V_1_state.read())))) {
            out_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_ack_out.read()))))) {
            out_V_data_V_1_state = ap_const_lv2_3;
        } else {
            out_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_vld_out.read()))) {
            out_V_dest_V_1_sel_rd =  (sc_logic) (~out_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_dest_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_ack_in.read()))) {
            out_V_dest_V_1_sel_wr =  (sc_logic) (~out_V_dest_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_V_dest_V_1_state.read())))) {
            out_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_dest_V_1_state.read())))) {
            out_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_ack_out.read()))))) {
            out_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            out_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_vld_out.read()))) {
            out_V_id_V_1_sel_rd =  (sc_logic) (~out_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_id_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_ack_in.read()))) {
            out_V_id_V_1_sel_wr =  (sc_logic) (~out_V_id_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_V_id_V_1_state.read())))) {
            out_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_id_V_1_state.read())))) {
            out_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_ack_out.read()))))) {
            out_V_id_V_1_state = ap_const_lv2_3;
        } else {
            out_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_keep_V_1_vld_out.read()))) {
            out_V_keep_V_1_sel_rd =  (sc_logic) (~out_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_keep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_keep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_keep_V_1_ack_in.read()))) {
            out_V_keep_V_1_sel_wr =  (sc_logic) (~out_V_keep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_V_keep_V_1_state.read())))) {
            out_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_keep_V_1_state.read())))) {
            out_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_keep_V_1_ack_out.read()))))) {
            out_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            out_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_vld_out.read()))) {
            out_V_last_V_1_sel_rd =  (sc_logic) (~out_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_ack_in.read()))) {
            out_V_last_V_1_sel_wr =  (sc_logic) (~out_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_V_last_V_1_state.read())))) {
            out_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_last_V_1_state.read())))) {
            out_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_ack_out.read()))))) {
            out_V_last_V_1_state = ap_const_lv2_3;
        } else {
            out_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_strb_V_1_vld_out.read()))) {
            out_V_strb_V_1_sel_rd =  (sc_logic) (~out_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_strb_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_strb_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_strb_V_1_ack_in.read()))) {
            out_V_strb_V_1_sel_wr =  (sc_logic) (~out_V_strb_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_V_strb_V_1_state.read())))) {
            out_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_strb_V_1_state.read())))) {
            out_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_strb_V_1_ack_out.read()))))) {
            out_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            out_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_vld_out.read()))) {
            out_V_user_V_1_sel_rd =  (sc_logic) (~out_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_ack_in.read()))) {
            out_V_user_V_1_sel_wr =  (sc_logic) (~out_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_V_user_V_1_state.read())))) {
            out_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_user_V_1_state.read())))) {
            out_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_ack_out.read()))))) {
            out_V_user_V_1_state = ap_const_lv2_3;
        } else {
            out_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_load_A.read())) {
        in_V_data_V_0_payload_A = in_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_load_B.read())) {
        in_V_data_V_0_payload_B = in_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_load_A.read())) {
        in_V_dest_V_0_payload_A = in_r_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_load_B.read())) {
        in_V_dest_V_0_payload_B = in_r_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_load_A.read())) {
        in_V_id_V_0_payload_A = in_r_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_load_B.read())) {
        in_V_id_V_0_payload_B = in_r_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_keep_V_0_load_A.read())) {
        in_V_keep_V_0_payload_A = in_r_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_keep_V_0_load_B.read())) {
        in_V_keep_V_0_payload_B = in_r_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_load_A.read())) {
        in_V_last_V_0_payload_A = in_r_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_load_B.read())) {
        in_V_last_V_0_payload_B = in_r_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_strb_V_0_load_A.read())) {
        in_V_strb_V_0_payload_A = in_r_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_strb_V_0_load_B.read())) {
        in_V_strb_V_0_payload_B = in_r_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_load_A.read())) {
        in_V_user_V_0_payload_A = in_r_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_load_B.read())) {
        in_V_user_V_0_payload_B = in_r_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_load_A.read())) {
        out_V_data_V_1_payload_A = grp_mem_write_fu_76_out_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_load_B.read())) {
        out_V_data_V_1_payload_B = grp_mem_write_fu_76_out_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_load_A.read())) {
        out_V_dest_V_1_payload_A = grp_mem_write_fu_76_out_r_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_load_B.read())) {
        out_V_dest_V_1_payload_B = grp_mem_write_fu_76_out_r_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_load_A.read())) {
        out_V_id_V_1_payload_A = grp_mem_write_fu_76_out_r_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_load_B.read())) {
        out_V_id_V_1_payload_B = grp_mem_write_fu_76_out_r_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_keep_V_1_load_A.read())) {
        out_V_keep_V_1_payload_A = grp_mem_write_fu_76_out_r_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_keep_V_1_load_B.read())) {
        out_V_keep_V_1_payload_B = grp_mem_write_fu_76_out_r_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_load_A.read())) {
        out_V_last_V_1_payload_A = grp_mem_write_fu_76_out_r_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_load_B.read())) {
        out_V_last_V_1_payload_B = grp_mem_write_fu_76_out_r_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_strb_V_1_load_A.read())) {
        out_V_strb_V_1_payload_A = grp_mem_write_fu_76_out_r_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_strb_V_1_load_B.read())) {
        out_V_strb_V_1_payload_B = grp_mem_write_fu_76_out_r_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_load_A.read())) {
        out_V_user_V_1_payload_A = grp_mem_write_fu_76_out_r_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_load_B.read())) {
        out_V_user_V_1_payload_B = grp_mem_write_fu_76_out_r_TUSER.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_8_fu_119_p2.read()))) {
        tmp_1_reg_142 = tmp_1_fu_130_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_119_p2.read()))) {
        tmp_2_reg_137 = tmp_2_fu_125_p1.read();
    }
}

void Block_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Block_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Block_proc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Block_proc::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Block_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Block_proc::thread_ap_block_state1_ignore_call0() {
    ap_block_state1_ignore_call0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Block_proc::thread_ap_block_state1_ignore_call2() {
    ap_block_state1_ignore_call2 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Block_proc::thread_ap_block_state2_on_subcall_done() {
    ap_block_state2_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_mem_read_fu_97_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_mem_write_fu_76_ap_done.read()));
}

void Block_proc::thread_ap_block_state3_on_subcall_done() {
    ap_block_state3_on_subcall_done = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_reg_142.read()) && esl_seteq<1,1,1>(ap_const_logic_0, grp_mem_read_fu_97_ap_done.read()));
}

void Block_proc::thread_ap_block_state4() {
    ap_block_state4 = (esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_ack_in.read()));
}

void Block_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_ack_in.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Block_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Block_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_ack_in.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Block_proc::thread_grp_mem_read_fu_97_ap_start() {
    grp_mem_read_fu_97_ap_start = ap_reg_grp_mem_read_fu_97_ap_start.read();
}

void Block_proc::thread_grp_mem_read_fu_97_in_r_TVALID() {
    grp_mem_read_fu_97_in_r_TVALID = in_V_dest_V_0_state.read()[0];
}

void Block_proc::thread_grp_mem_write_fu_76_ap_start() {
    grp_mem_write_fu_76_ap_start = ap_reg_grp_mem_write_fu_76_ap_start.read();
}

void Block_proc::thread_grp_mem_write_fu_76_out_r_TREADY() {
    grp_mem_write_fu_76_out_r_TREADY = out_V_dest_V_1_state.read()[1];
}

void Block_proc::thread_in_V_data_V_0_ack_in() {
    in_V_data_V_0_ack_in = in_V_data_V_0_state.read()[1];
}

void Block_proc::thread_in_V_data_V_0_ack_out() {
    in_V_data_V_0_ack_out = grp_mem_read_fu_97_in_r_TREADY.read();
}

void Block_proc::thread_in_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_sel.read())) {
        in_V_data_V_0_data_out = in_V_data_V_0_payload_B.read();
    } else {
        in_V_data_V_0_data_out = in_V_data_V_0_payload_A.read();
    }
}

void Block_proc::thread_in_V_data_V_0_load_A() {
    in_V_data_V_0_load_A = (in_V_data_V_0_state_cmp_full.read() & ~in_V_data_V_0_sel_wr.read());
}

void Block_proc::thread_in_V_data_V_0_load_B() {
    in_V_data_V_0_load_B = (in_V_data_V_0_sel_wr.read() & in_V_data_V_0_state_cmp_full.read());
}

void Block_proc::thread_in_V_data_V_0_sel() {
    in_V_data_V_0_sel = in_V_data_V_0_sel_rd.read();
}

void Block_proc::thread_in_V_data_V_0_state_cmp_full() {
    in_V_data_V_0_state_cmp_full =  (sc_logic) ((!in_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void Block_proc::thread_in_V_data_V_0_vld_in() {
    in_V_data_V_0_vld_in = in_r_TVALID.read();
}

void Block_proc::thread_in_V_data_V_0_vld_out() {
    in_V_data_V_0_vld_out = in_V_data_V_0_state.read()[0];
}

void Block_proc::thread_in_V_dest_V_0_ack_in() {
    in_V_dest_V_0_ack_in = in_V_dest_V_0_state.read()[1];
}

void Block_proc::thread_in_V_dest_V_0_ack_out() {
    in_V_dest_V_0_ack_out = grp_mem_read_fu_97_in_r_TREADY.read();
}

void Block_proc::thread_in_V_dest_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_dest_V_0_sel.read())) {
        in_V_dest_V_0_data_out = in_V_dest_V_0_payload_B.read();
    } else {
        in_V_dest_V_0_data_out = in_V_dest_V_0_payload_A.read();
    }
}

void Block_proc::thread_in_V_dest_V_0_load_A() {
    in_V_dest_V_0_load_A = (in_V_dest_V_0_state_cmp_full.read() & ~in_V_dest_V_0_sel_wr.read());
}

void Block_proc::thread_in_V_dest_V_0_load_B() {
    in_V_dest_V_0_load_B = (in_V_dest_V_0_sel_wr.read() & in_V_dest_V_0_state_cmp_full.read());
}

void Block_proc::thread_in_V_dest_V_0_sel() {
    in_V_dest_V_0_sel = in_V_dest_V_0_sel_rd.read();
}

void Block_proc::thread_in_V_dest_V_0_state_cmp_full() {
    in_V_dest_V_0_state_cmp_full =  (sc_logic) ((!in_V_dest_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_V_dest_V_0_state.read() != ap_const_lv2_1))[0];
}

void Block_proc::thread_in_V_dest_V_0_vld_in() {
    in_V_dest_V_0_vld_in = in_r_TVALID.read();
}

void Block_proc::thread_in_V_dest_V_0_vld_out() {
    in_V_dest_V_0_vld_out = in_V_dest_V_0_state.read()[0];
}

void Block_proc::thread_in_V_id_V_0_ack_in() {
    in_V_id_V_0_ack_in = in_V_id_V_0_state.read()[1];
}

void Block_proc::thread_in_V_id_V_0_ack_out() {
    in_V_id_V_0_ack_out = grp_mem_read_fu_97_in_r_TREADY.read();
}

void Block_proc::thread_in_V_id_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_id_V_0_sel.read())) {
        in_V_id_V_0_data_out = in_V_id_V_0_payload_B.read();
    } else {
        in_V_id_V_0_data_out = in_V_id_V_0_payload_A.read();
    }
}

void Block_proc::thread_in_V_id_V_0_load_A() {
    in_V_id_V_0_load_A = (in_V_id_V_0_state_cmp_full.read() & ~in_V_id_V_0_sel_wr.read());
}

void Block_proc::thread_in_V_id_V_0_load_B() {
    in_V_id_V_0_load_B = (in_V_id_V_0_sel_wr.read() & in_V_id_V_0_state_cmp_full.read());
}

void Block_proc::thread_in_V_id_V_0_sel() {
    in_V_id_V_0_sel = in_V_id_V_0_sel_rd.read();
}

void Block_proc::thread_in_V_id_V_0_state_cmp_full() {
    in_V_id_V_0_state_cmp_full =  (sc_logic) ((!in_V_id_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_V_id_V_0_state.read() != ap_const_lv2_1))[0];
}

void Block_proc::thread_in_V_id_V_0_vld_in() {
    in_V_id_V_0_vld_in = in_r_TVALID.read();
}

void Block_proc::thread_in_V_id_V_0_vld_out() {
    in_V_id_V_0_vld_out = in_V_id_V_0_state.read()[0];
}

void Block_proc::thread_in_V_keep_V_0_ack_in() {
    in_V_keep_V_0_ack_in = in_V_keep_V_0_state.read()[1];
}

void Block_proc::thread_in_V_keep_V_0_ack_out() {
    in_V_keep_V_0_ack_out = grp_mem_read_fu_97_in_r_TREADY.read();
}

void Block_proc::thread_in_V_keep_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_keep_V_0_sel.read())) {
        in_V_keep_V_0_data_out = in_V_keep_V_0_payload_B.read();
    } else {
        in_V_keep_V_0_data_out = in_V_keep_V_0_payload_A.read();
    }
}

void Block_proc::thread_in_V_keep_V_0_load_A() {
    in_V_keep_V_0_load_A = (in_V_keep_V_0_state_cmp_full.read() & ~in_V_keep_V_0_sel_wr.read());
}

void Block_proc::thread_in_V_keep_V_0_load_B() {
    in_V_keep_V_0_load_B = (in_V_keep_V_0_sel_wr.read() & in_V_keep_V_0_state_cmp_full.read());
}

void Block_proc::thread_in_V_keep_V_0_sel() {
    in_V_keep_V_0_sel = in_V_keep_V_0_sel_rd.read();
}

void Block_proc::thread_in_V_keep_V_0_state_cmp_full() {
    in_V_keep_V_0_state_cmp_full =  (sc_logic) ((!in_V_keep_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_V_keep_V_0_state.read() != ap_const_lv2_1))[0];
}

void Block_proc::thread_in_V_keep_V_0_vld_in() {
    in_V_keep_V_0_vld_in = in_r_TVALID.read();
}

void Block_proc::thread_in_V_keep_V_0_vld_out() {
    in_V_keep_V_0_vld_out = in_V_keep_V_0_state.read()[0];
}

void Block_proc::thread_in_V_last_V_0_ack_in() {
    in_V_last_V_0_ack_in = in_V_last_V_0_state.read()[1];
}

void Block_proc::thread_in_V_last_V_0_ack_out() {
    in_V_last_V_0_ack_out = grp_mem_read_fu_97_in_r_TREADY.read();
}

void Block_proc::thread_in_V_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_sel.read())) {
        in_V_last_V_0_data_out = in_V_last_V_0_payload_B.read();
    } else {
        in_V_last_V_0_data_out = in_V_last_V_0_payload_A.read();
    }
}

void Block_proc::thread_in_V_last_V_0_load_A() {
    in_V_last_V_0_load_A = (in_V_last_V_0_state_cmp_full.read() & ~in_V_last_V_0_sel_wr.read());
}

void Block_proc::thread_in_V_last_V_0_load_B() {
    in_V_last_V_0_load_B = (in_V_last_V_0_sel_wr.read() & in_V_last_V_0_state_cmp_full.read());
}

void Block_proc::thread_in_V_last_V_0_sel() {
    in_V_last_V_0_sel = in_V_last_V_0_sel_rd.read();
}

void Block_proc::thread_in_V_last_V_0_state_cmp_full() {
    in_V_last_V_0_state_cmp_full =  (sc_logic) ((!in_V_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_V_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void Block_proc::thread_in_V_last_V_0_vld_in() {
    in_V_last_V_0_vld_in = in_r_TVALID.read();
}

void Block_proc::thread_in_V_last_V_0_vld_out() {
    in_V_last_V_0_vld_out = in_V_last_V_0_state.read()[0];
}

void Block_proc::thread_in_V_strb_V_0_ack_in() {
    in_V_strb_V_0_ack_in = in_V_strb_V_0_state.read()[1];
}

void Block_proc::thread_in_V_strb_V_0_ack_out() {
    in_V_strb_V_0_ack_out = grp_mem_read_fu_97_in_r_TREADY.read();
}

void Block_proc::thread_in_V_strb_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_strb_V_0_sel.read())) {
        in_V_strb_V_0_data_out = in_V_strb_V_0_payload_B.read();
    } else {
        in_V_strb_V_0_data_out = in_V_strb_V_0_payload_A.read();
    }
}

void Block_proc::thread_in_V_strb_V_0_load_A() {
    in_V_strb_V_0_load_A = (in_V_strb_V_0_state_cmp_full.read() & ~in_V_strb_V_0_sel_wr.read());
}

void Block_proc::thread_in_V_strb_V_0_load_B() {
    in_V_strb_V_0_load_B = (in_V_strb_V_0_sel_wr.read() & in_V_strb_V_0_state_cmp_full.read());
}

void Block_proc::thread_in_V_strb_V_0_sel() {
    in_V_strb_V_0_sel = in_V_strb_V_0_sel_rd.read();
}

void Block_proc::thread_in_V_strb_V_0_state_cmp_full() {
    in_V_strb_V_0_state_cmp_full =  (sc_logic) ((!in_V_strb_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_V_strb_V_0_state.read() != ap_const_lv2_1))[0];
}

void Block_proc::thread_in_V_strb_V_0_vld_in() {
    in_V_strb_V_0_vld_in = in_r_TVALID.read();
}

void Block_proc::thread_in_V_strb_V_0_vld_out() {
    in_V_strb_V_0_vld_out = in_V_strb_V_0_state.read()[0];
}

void Block_proc::thread_in_V_user_V_0_ack_in() {
    in_V_user_V_0_ack_in = in_V_user_V_0_state.read()[1];
}

void Block_proc::thread_in_V_user_V_0_ack_out() {
    in_V_user_V_0_ack_out = grp_mem_read_fu_97_in_r_TREADY.read();
}

void Block_proc::thread_in_V_user_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_user_V_0_sel.read())) {
        in_V_user_V_0_data_out = in_V_user_V_0_payload_B.read();
    } else {
        in_V_user_V_0_data_out = in_V_user_V_0_payload_A.read();
    }
}

void Block_proc::thread_in_V_user_V_0_load_A() {
    in_V_user_V_0_load_A = (in_V_user_V_0_state_cmp_full.read() & ~in_V_user_V_0_sel_wr.read());
}

void Block_proc::thread_in_V_user_V_0_load_B() {
    in_V_user_V_0_load_B = (in_V_user_V_0_sel_wr.read() & in_V_user_V_0_state_cmp_full.read());
}

void Block_proc::thread_in_V_user_V_0_sel() {
    in_V_user_V_0_sel = in_V_user_V_0_sel_rd.read();
}

void Block_proc::thread_in_V_user_V_0_state_cmp_full() {
    in_V_user_V_0_state_cmp_full =  (sc_logic) ((!in_V_user_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_V_user_V_0_state.read() != ap_const_lv2_1))[0];
}

void Block_proc::thread_in_V_user_V_0_vld_in() {
    in_V_user_V_0_vld_in = in_r_TVALID.read();
}

void Block_proc::thread_in_V_user_V_0_vld_out() {
    in_V_user_V_0_vld_out = in_V_user_V_0_state.read()[0];
}

void Block_proc::thread_in_r_TREADY() {
    in_r_TREADY = in_V_dest_V_0_state.read()[1];
}

void Block_proc::thread_out_V_data_V_1_ack_in() {
    out_V_data_V_1_ack_in = out_V_data_V_1_state.read()[1];
}

void Block_proc::thread_out_V_data_V_1_ack_out() {
    out_V_data_V_1_ack_out = out_r_TREADY.read();
}

void Block_proc::thread_out_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_data_V_1_sel.read())) {
        out_V_data_V_1_data_out = out_V_data_V_1_payload_B.read();
    } else {
        out_V_data_V_1_data_out = out_V_data_V_1_payload_A.read();
    }
}

void Block_proc::thread_out_V_data_V_1_load_A() {
    out_V_data_V_1_load_A = (out_V_data_V_1_state_cmp_full.read() & ~out_V_data_V_1_sel_wr.read());
}

void Block_proc::thread_out_V_data_V_1_load_B() {
    out_V_data_V_1_load_B = (out_V_data_V_1_sel_wr.read() & out_V_data_V_1_state_cmp_full.read());
}

void Block_proc::thread_out_V_data_V_1_sel() {
    out_V_data_V_1_sel = out_V_data_V_1_sel_rd.read();
}

void Block_proc::thread_out_V_data_V_1_state_cmp_full() {
    out_V_data_V_1_state_cmp_full =  (sc_logic) ((!out_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void Block_proc::thread_out_V_data_V_1_vld_in() {
    out_V_data_V_1_vld_in = grp_mem_write_fu_76_out_r_TVALID.read();
}

void Block_proc::thread_out_V_data_V_1_vld_out() {
    out_V_data_V_1_vld_out = out_V_data_V_1_state.read()[0];
}

void Block_proc::thread_out_V_dest_V_1_ack_in() {
    out_V_dest_V_1_ack_in = out_V_dest_V_1_state.read()[1];
}

void Block_proc::thread_out_V_dest_V_1_ack_out() {
    out_V_dest_V_1_ack_out = out_r_TREADY.read();
}

void Block_proc::thread_out_V_dest_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_dest_V_1_sel.read())) {
        out_V_dest_V_1_data_out = out_V_dest_V_1_payload_B.read();
    } else {
        out_V_dest_V_1_data_out = out_V_dest_V_1_payload_A.read();
    }
}

void Block_proc::thread_out_V_dest_V_1_load_A() {
    out_V_dest_V_1_load_A = (out_V_dest_V_1_state_cmp_full.read() & ~out_V_dest_V_1_sel_wr.read());
}

void Block_proc::thread_out_V_dest_V_1_load_B() {
    out_V_dest_V_1_load_B = (out_V_dest_V_1_sel_wr.read() & out_V_dest_V_1_state_cmp_full.read());
}

void Block_proc::thread_out_V_dest_V_1_sel() {
    out_V_dest_V_1_sel = out_V_dest_V_1_sel_rd.read();
}

void Block_proc::thread_out_V_dest_V_1_state_cmp_full() {
    out_V_dest_V_1_state_cmp_full =  (sc_logic) ((!out_V_dest_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_V_dest_V_1_state.read() != ap_const_lv2_1))[0];
}

void Block_proc::thread_out_V_dest_V_1_vld_in() {
    out_V_dest_V_1_vld_in = grp_mem_write_fu_76_out_r_TVALID.read();
}

void Block_proc::thread_out_V_dest_V_1_vld_out() {
    out_V_dest_V_1_vld_out = out_V_dest_V_1_state.read()[0];
}

void Block_proc::thread_out_V_id_V_1_ack_in() {
    out_V_id_V_1_ack_in = out_V_id_V_1_state.read()[1];
}

void Block_proc::thread_out_V_id_V_1_ack_out() {
    out_V_id_V_1_ack_out = out_r_TREADY.read();
}

void Block_proc::thread_out_V_id_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_id_V_1_sel.read())) {
        out_V_id_V_1_data_out = out_V_id_V_1_payload_B.read();
    } else {
        out_V_id_V_1_data_out = out_V_id_V_1_payload_A.read();
    }
}

void Block_proc::thread_out_V_id_V_1_load_A() {
    out_V_id_V_1_load_A = (out_V_id_V_1_state_cmp_full.read() & ~out_V_id_V_1_sel_wr.read());
}

void Block_proc::thread_out_V_id_V_1_load_B() {
    out_V_id_V_1_load_B = (out_V_id_V_1_sel_wr.read() & out_V_id_V_1_state_cmp_full.read());
}

void Block_proc::thread_out_V_id_V_1_sel() {
    out_V_id_V_1_sel = out_V_id_V_1_sel_rd.read();
}

void Block_proc::thread_out_V_id_V_1_state_cmp_full() {
    out_V_id_V_1_state_cmp_full =  (sc_logic) ((!out_V_id_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_V_id_V_1_state.read() != ap_const_lv2_1))[0];
}

void Block_proc::thread_out_V_id_V_1_vld_in() {
    out_V_id_V_1_vld_in = grp_mem_write_fu_76_out_r_TVALID.read();
}

void Block_proc::thread_out_V_id_V_1_vld_out() {
    out_V_id_V_1_vld_out = out_V_id_V_1_state.read()[0];
}

void Block_proc::thread_out_V_keep_V_1_ack_in() {
    out_V_keep_V_1_ack_in = out_V_keep_V_1_state.read()[1];
}

void Block_proc::thread_out_V_keep_V_1_ack_out() {
    out_V_keep_V_1_ack_out = out_r_TREADY.read();
}

void Block_proc::thread_out_V_keep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_keep_V_1_sel.read())) {
        out_V_keep_V_1_data_out = out_V_keep_V_1_payload_B.read();
    } else {
        out_V_keep_V_1_data_out = out_V_keep_V_1_payload_A.read();
    }
}

void Block_proc::thread_out_V_keep_V_1_load_A() {
    out_V_keep_V_1_load_A = (out_V_keep_V_1_state_cmp_full.read() & ~out_V_keep_V_1_sel_wr.read());
}

void Block_proc::thread_out_V_keep_V_1_load_B() {
    out_V_keep_V_1_load_B = (out_V_keep_V_1_sel_wr.read() & out_V_keep_V_1_state_cmp_full.read());
}

void Block_proc::thread_out_V_keep_V_1_sel() {
    out_V_keep_V_1_sel = out_V_keep_V_1_sel_rd.read();
}

void Block_proc::thread_out_V_keep_V_1_state_cmp_full() {
    out_V_keep_V_1_state_cmp_full =  (sc_logic) ((!out_V_keep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_V_keep_V_1_state.read() != ap_const_lv2_1))[0];
}

void Block_proc::thread_out_V_keep_V_1_vld_in() {
    out_V_keep_V_1_vld_in = grp_mem_write_fu_76_out_r_TVALID.read();
}

void Block_proc::thread_out_V_keep_V_1_vld_out() {
    out_V_keep_V_1_vld_out = out_V_keep_V_1_state.read()[0];
}

void Block_proc::thread_out_V_last_V_1_ack_in() {
    out_V_last_V_1_ack_in = out_V_last_V_1_state.read()[1];
}

void Block_proc::thread_out_V_last_V_1_ack_out() {
    out_V_last_V_1_ack_out = out_r_TREADY.read();
}

void Block_proc::thread_out_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_last_V_1_sel.read())) {
        out_V_last_V_1_data_out = out_V_last_V_1_payload_B.read();
    } else {
        out_V_last_V_1_data_out = out_V_last_V_1_payload_A.read();
    }
}

void Block_proc::thread_out_V_last_V_1_load_A() {
    out_V_last_V_1_load_A = (out_V_last_V_1_state_cmp_full.read() & ~out_V_last_V_1_sel_wr.read());
}

void Block_proc::thread_out_V_last_V_1_load_B() {
    out_V_last_V_1_load_B = (out_V_last_V_1_sel_wr.read() & out_V_last_V_1_state_cmp_full.read());
}

void Block_proc::thread_out_V_last_V_1_sel() {
    out_V_last_V_1_sel = out_V_last_V_1_sel_rd.read();
}

void Block_proc::thread_out_V_last_V_1_state_cmp_full() {
    out_V_last_V_1_state_cmp_full =  (sc_logic) ((!out_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void Block_proc::thread_out_V_last_V_1_vld_in() {
    out_V_last_V_1_vld_in = grp_mem_write_fu_76_out_r_TVALID.read();
}

void Block_proc::thread_out_V_last_V_1_vld_out() {
    out_V_last_V_1_vld_out = out_V_last_V_1_state.read()[0];
}

void Block_proc::thread_out_V_strb_V_1_ack_in() {
    out_V_strb_V_1_ack_in = out_V_strb_V_1_state.read()[1];
}

void Block_proc::thread_out_V_strb_V_1_ack_out() {
    out_V_strb_V_1_ack_out = out_r_TREADY.read();
}

void Block_proc::thread_out_V_strb_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_strb_V_1_sel.read())) {
        out_V_strb_V_1_data_out = out_V_strb_V_1_payload_B.read();
    } else {
        out_V_strb_V_1_data_out = out_V_strb_V_1_payload_A.read();
    }
}

void Block_proc::thread_out_V_strb_V_1_load_A() {
    out_V_strb_V_1_load_A = (out_V_strb_V_1_state_cmp_full.read() & ~out_V_strb_V_1_sel_wr.read());
}

void Block_proc::thread_out_V_strb_V_1_load_B() {
    out_V_strb_V_1_load_B = (out_V_strb_V_1_sel_wr.read() & out_V_strb_V_1_state_cmp_full.read());
}

void Block_proc::thread_out_V_strb_V_1_sel() {
    out_V_strb_V_1_sel = out_V_strb_V_1_sel_rd.read();
}

void Block_proc::thread_out_V_strb_V_1_state_cmp_full() {
    out_V_strb_V_1_state_cmp_full =  (sc_logic) ((!out_V_strb_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_V_strb_V_1_state.read() != ap_const_lv2_1))[0];
}

void Block_proc::thread_out_V_strb_V_1_vld_in() {
    out_V_strb_V_1_vld_in = grp_mem_write_fu_76_out_r_TVALID.read();
}

void Block_proc::thread_out_V_strb_V_1_vld_out() {
    out_V_strb_V_1_vld_out = out_V_strb_V_1_state.read()[0];
}

void Block_proc::thread_out_V_user_V_1_ack_in() {
    out_V_user_V_1_ack_in = out_V_user_V_1_state.read()[1];
}

void Block_proc::thread_out_V_user_V_1_ack_out() {
    out_V_user_V_1_ack_out = out_r_TREADY.read();
}

void Block_proc::thread_out_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_V_user_V_1_sel.read())) {
        out_V_user_V_1_data_out = out_V_user_V_1_payload_B.read();
    } else {
        out_V_user_V_1_data_out = out_V_user_V_1_payload_A.read();
    }
}

void Block_proc::thread_out_V_user_V_1_load_A() {
    out_V_user_V_1_load_A = (out_V_user_V_1_state_cmp_full.read() & ~out_V_user_V_1_sel_wr.read());
}

void Block_proc::thread_out_V_user_V_1_load_B() {
    out_V_user_V_1_load_B = (out_V_user_V_1_sel_wr.read() & out_V_user_V_1_state_cmp_full.read());
}

void Block_proc::thread_out_V_user_V_1_sel() {
    out_V_user_V_1_sel = out_V_user_V_1_sel_rd.read();
}

void Block_proc::thread_out_V_user_V_1_state_cmp_full() {
    out_V_user_V_1_state_cmp_full =  (sc_logic) ((!out_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void Block_proc::thread_out_V_user_V_1_vld_in() {
    out_V_user_V_1_vld_in = grp_mem_write_fu_76_out_r_TVALID.read();
}

void Block_proc::thread_out_V_user_V_1_vld_out() {
    out_V_user_V_1_vld_out = out_V_user_V_1_state.read()[0];
}

void Block_proc::thread_out_r_TDATA() {
    out_r_TDATA = out_V_data_V_1_data_out.read();
}

void Block_proc::thread_out_r_TDEST() {
    out_r_TDEST = out_V_dest_V_1_data_out.read();
}

void Block_proc::thread_out_r_TID() {
    out_r_TID = out_V_id_V_1_data_out.read();
}

void Block_proc::thread_out_r_TKEEP() {
    out_r_TKEEP = out_V_keep_V_1_data_out.read();
}

void Block_proc::thread_out_r_TLAST() {
    out_r_TLAST = out_V_last_V_1_data_out.read();
}

void Block_proc::thread_out_r_TSTRB() {
    out_r_TSTRB = out_V_strb_V_1_data_out.read();
}

void Block_proc::thread_out_r_TUSER() {
    out_r_TUSER = out_V_user_V_1_data_out.read();
}

void Block_proc::thread_out_r_TVALID() {
    out_r_TVALID = out_V_dest_V_1_state.read()[0];
}

void Block_proc::thread_test_init_arr_V_address0() {
    test_init_arr_V_address0 = grp_mem_write_fu_76_test_init_arr_V_address0.read();
}

void Block_proc::thread_test_init_arr_V_ce0() {
    test_init_arr_V_ce0 = grp_mem_write_fu_76_test_init_arr_V_ce0.read();
}

void Block_proc::thread_tmp_1_fu_130_p1() {
    tmp_1_fu_130_p1 = rw.read().range(1-1, 0);
}

void Block_proc::thread_tmp_2_fu_125_p1() {
    tmp_2_fu_125_p1 = mask.read().range(32-1, 0);
}

void Block_proc::thread_tmp_8_fu_119_p2() {
    tmp_8_fu_119_p2 = (!tmp_fu_115_p1.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_115_p1.read() == ap_const_lv2_0);
}

void Block_proc::thread_tmp_fu_115_p1() {
    tmp_fu_115_p1 = rw.read().range(2-1, 0);
}

void Block_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_8_fu_119_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_8_fu_119_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, out_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_V_dest_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

