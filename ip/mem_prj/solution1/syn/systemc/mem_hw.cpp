// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mem_hw.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const int mem_hw::C_S_AXI_DATA_WIDTH = "100000";
const int mem_hw::C_S_AXI_WSTRB_WIDTH = "100";
const int mem_hw::C_S_AXI_ADDR_WIDTH = "100000";
const sc_logic mem_hw::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<64> mem_hw::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<8> mem_hw::ap_const_lv8_0 = "00000000";
const sc_lv<1> mem_hw::ap_const_lv1_0 = "0";
const sc_logic mem_hw::ap_const_logic_0 = sc_dt::Log_0;

mem_hw::mem_hw(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mem_hw_CONTROL_BUS_s_axi_U = new mem_hw_CONTROL_BUS_s_axi<C_S_AXI_CONTROL_BUS_ADDR_WIDTH,C_S_AXI_CONTROL_BUS_DATA_WIDTH>("mem_hw_CONTROL_BUS_s_axi_U");
    mem_hw_CONTROL_BUS_s_axi_U->AWVALID(s_axi_CONTROL_BUS_AWVALID);
    mem_hw_CONTROL_BUS_s_axi_U->AWREADY(s_axi_CONTROL_BUS_AWREADY);
    mem_hw_CONTROL_BUS_s_axi_U->AWADDR(s_axi_CONTROL_BUS_AWADDR);
    mem_hw_CONTROL_BUS_s_axi_U->WVALID(s_axi_CONTROL_BUS_WVALID);
    mem_hw_CONTROL_BUS_s_axi_U->WREADY(s_axi_CONTROL_BUS_WREADY);
    mem_hw_CONTROL_BUS_s_axi_U->WDATA(s_axi_CONTROL_BUS_WDATA);
    mem_hw_CONTROL_BUS_s_axi_U->WSTRB(s_axi_CONTROL_BUS_WSTRB);
    mem_hw_CONTROL_BUS_s_axi_U->ARVALID(s_axi_CONTROL_BUS_ARVALID);
    mem_hw_CONTROL_BUS_s_axi_U->ARREADY(s_axi_CONTROL_BUS_ARREADY);
    mem_hw_CONTROL_BUS_s_axi_U->ARADDR(s_axi_CONTROL_BUS_ARADDR);
    mem_hw_CONTROL_BUS_s_axi_U->RVALID(s_axi_CONTROL_BUS_RVALID);
    mem_hw_CONTROL_BUS_s_axi_U->RREADY(s_axi_CONTROL_BUS_RREADY);
    mem_hw_CONTROL_BUS_s_axi_U->RDATA(s_axi_CONTROL_BUS_RDATA);
    mem_hw_CONTROL_BUS_s_axi_U->RRESP(s_axi_CONTROL_BUS_RRESP);
    mem_hw_CONTROL_BUS_s_axi_U->BVALID(s_axi_CONTROL_BUS_BVALID);
    mem_hw_CONTROL_BUS_s_axi_U->BREADY(s_axi_CONTROL_BUS_BREADY);
    mem_hw_CONTROL_BUS_s_axi_U->BRESP(s_axi_CONTROL_BUS_BRESP);
    mem_hw_CONTROL_BUS_s_axi_U->ACLK(ap_clk);
    mem_hw_CONTROL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    mem_hw_CONTROL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    mem_hw_CONTROL_BUS_s_axi_U->ap_start(ap_start);
    mem_hw_CONTROL_BUS_s_axi_U->interrupt(interrupt);
    mem_hw_CONTROL_BUS_s_axi_U->ap_ready(ap_ready);
    mem_hw_CONTROL_BUS_s_axi_U->ap_done(ap_done);
    mem_hw_CONTROL_BUS_s_axi_U->ap_idle(ap_idle);
    mem_hw_CONTROL_BUS_s_axi_U->rw(rw);
    mem_hw_CONTROL_BUS_s_axi_U->mask(mask);
    mem_hw_CONTROL_BUS_s_axi_U->test_init_arr_V_address0(Block_proc_U0_test_init_arr_V_address0);
    mem_hw_CONTROL_BUS_s_axi_U->test_init_arr_V_ce0(Block_proc_U0_test_init_arr_V_ce0);
    mem_hw_CONTROL_BUS_s_axi_U->test_init_arr_V_q0(test_init_arr_V_q0);
    Block_proc_U0 = new Block_proc("Block_proc_U0");
    Block_proc_U0->ap_clk(ap_clk);
    Block_proc_U0->ap_rst(ap_rst_n_inv);
    Block_proc_U0->ap_start(Block_proc_U0_ap_start);
    Block_proc_U0->ap_done(Block_proc_U0_ap_done);
    Block_proc_U0->ap_continue(Block_proc_U0_ap_continue);
    Block_proc_U0->ap_idle(Block_proc_U0_ap_idle);
    Block_proc_U0->ap_ready(Block_proc_U0_ap_ready);
    Block_proc_U0->rw(rw);
    Block_proc_U0->in_r_TDATA(in_r_TDATA);
    Block_proc_U0->in_r_TVALID(in_r_TVALID);
    Block_proc_U0->in_r_TREADY(Block_proc_U0_in_r_TREADY);
    Block_proc_U0->in_r_TKEEP(in_r_TKEEP);
    Block_proc_U0->in_r_TSTRB(in_r_TSTRB);
    Block_proc_U0->in_r_TUSER(in_r_TUSER);
    Block_proc_U0->in_r_TLAST(in_r_TLAST);
    Block_proc_U0->in_r_TID(in_r_TID);
    Block_proc_U0->in_r_TDEST(in_r_TDEST);
    Block_proc_U0->mask(mask);
    Block_proc_U0->out_r_TDATA(Block_proc_U0_out_r_TDATA);
    Block_proc_U0->out_r_TVALID(Block_proc_U0_out_r_TVALID);
    Block_proc_U0->out_r_TREADY(out_r_TREADY);
    Block_proc_U0->out_r_TKEEP(Block_proc_U0_out_r_TKEEP);
    Block_proc_U0->out_r_TSTRB(Block_proc_U0_out_r_TSTRB);
    Block_proc_U0->out_r_TUSER(Block_proc_U0_out_r_TUSER);
    Block_proc_U0->out_r_TLAST(Block_proc_U0_out_r_TLAST);
    Block_proc_U0->out_r_TID(Block_proc_U0_out_r_TID);
    Block_proc_U0->out_r_TDEST(Block_proc_U0_out_r_TDEST);
    Block_proc_U0->test_init_arr_V_address0(Block_proc_U0_test_init_arr_V_address0);
    Block_proc_U0->test_init_arr_V_ce0(Block_proc_U0_test_init_arr_V_ce0);
    Block_proc_U0->test_init_arr_V_q0(test_init_arr_V_q0);

    SC_METHOD(thread_Block_proc_U0_ap_continue);

    SC_METHOD(thread_Block_proc_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_Block_proc_U0_start_full_n);

    SC_METHOD(thread_Block_proc_U0_start_write);

    SC_METHOD(thread_ap_done);
    sensitive << ( Block_proc_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( Block_proc_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( Block_proc_U0_ap_ready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( Block_proc_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( Block_proc_U0_ap_ready );

    SC_METHOD(thread_in_r_TREADY);
    sensitive << ( Block_proc_U0_in_r_TREADY );

    SC_METHOD(thread_out_r_TDATA);
    sensitive << ( Block_proc_U0_out_r_TDATA );

    SC_METHOD(thread_out_r_TDEST);
    sensitive << ( Block_proc_U0_out_r_TDEST );

    SC_METHOD(thread_out_r_TID);
    sensitive << ( Block_proc_U0_out_r_TID );

    SC_METHOD(thread_out_r_TKEEP);
    sensitive << ( Block_proc_U0_out_r_TKEEP );

    SC_METHOD(thread_out_r_TLAST);
    sensitive << ( Block_proc_U0_out_r_TLAST );

    SC_METHOD(thread_out_r_TSTRB);
    sensitive << ( Block_proc_U0_out_r_TSTRB );

    SC_METHOD(thread_out_r_TUSER);
    sensitive << ( Block_proc_U0_out_r_TUSER );

    SC_METHOD(thread_out_r_TVALID);
    sensitive << ( Block_proc_U0_out_r_TVALID );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mem_hw_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWVALID, "(port)s_axi_CONTROL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWREADY, "(port)s_axi_CONTROL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_AWADDR, "(port)s_axi_CONTROL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WVALID, "(port)s_axi_CONTROL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WREADY, "(port)s_axi_CONTROL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WDATA, "(port)s_axi_CONTROL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_WSTRB, "(port)s_axi_CONTROL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARVALID, "(port)s_axi_CONTROL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARREADY, "(port)s_axi_CONTROL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_ARADDR, "(port)s_axi_CONTROL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RVALID, "(port)s_axi_CONTROL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RREADY, "(port)s_axi_CONTROL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RDATA, "(port)s_axi_CONTROL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_RRESP, "(port)s_axi_CONTROL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BVALID, "(port)s_axi_CONTROL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BREADY, "(port)s_axi_CONTROL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CONTROL_BUS_BRESP, "(port)s_axi_CONTROL_BUS_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
    sc_trace(mVcdFile, out_r_TDATA, "(port)out_r_TDATA");
    sc_trace(mVcdFile, out_r_TKEEP, "(port)out_r_TKEEP");
    sc_trace(mVcdFile, out_r_TSTRB, "(port)out_r_TSTRB");
    sc_trace(mVcdFile, out_r_TUSER, "(port)out_r_TUSER");
    sc_trace(mVcdFile, out_r_TLAST, "(port)out_r_TLAST");
    sc_trace(mVcdFile, out_r_TID, "(port)out_r_TID");
    sc_trace(mVcdFile, out_r_TDEST, "(port)out_r_TDEST");
    sc_trace(mVcdFile, in_r_TDATA, "(port)in_r_TDATA");
    sc_trace(mVcdFile, in_r_TKEEP, "(port)in_r_TKEEP");
    sc_trace(mVcdFile, in_r_TSTRB, "(port)in_r_TSTRB");
    sc_trace(mVcdFile, in_r_TUSER, "(port)in_r_TUSER");
    sc_trace(mVcdFile, in_r_TLAST, "(port)in_r_TLAST");
    sc_trace(mVcdFile, in_r_TID, "(port)in_r_TID");
    sc_trace(mVcdFile, in_r_TDEST, "(port)in_r_TDEST");
    sc_trace(mVcdFile, in_r_TVALID, "(port)in_r_TVALID");
    sc_trace(mVcdFile, in_r_TREADY, "(port)in_r_TREADY");
    sc_trace(mVcdFile, out_r_TVALID, "(port)out_r_TVALID");
    sc_trace(mVcdFile, out_r_TREADY, "(port)out_r_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, rw, "rw");
    sc_trace(mVcdFile, mask, "mask");
    sc_trace(mVcdFile, test_init_arr_V_q0, "test_init_arr_V_q0");
    sc_trace(mVcdFile, Block_proc_U0_ap_start, "Block_proc_U0_ap_start");
    sc_trace(mVcdFile, Block_proc_U0_ap_done, "Block_proc_U0_ap_done");
    sc_trace(mVcdFile, Block_proc_U0_ap_continue, "Block_proc_U0_ap_continue");
    sc_trace(mVcdFile, Block_proc_U0_ap_idle, "Block_proc_U0_ap_idle");
    sc_trace(mVcdFile, Block_proc_U0_ap_ready, "Block_proc_U0_ap_ready");
    sc_trace(mVcdFile, Block_proc_U0_in_r_TREADY, "Block_proc_U0_in_r_TREADY");
    sc_trace(mVcdFile, Block_proc_U0_out_r_TDATA, "Block_proc_U0_out_r_TDATA");
    sc_trace(mVcdFile, Block_proc_U0_out_r_TVALID, "Block_proc_U0_out_r_TVALID");
    sc_trace(mVcdFile, Block_proc_U0_out_r_TKEEP, "Block_proc_U0_out_r_TKEEP");
    sc_trace(mVcdFile, Block_proc_U0_out_r_TSTRB, "Block_proc_U0_out_r_TSTRB");
    sc_trace(mVcdFile, Block_proc_U0_out_r_TUSER, "Block_proc_U0_out_r_TUSER");
    sc_trace(mVcdFile, Block_proc_U0_out_r_TLAST, "Block_proc_U0_out_r_TLAST");
    sc_trace(mVcdFile, Block_proc_U0_out_r_TID, "Block_proc_U0_out_r_TID");
    sc_trace(mVcdFile, Block_proc_U0_out_r_TDEST, "Block_proc_U0_out_r_TDEST");
    sc_trace(mVcdFile, Block_proc_U0_test_init_arr_V_address0, "Block_proc_U0_test_init_arr_V_address0");
    sc_trace(mVcdFile, Block_proc_U0_test_init_arr_V_ce0, "Block_proc_U0_test_init_arr_V_ce0");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, Block_proc_U0_start_full_n, "Block_proc_U0_start_full_n");
    sc_trace(mVcdFile, Block_proc_U0_start_write, "Block_proc_U0_start_write");
#endif

    }
    mHdltvinHandle.open("mem_hw.hdltvin.dat");
    mHdltvoutHandle.open("mem_hw.hdltvout.dat");
}

mem_hw::~mem_hw() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete mem_hw_CONTROL_BUS_s_axi_U;
    delete Block_proc_U0;
}

void mem_hw::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void mem_hw::thread_Block_proc_U0_ap_continue() {
    Block_proc_U0_ap_continue = ap_const_logic_1;
}

void mem_hw::thread_Block_proc_U0_ap_start() {
    Block_proc_U0_ap_start = ap_start.read();
}

void mem_hw::thread_Block_proc_U0_start_full_n() {
    Block_proc_U0_start_full_n = ap_const_logic_1;
}

void mem_hw::thread_Block_proc_U0_start_write() {
    Block_proc_U0_start_write = ap_const_logic_0;
}

void mem_hw::thread_ap_done() {
    ap_done = Block_proc_U0_ap_done.read();
}

void mem_hw::thread_ap_idle() {
    ap_idle = Block_proc_U0_ap_idle.read();
}

void mem_hw::thread_ap_ready() {
    ap_ready = Block_proc_U0_ap_ready.read();
}

void mem_hw::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void mem_hw::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void mem_hw::thread_ap_sync_done() {
    ap_sync_done = Block_proc_U0_ap_done.read();
}

void mem_hw::thread_ap_sync_ready() {
    ap_sync_ready = Block_proc_U0_ap_ready.read();
}

void mem_hw::thread_in_r_TREADY() {
    in_r_TREADY = Block_proc_U0_in_r_TREADY.read();
}

void mem_hw::thread_out_r_TDATA() {
    out_r_TDATA = Block_proc_U0_out_r_TDATA.read();
}

void mem_hw::thread_out_r_TDEST() {
    out_r_TDEST = Block_proc_U0_out_r_TDEST.read();
}

void mem_hw::thread_out_r_TID() {
    out_r_TID = Block_proc_U0_out_r_TID.read();
}

void mem_hw::thread_out_r_TKEEP() {
    out_r_TKEEP = Block_proc_U0_out_r_TKEEP.read();
}

void mem_hw::thread_out_r_TLAST() {
    out_r_TLAST = Block_proc_U0_out_r_TLAST.read();
}

void mem_hw::thread_out_r_TSTRB() {
    out_r_TSTRB = Block_proc_U0_out_r_TSTRB.read();
}

void mem_hw::thread_out_r_TUSER() {
    out_r_TUSER = Block_proc_U0_out_r_TUSER.read();
}

void mem_hw::thread_out_r_TVALID() {
    out_r_TVALID = Block_proc_U0_out_r_TVALID.read();
}

void mem_hw::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_CONTROL_BUS_AWVALID\" :  \"" << s_axi_CONTROL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_CONTROL_BUS_AWREADY\" :  \"" << s_axi_CONTROL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_AWADDR\" :  \"" << s_axi_CONTROL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WVALID\" :  \"" << s_axi_CONTROL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_WREADY\" :  \"" << s_axi_CONTROL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WDATA\" :  \"" << s_axi_CONTROL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_WSTRB\" :  \"" << s_axi_CONTROL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARVALID\" :  \"" << s_axi_CONTROL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARREADY\" :  \"" << s_axi_CONTROL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_ARADDR\" :  \"" << s_axi_CONTROL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RVALID\" :  \"" << s_axi_CONTROL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_RREADY\" :  \"" << s_axi_CONTROL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RDATA\" :  \"" << s_axi_CONTROL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_RRESP\" :  \"" << s_axi_CONTROL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BVALID\" :  \"" << s_axi_CONTROL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CONTROL_BUS_BREADY\" :  \"" << s_axi_CONTROL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CONTROL_BUS_BRESP\" :  \"" << s_axi_CONTROL_BUS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TDATA\" :  \"" << out_r_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TKEEP\" :  \"" << out_r_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TSTRB\" :  \"" << out_r_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TUSER\" :  \"" << out_r_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TLAST\" :  \"" << out_r_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TID\" :  \"" << out_r_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TDEST\" :  \"" << out_r_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TDATA\" :  \"" << in_r_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TKEEP\" :  \"" << in_r_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TSTRB\" :  \"" << in_r_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TUSER\" :  \"" << in_r_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TLAST\" :  \"" << in_r_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TID\" :  \"" << in_r_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TDEST\" :  \"" << in_r_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TVALID\" :  \"" << in_r_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_TREADY\" :  \"" << in_r_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TVALID\" :  \"" << out_r_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_r_TREADY\" :  \"" << out_r_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

