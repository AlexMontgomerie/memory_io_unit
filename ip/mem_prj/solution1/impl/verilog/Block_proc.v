// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rw,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TKEEP,
        in_r_TSTRB,
        in_r_TUSER,
        in_r_TLAST,
        in_r_TID,
        in_r_TDEST,
        mask,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TKEEP,
        out_r_TSTRB,
        out_r_TUSER,
        out_r_TLAST,
        out_r_TID,
        out_r_TDEST,
        test_init_arr_V_address0,
        test_init_arr_V_ce0,
        test_init_arr_V_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] rw;
input  [63:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [7:0] in_r_TKEEP;
input  [7:0] in_r_TSTRB;
input  [0:0] in_r_TUSER;
input  [0:0] in_r_TLAST;
input  [0:0] in_r_TID;
input  [0:0] in_r_TDEST;
input  [63:0] mask;
output  [63:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [7:0] out_r_TKEEP;
output  [7:0] out_r_TSTRB;
output  [0:0] out_r_TUSER;
output  [0:0] out_r_TLAST;
output  [0:0] out_r_TID;
output  [0:0] out_r_TDEST;
output  [7:0] test_init_arr_V_address0;
output   test_init_arr_V_ce0;
input  [63:0] test_init_arr_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] in_V_data_V_0_data_out;
wire    in_V_data_V_0_vld_in;
wire    in_V_data_V_0_vld_out;
wire    in_V_data_V_0_ack_in;
wire    in_V_data_V_0_ack_out;
reg   [63:0] in_V_data_V_0_payload_A;
reg   [63:0] in_V_data_V_0_payload_B;
reg    in_V_data_V_0_sel_rd;
reg    in_V_data_V_0_sel_wr;
wire    in_V_data_V_0_sel;
wire    in_V_data_V_0_load_A;
wire    in_V_data_V_0_load_B;
reg   [1:0] in_V_data_V_0_state;
wire    in_V_data_V_0_state_cmp_full;
reg   [7:0] in_V_keep_V_0_data_out;
wire    in_V_keep_V_0_vld_in;
wire    in_V_keep_V_0_vld_out;
wire    in_V_keep_V_0_ack_in;
wire    in_V_keep_V_0_ack_out;
reg   [7:0] in_V_keep_V_0_payload_A;
reg   [7:0] in_V_keep_V_0_payload_B;
reg    in_V_keep_V_0_sel_rd;
reg    in_V_keep_V_0_sel_wr;
wire    in_V_keep_V_0_sel;
wire    in_V_keep_V_0_load_A;
wire    in_V_keep_V_0_load_B;
reg   [1:0] in_V_keep_V_0_state;
wire    in_V_keep_V_0_state_cmp_full;
reg   [7:0] in_V_strb_V_0_data_out;
wire    in_V_strb_V_0_vld_in;
wire    in_V_strb_V_0_vld_out;
wire    in_V_strb_V_0_ack_in;
wire    in_V_strb_V_0_ack_out;
reg   [7:0] in_V_strb_V_0_payload_A;
reg   [7:0] in_V_strb_V_0_payload_B;
reg    in_V_strb_V_0_sel_rd;
reg    in_V_strb_V_0_sel_wr;
wire    in_V_strb_V_0_sel;
wire    in_V_strb_V_0_load_A;
wire    in_V_strb_V_0_load_B;
reg   [1:0] in_V_strb_V_0_state;
wire    in_V_strb_V_0_state_cmp_full;
reg   [0:0] in_V_user_V_0_data_out;
wire    in_V_user_V_0_vld_in;
wire    in_V_user_V_0_vld_out;
wire    in_V_user_V_0_ack_in;
wire    in_V_user_V_0_ack_out;
reg   [0:0] in_V_user_V_0_payload_A;
reg   [0:0] in_V_user_V_0_payload_B;
reg    in_V_user_V_0_sel_rd;
reg    in_V_user_V_0_sel_wr;
wire    in_V_user_V_0_sel;
wire    in_V_user_V_0_load_A;
wire    in_V_user_V_0_load_B;
reg   [1:0] in_V_user_V_0_state;
wire    in_V_user_V_0_state_cmp_full;
reg   [0:0] in_V_last_V_0_data_out;
wire    in_V_last_V_0_vld_in;
wire    in_V_last_V_0_vld_out;
wire    in_V_last_V_0_ack_in;
wire    in_V_last_V_0_ack_out;
reg   [0:0] in_V_last_V_0_payload_A;
reg   [0:0] in_V_last_V_0_payload_B;
reg    in_V_last_V_0_sel_rd;
reg    in_V_last_V_0_sel_wr;
wire    in_V_last_V_0_sel;
wire    in_V_last_V_0_load_A;
wire    in_V_last_V_0_load_B;
reg   [1:0] in_V_last_V_0_state;
wire    in_V_last_V_0_state_cmp_full;
reg   [0:0] in_V_id_V_0_data_out;
wire    in_V_id_V_0_vld_in;
wire    in_V_id_V_0_vld_out;
wire    in_V_id_V_0_ack_in;
wire    in_V_id_V_0_ack_out;
reg   [0:0] in_V_id_V_0_payload_A;
reg   [0:0] in_V_id_V_0_payload_B;
reg    in_V_id_V_0_sel_rd;
reg    in_V_id_V_0_sel_wr;
wire    in_V_id_V_0_sel;
wire    in_V_id_V_0_load_A;
wire    in_V_id_V_0_load_B;
reg   [1:0] in_V_id_V_0_state;
wire    in_V_id_V_0_state_cmp_full;
reg   [0:0] in_V_dest_V_0_data_out;
wire    in_V_dest_V_0_vld_in;
wire    in_V_dest_V_0_vld_out;
wire    in_V_dest_V_0_ack_in;
wire    in_V_dest_V_0_ack_out;
reg   [0:0] in_V_dest_V_0_payload_A;
reg   [0:0] in_V_dest_V_0_payload_B;
reg    in_V_dest_V_0_sel_rd;
reg    in_V_dest_V_0_sel_wr;
wire    in_V_dest_V_0_sel;
wire    in_V_dest_V_0_load_A;
wire    in_V_dest_V_0_load_B;
reg   [1:0] in_V_dest_V_0_state;
wire    in_V_dest_V_0_state_cmp_full;
reg   [63:0] out_V_data_V_1_data_out;
wire    out_V_data_V_1_vld_in;
wire    out_V_data_V_1_vld_out;
wire    out_V_data_V_1_ack_in;
wire    out_V_data_V_1_ack_out;
reg   [63:0] out_V_data_V_1_payload_A;
reg   [63:0] out_V_data_V_1_payload_B;
reg    out_V_data_V_1_sel_rd;
reg    out_V_data_V_1_sel_wr;
wire    out_V_data_V_1_sel;
wire    out_V_data_V_1_load_A;
wire    out_V_data_V_1_load_B;
reg   [1:0] out_V_data_V_1_state;
wire    out_V_data_V_1_state_cmp_full;
reg   [7:0] out_V_keep_V_1_data_out;
wire    out_V_keep_V_1_vld_in;
wire    out_V_keep_V_1_vld_out;
wire    out_V_keep_V_1_ack_in;
wire    out_V_keep_V_1_ack_out;
reg   [7:0] out_V_keep_V_1_payload_A;
reg   [7:0] out_V_keep_V_1_payload_B;
reg    out_V_keep_V_1_sel_rd;
reg    out_V_keep_V_1_sel_wr;
wire    out_V_keep_V_1_sel;
wire    out_V_keep_V_1_load_A;
wire    out_V_keep_V_1_load_B;
reg   [1:0] out_V_keep_V_1_state;
wire    out_V_keep_V_1_state_cmp_full;
reg   [7:0] out_V_strb_V_1_data_out;
wire    out_V_strb_V_1_vld_in;
wire    out_V_strb_V_1_vld_out;
wire    out_V_strb_V_1_ack_in;
wire    out_V_strb_V_1_ack_out;
reg   [7:0] out_V_strb_V_1_payload_A;
reg   [7:0] out_V_strb_V_1_payload_B;
reg    out_V_strb_V_1_sel_rd;
reg    out_V_strb_V_1_sel_wr;
wire    out_V_strb_V_1_sel;
wire    out_V_strb_V_1_load_A;
wire    out_V_strb_V_1_load_B;
reg   [1:0] out_V_strb_V_1_state;
wire    out_V_strb_V_1_state_cmp_full;
reg   [0:0] out_V_user_V_1_data_out;
wire    out_V_user_V_1_vld_in;
wire    out_V_user_V_1_vld_out;
wire    out_V_user_V_1_ack_in;
wire    out_V_user_V_1_ack_out;
reg   [0:0] out_V_user_V_1_payload_A;
reg   [0:0] out_V_user_V_1_payload_B;
reg    out_V_user_V_1_sel_rd;
reg    out_V_user_V_1_sel_wr;
wire    out_V_user_V_1_sel;
wire    out_V_user_V_1_load_A;
wire    out_V_user_V_1_load_B;
reg   [1:0] out_V_user_V_1_state;
wire    out_V_user_V_1_state_cmp_full;
reg   [0:0] out_V_last_V_1_data_out;
wire    out_V_last_V_1_vld_in;
wire    out_V_last_V_1_vld_out;
wire    out_V_last_V_1_ack_in;
wire    out_V_last_V_1_ack_out;
reg   [0:0] out_V_last_V_1_payload_A;
reg   [0:0] out_V_last_V_1_payload_B;
reg    out_V_last_V_1_sel_rd;
reg    out_V_last_V_1_sel_wr;
wire    out_V_last_V_1_sel;
wire    out_V_last_V_1_load_A;
wire    out_V_last_V_1_load_B;
reg   [1:0] out_V_last_V_1_state;
wire    out_V_last_V_1_state_cmp_full;
reg   [0:0] out_V_id_V_1_data_out;
wire    out_V_id_V_1_vld_in;
wire    out_V_id_V_1_vld_out;
wire    out_V_id_V_1_ack_in;
wire    out_V_id_V_1_ack_out;
reg   [0:0] out_V_id_V_1_payload_A;
reg   [0:0] out_V_id_V_1_payload_B;
reg    out_V_id_V_1_sel_rd;
reg    out_V_id_V_1_sel_wr;
wire    out_V_id_V_1_sel;
wire    out_V_id_V_1_load_A;
wire    out_V_id_V_1_load_B;
reg   [1:0] out_V_id_V_1_state;
wire    out_V_id_V_1_state_cmp_full;
reg   [0:0] out_V_dest_V_1_data_out;
wire    out_V_dest_V_1_vld_in;
wire    out_V_dest_V_1_vld_out;
wire    out_V_dest_V_1_ack_in;
wire    out_V_dest_V_1_ack_out;
reg   [0:0] out_V_dest_V_1_payload_A;
reg   [0:0] out_V_dest_V_1_payload_B;
reg    out_V_dest_V_1_sel_rd;
reg    out_V_dest_V_1_sel_wr;
wire    out_V_dest_V_1_sel;
wire    out_V_dest_V_1_load_A;
wire    out_V_dest_V_1_load_B;
reg   [1:0] out_V_dest_V_1_state;
wire    out_V_dest_V_1_state_cmp_full;
wire   [31:0] tmp_2_fu_125_p1;
reg   [31:0] tmp_2_reg_137;
reg    ap_block_state1;
wire   [0:0] tmp_8_fu_119_p2;
wire   [0:0] tmp_1_fu_130_p1;
reg   [0:0] tmp_1_reg_142;
wire    grp_mem_write_fu_76_ap_start;
wire    grp_mem_write_fu_76_ap_done;
wire    grp_mem_write_fu_76_ap_idle;
wire    grp_mem_write_fu_76_ap_ready;
wire   [63:0] grp_mem_write_fu_76_out_r_TDATA;
wire    grp_mem_write_fu_76_out_r_TVALID;
wire    grp_mem_write_fu_76_out_r_TREADY;
wire   [7:0] grp_mem_write_fu_76_out_r_TKEEP;
wire   [7:0] grp_mem_write_fu_76_out_r_TSTRB;
wire   [0:0] grp_mem_write_fu_76_out_r_TUSER;
wire   [0:0] grp_mem_write_fu_76_out_r_TLAST;
wire   [0:0] grp_mem_write_fu_76_out_r_TID;
wire   [0:0] grp_mem_write_fu_76_out_r_TDEST;
wire   [7:0] grp_mem_write_fu_76_test_init_arr_V_address0;
wire    grp_mem_write_fu_76_test_init_arr_V_ce0;
wire    grp_mem_read_fu_97_ap_start;
wire    grp_mem_read_fu_97_ap_done;
wire    grp_mem_read_fu_97_ap_idle;
wire    grp_mem_read_fu_97_ap_ready;
wire    grp_mem_read_fu_97_in_r_TVALID;
wire    grp_mem_read_fu_97_in_r_TREADY;
reg    ap_reg_grp_mem_write_fu_76_ap_start;
reg    ap_block_state1_ignore_call2;
wire    ap_CS_fsm_state2;
reg    ap_reg_grp_mem_read_fu_97_ap_start;
reg    ap_block_state1_ignore_call0;
wire    ap_CS_fsm_state3;
wire   [1:0] tmp_fu_115_p1;
wire    ap_CS_fsm_state4;
reg    ap_block_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_block_state2_on_subcall_done;
reg    ap_block_state3_on_subcall_done;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 in_V_data_V_0_sel_rd = 1'b0;
#0 in_V_data_V_0_sel_wr = 1'b0;
#0 in_V_data_V_0_state = 2'd0;
#0 in_V_keep_V_0_sel_rd = 1'b0;
#0 in_V_keep_V_0_sel_wr = 1'b0;
#0 in_V_keep_V_0_state = 2'd0;
#0 in_V_strb_V_0_sel_rd = 1'b0;
#0 in_V_strb_V_0_sel_wr = 1'b0;
#0 in_V_strb_V_0_state = 2'd0;
#0 in_V_user_V_0_sel_rd = 1'b0;
#0 in_V_user_V_0_sel_wr = 1'b0;
#0 in_V_user_V_0_state = 2'd0;
#0 in_V_last_V_0_sel_rd = 1'b0;
#0 in_V_last_V_0_sel_wr = 1'b0;
#0 in_V_last_V_0_state = 2'd0;
#0 in_V_id_V_0_sel_rd = 1'b0;
#0 in_V_id_V_0_sel_wr = 1'b0;
#0 in_V_id_V_0_state = 2'd0;
#0 in_V_dest_V_0_sel_rd = 1'b0;
#0 in_V_dest_V_0_sel_wr = 1'b0;
#0 in_V_dest_V_0_state = 2'd0;
#0 out_V_data_V_1_sel_rd = 1'b0;
#0 out_V_data_V_1_sel_wr = 1'b0;
#0 out_V_data_V_1_state = 2'd0;
#0 out_V_keep_V_1_sel_rd = 1'b0;
#0 out_V_keep_V_1_sel_wr = 1'b0;
#0 out_V_keep_V_1_state = 2'd0;
#0 out_V_strb_V_1_sel_rd = 1'b0;
#0 out_V_strb_V_1_sel_wr = 1'b0;
#0 out_V_strb_V_1_state = 2'd0;
#0 out_V_user_V_1_sel_rd = 1'b0;
#0 out_V_user_V_1_sel_wr = 1'b0;
#0 out_V_user_V_1_state = 2'd0;
#0 out_V_last_V_1_sel_rd = 1'b0;
#0 out_V_last_V_1_sel_wr = 1'b0;
#0 out_V_last_V_1_state = 2'd0;
#0 out_V_id_V_1_sel_rd = 1'b0;
#0 out_V_id_V_1_sel_wr = 1'b0;
#0 out_V_id_V_1_state = 2'd0;
#0 out_V_dest_V_1_sel_rd = 1'b0;
#0 out_V_dest_V_1_sel_wr = 1'b0;
#0 out_V_dest_V_1_state = 2'd0;
#0 ap_reg_grp_mem_write_fu_76_ap_start = 1'b0;
#0 ap_reg_grp_mem_read_fu_97_ap_start = 1'b0;
end

mem_write grp_mem_write_fu_76(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mem_write_fu_76_ap_start),
    .ap_done(grp_mem_write_fu_76_ap_done),
    .ap_idle(grp_mem_write_fu_76_ap_idle),
    .ap_ready(grp_mem_write_fu_76_ap_ready),
    .out_r_TDATA(grp_mem_write_fu_76_out_r_TDATA),
    .out_r_TVALID(grp_mem_write_fu_76_out_r_TVALID),
    .out_r_TREADY(grp_mem_write_fu_76_out_r_TREADY),
    .out_r_TKEEP(grp_mem_write_fu_76_out_r_TKEEP),
    .out_r_TSTRB(grp_mem_write_fu_76_out_r_TSTRB),
    .out_r_TUSER(grp_mem_write_fu_76_out_r_TUSER),
    .out_r_TLAST(grp_mem_write_fu_76_out_r_TLAST),
    .out_r_TID(grp_mem_write_fu_76_out_r_TID),
    .out_r_TDEST(grp_mem_write_fu_76_out_r_TDEST),
    .mask(tmp_2_reg_137),
    .test_init_arr_V_address0(grp_mem_write_fu_76_test_init_arr_V_address0),
    .test_init_arr_V_ce0(grp_mem_write_fu_76_test_init_arr_V_ce0),
    .test_init_arr_V_q0(test_init_arr_V_q0)
);

mem_read grp_mem_read_fu_97(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mem_read_fu_97_ap_start),
    .ap_done(grp_mem_read_fu_97_ap_done),
    .ap_idle(grp_mem_read_fu_97_ap_idle),
    .ap_ready(grp_mem_read_fu_97_ap_ready),
    .in_r_TDATA(in_V_data_V_0_data_out),
    .in_r_TVALID(grp_mem_read_fu_97_in_r_TVALID),
    .in_r_TREADY(grp_mem_read_fu_97_in_r_TREADY),
    .in_r_TKEEP(in_V_keep_V_0_data_out),
    .in_r_TSTRB(in_V_strb_V_0_data_out),
    .in_r_TUSER(in_V_user_V_0_data_out),
    .in_r_TLAST(in_V_last_V_0_data_out),
    .in_r_TID(in_V_id_V_0_data_out),
    .in_r_TDEST(in_V_dest_V_0_data_out)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_mem_read_fu_97_ap_start <= 1'b0;
    end else begin
        if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_1_fu_130_p1 == 1'd1) & (tmp_8_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_8_fu_119_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
            ap_reg_grp_mem_read_fu_97_ap_start <= 1'b1;
        end else if ((grp_mem_read_fu_97_ap_ready == 1'b1)) begin
            ap_reg_grp_mem_read_fu_97_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_mem_write_fu_76_ap_start <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_8_fu_119_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_reg_grp_mem_write_fu_76_ap_start <= 1'b1;
        end else if ((grp_mem_write_fu_76_ap_ready == 1'b1)) begin
            ap_reg_grp_mem_write_fu_76_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_data_V_0_ack_out == 1'b1) & (in_V_data_V_0_vld_out == 1'b1))) begin
            in_V_data_V_0_sel_rd <= ~in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_data_V_0_ack_in == 1'b1) & (in_V_data_V_0_vld_in == 1'b1))) begin
            in_V_data_V_0_sel_wr <= ~in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_data_V_0_state == 2'd2) & (in_V_data_V_0_vld_in == 1'b0)) | ((in_V_data_V_0_state == 2'd3) & (in_V_data_V_0_vld_in == 1'b0) & (in_V_data_V_0_ack_out == 1'b1)))) begin
            in_V_data_V_0_state <= 2'd2;
        end else if ((((in_V_data_V_0_state == 2'd1) & (in_V_data_V_0_ack_out == 1'b0)) | ((in_V_data_V_0_state == 2'd3) & (in_V_data_V_0_ack_out == 1'b0) & (in_V_data_V_0_vld_in == 1'b1)))) begin
            in_V_data_V_0_state <= 2'd1;
        end else if (((~((in_V_data_V_0_vld_in == 1'b0) & (in_V_data_V_0_ack_out == 1'b1)) & ~((in_V_data_V_0_ack_out == 1'b0) & (in_V_data_V_0_vld_in == 1'b1)) & (in_V_data_V_0_state == 2'd3)) | ((in_V_data_V_0_state == 2'd1) & (in_V_data_V_0_ack_out == 1'b1)) | ((in_V_data_V_0_state == 2'd2) & (in_V_data_V_0_vld_in == 1'b1)))) begin
            in_V_data_V_0_state <= 2'd3;
        end else begin
            in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_dest_V_0_ack_out == 1'b1) & (in_V_dest_V_0_vld_out == 1'b1))) begin
            in_V_dest_V_0_sel_rd <= ~in_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_dest_V_0_ack_in == 1'b1) & (in_V_dest_V_0_vld_in == 1'b1))) begin
            in_V_dest_V_0_sel_wr <= ~in_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_dest_V_0_state == 2'd2) & (in_V_dest_V_0_vld_in == 1'b0)) | ((in_V_dest_V_0_state == 2'd3) & (in_V_dest_V_0_vld_in == 1'b0) & (in_V_dest_V_0_ack_out == 1'b1)))) begin
            in_V_dest_V_0_state <= 2'd2;
        end else if ((((in_V_dest_V_0_state == 2'd1) & (in_V_dest_V_0_ack_out == 1'b0)) | ((in_V_dest_V_0_state == 2'd3) & (in_V_dest_V_0_ack_out == 1'b0) & (in_V_dest_V_0_vld_in == 1'b1)))) begin
            in_V_dest_V_0_state <= 2'd1;
        end else if (((~((in_V_dest_V_0_vld_in == 1'b0) & (in_V_dest_V_0_ack_out == 1'b1)) & ~((in_V_dest_V_0_ack_out == 1'b0) & (in_V_dest_V_0_vld_in == 1'b1)) & (in_V_dest_V_0_state == 2'd3)) | ((in_V_dest_V_0_state == 2'd1) & (in_V_dest_V_0_ack_out == 1'b1)) | ((in_V_dest_V_0_state == 2'd2) & (in_V_dest_V_0_vld_in == 1'b1)))) begin
            in_V_dest_V_0_state <= 2'd3;
        end else begin
            in_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_id_V_0_ack_out == 1'b1) & (in_V_id_V_0_vld_out == 1'b1))) begin
            in_V_id_V_0_sel_rd <= ~in_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_id_V_0_ack_in == 1'b1) & (in_V_id_V_0_vld_in == 1'b1))) begin
            in_V_id_V_0_sel_wr <= ~in_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_id_V_0_state == 2'd2) & (in_V_id_V_0_vld_in == 1'b0)) | ((in_V_id_V_0_state == 2'd3) & (in_V_id_V_0_vld_in == 1'b0) & (in_V_id_V_0_ack_out == 1'b1)))) begin
            in_V_id_V_0_state <= 2'd2;
        end else if ((((in_V_id_V_0_state == 2'd1) & (in_V_id_V_0_ack_out == 1'b0)) | ((in_V_id_V_0_state == 2'd3) & (in_V_id_V_0_ack_out == 1'b0) & (in_V_id_V_0_vld_in == 1'b1)))) begin
            in_V_id_V_0_state <= 2'd1;
        end else if (((~((in_V_id_V_0_vld_in == 1'b0) & (in_V_id_V_0_ack_out == 1'b1)) & ~((in_V_id_V_0_ack_out == 1'b0) & (in_V_id_V_0_vld_in == 1'b1)) & (in_V_id_V_0_state == 2'd3)) | ((in_V_id_V_0_state == 2'd1) & (in_V_id_V_0_ack_out == 1'b1)) | ((in_V_id_V_0_state == 2'd2) & (in_V_id_V_0_vld_in == 1'b1)))) begin
            in_V_id_V_0_state <= 2'd3;
        end else begin
            in_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_keep_V_0_vld_out == 1'b1) & (in_V_keep_V_0_ack_out == 1'b1))) begin
            in_V_keep_V_0_sel_rd <= ~in_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_keep_V_0_vld_in == 1'b1) & (in_V_keep_V_0_ack_in == 1'b1))) begin
            in_V_keep_V_0_sel_wr <= ~in_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_keep_V_0_state == 2'd2) & (in_V_keep_V_0_vld_in == 1'b0)) | ((in_V_keep_V_0_state == 2'd3) & (in_V_keep_V_0_vld_in == 1'b0) & (in_V_keep_V_0_ack_out == 1'b1)))) begin
            in_V_keep_V_0_state <= 2'd2;
        end else if ((((in_V_keep_V_0_state == 2'd1) & (in_V_keep_V_0_ack_out == 1'b0)) | ((in_V_keep_V_0_state == 2'd3) & (in_V_keep_V_0_ack_out == 1'b0) & (in_V_keep_V_0_vld_in == 1'b1)))) begin
            in_V_keep_V_0_state <= 2'd1;
        end else if (((~((in_V_keep_V_0_vld_in == 1'b0) & (in_V_keep_V_0_ack_out == 1'b1)) & ~((in_V_keep_V_0_ack_out == 1'b0) & (in_V_keep_V_0_vld_in == 1'b1)) & (in_V_keep_V_0_state == 2'd3)) | ((in_V_keep_V_0_state == 2'd1) & (in_V_keep_V_0_ack_out == 1'b1)) | ((in_V_keep_V_0_state == 2'd2) & (in_V_keep_V_0_vld_in == 1'b1)))) begin
            in_V_keep_V_0_state <= 2'd3;
        end else begin
            in_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_last_V_0_ack_out == 1'b1) & (in_V_last_V_0_vld_out == 1'b1))) begin
            in_V_last_V_0_sel_rd <= ~in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_last_V_0_ack_in == 1'b1) & (in_V_last_V_0_vld_in == 1'b1))) begin
            in_V_last_V_0_sel_wr <= ~in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_last_V_0_state == 2'd2) & (in_V_last_V_0_vld_in == 1'b0)) | ((in_V_last_V_0_state == 2'd3) & (in_V_last_V_0_vld_in == 1'b0) & (in_V_last_V_0_ack_out == 1'b1)))) begin
            in_V_last_V_0_state <= 2'd2;
        end else if ((((in_V_last_V_0_state == 2'd1) & (in_V_last_V_0_ack_out == 1'b0)) | ((in_V_last_V_0_state == 2'd3) & (in_V_last_V_0_ack_out == 1'b0) & (in_V_last_V_0_vld_in == 1'b1)))) begin
            in_V_last_V_0_state <= 2'd1;
        end else if (((~((in_V_last_V_0_vld_in == 1'b0) & (in_V_last_V_0_ack_out == 1'b1)) & ~((in_V_last_V_0_ack_out == 1'b0) & (in_V_last_V_0_vld_in == 1'b1)) & (in_V_last_V_0_state == 2'd3)) | ((in_V_last_V_0_state == 2'd1) & (in_V_last_V_0_ack_out == 1'b1)) | ((in_V_last_V_0_state == 2'd2) & (in_V_last_V_0_vld_in == 1'b1)))) begin
            in_V_last_V_0_state <= 2'd3;
        end else begin
            in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_strb_V_0_ack_out == 1'b1) & (in_V_strb_V_0_vld_out == 1'b1))) begin
            in_V_strb_V_0_sel_rd <= ~in_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_strb_V_0_ack_in == 1'b1) & (in_V_strb_V_0_vld_in == 1'b1))) begin
            in_V_strb_V_0_sel_wr <= ~in_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_strb_V_0_state == 2'd2) & (in_V_strb_V_0_vld_in == 1'b0)) | ((in_V_strb_V_0_state == 2'd3) & (in_V_strb_V_0_vld_in == 1'b0) & (in_V_strb_V_0_ack_out == 1'b1)))) begin
            in_V_strb_V_0_state <= 2'd2;
        end else if ((((in_V_strb_V_0_state == 2'd1) & (in_V_strb_V_0_ack_out == 1'b0)) | ((in_V_strb_V_0_state == 2'd3) & (in_V_strb_V_0_ack_out == 1'b0) & (in_V_strb_V_0_vld_in == 1'b1)))) begin
            in_V_strb_V_0_state <= 2'd1;
        end else if (((~((in_V_strb_V_0_vld_in == 1'b0) & (in_V_strb_V_0_ack_out == 1'b1)) & ~((in_V_strb_V_0_ack_out == 1'b0) & (in_V_strb_V_0_vld_in == 1'b1)) & (in_V_strb_V_0_state == 2'd3)) | ((in_V_strb_V_0_state == 2'd1) & (in_V_strb_V_0_ack_out == 1'b1)) | ((in_V_strb_V_0_state == 2'd2) & (in_V_strb_V_0_vld_in == 1'b1)))) begin
            in_V_strb_V_0_state <= 2'd3;
        end else begin
            in_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_user_V_0_ack_out == 1'b1) & (in_V_user_V_0_vld_out == 1'b1))) begin
            in_V_user_V_0_sel_rd <= ~in_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_user_V_0_ack_in == 1'b1) & (in_V_user_V_0_vld_in == 1'b1))) begin
            in_V_user_V_0_sel_wr <= ~in_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_user_V_0_state == 2'd2) & (in_V_user_V_0_vld_in == 1'b0)) | ((in_V_user_V_0_state == 2'd3) & (in_V_user_V_0_vld_in == 1'b0) & (in_V_user_V_0_ack_out == 1'b1)))) begin
            in_V_user_V_0_state <= 2'd2;
        end else if ((((in_V_user_V_0_state == 2'd1) & (in_V_user_V_0_ack_out == 1'b0)) | ((in_V_user_V_0_state == 2'd3) & (in_V_user_V_0_ack_out == 1'b0) & (in_V_user_V_0_vld_in == 1'b1)))) begin
            in_V_user_V_0_state <= 2'd1;
        end else if (((~((in_V_user_V_0_vld_in == 1'b0) & (in_V_user_V_0_ack_out == 1'b1)) & ~((in_V_user_V_0_ack_out == 1'b0) & (in_V_user_V_0_vld_in == 1'b1)) & (in_V_user_V_0_state == 2'd3)) | ((in_V_user_V_0_state == 2'd1) & (in_V_user_V_0_ack_out == 1'b1)) | ((in_V_user_V_0_state == 2'd2) & (in_V_user_V_0_vld_in == 1'b1)))) begin
            in_V_user_V_0_state <= 2'd3;
        end else begin
            in_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_data_V_1_ack_out == 1'b1) & (out_V_data_V_1_vld_out == 1'b1))) begin
            out_V_data_V_1_sel_rd <= ~out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_data_V_1_ack_in == 1'b1) & (out_V_data_V_1_vld_in == 1'b1))) begin
            out_V_data_V_1_sel_wr <= ~out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_data_V_1_state == 2'd2) & (out_V_data_V_1_vld_in == 1'b0)) | ((out_V_data_V_1_state == 2'd3) & (out_V_data_V_1_vld_in == 1'b0) & (out_V_data_V_1_ack_out == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd2;
        end else if ((((out_V_data_V_1_state == 2'd1) & (out_V_data_V_1_ack_out == 1'b0)) | ((out_V_data_V_1_state == 2'd3) & (out_V_data_V_1_ack_out == 1'b0) & (out_V_data_V_1_vld_in == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd1;
        end else if (((~((out_V_data_V_1_vld_in == 1'b0) & (out_V_data_V_1_ack_out == 1'b1)) & ~((out_V_data_V_1_ack_out == 1'b0) & (out_V_data_V_1_vld_in == 1'b1)) & (out_V_data_V_1_state == 2'd3)) | ((out_V_data_V_1_state == 2'd1) & (out_V_data_V_1_ack_out == 1'b1)) | ((out_V_data_V_1_state == 2'd2) & (out_V_data_V_1_vld_in == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd3;
        end else begin
            out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_dest_V_1_ack_out == 1'b1) & (out_V_dest_V_1_vld_out == 1'b1))) begin
            out_V_dest_V_1_sel_rd <= ~out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_dest_V_1_ack_in == 1'b1) & (out_V_dest_V_1_vld_in == 1'b1))) begin
            out_V_dest_V_1_sel_wr <= ~out_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_dest_V_1_state == 2'd2) & (out_V_dest_V_1_vld_in == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_V_dest_V_1_vld_in == 1'b0) & (out_V_dest_V_1_ack_out == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd2;
        end else if ((((out_V_dest_V_1_state == 2'd1) & (out_V_dest_V_1_ack_out == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_V_dest_V_1_ack_out == 1'b0) & (out_V_dest_V_1_vld_in == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd1;
        end else if (((~((out_V_dest_V_1_vld_in == 1'b0) & (out_V_dest_V_1_ack_out == 1'b1)) & ~((out_V_dest_V_1_ack_out == 1'b0) & (out_V_dest_V_1_vld_in == 1'b1)) & (out_V_dest_V_1_state == 2'd3)) | ((out_V_dest_V_1_state == 2'd1) & (out_V_dest_V_1_ack_out == 1'b1)) | ((out_V_dest_V_1_state == 2'd2) & (out_V_dest_V_1_vld_in == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd3;
        end else begin
            out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_id_V_1_ack_out == 1'b1) & (out_V_id_V_1_vld_out == 1'b1))) begin
            out_V_id_V_1_sel_rd <= ~out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_id_V_1_ack_in == 1'b1) & (out_V_id_V_1_vld_in == 1'b1))) begin
            out_V_id_V_1_sel_wr <= ~out_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_id_V_1_state == 2'd2) & (out_V_id_V_1_vld_in == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_V_id_V_1_vld_in == 1'b0) & (out_V_id_V_1_ack_out == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd2;
        end else if ((((out_V_id_V_1_state == 2'd1) & (out_V_id_V_1_ack_out == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_V_id_V_1_ack_out == 1'b0) & (out_V_id_V_1_vld_in == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd1;
        end else if (((~((out_V_id_V_1_vld_in == 1'b0) & (out_V_id_V_1_ack_out == 1'b1)) & ~((out_V_id_V_1_ack_out == 1'b0) & (out_V_id_V_1_vld_in == 1'b1)) & (out_V_id_V_1_state == 2'd3)) | ((out_V_id_V_1_state == 2'd1) & (out_V_id_V_1_ack_out == 1'b1)) | ((out_V_id_V_1_state == 2'd2) & (out_V_id_V_1_vld_in == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd3;
        end else begin
            out_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_keep_V_1_ack_out == 1'b1) & (out_V_keep_V_1_vld_out == 1'b1))) begin
            out_V_keep_V_1_sel_rd <= ~out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_keep_V_1_ack_in == 1'b1) & (out_V_keep_V_1_vld_in == 1'b1))) begin
            out_V_keep_V_1_sel_wr <= ~out_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_keep_V_1_state == 2'd2) & (out_V_keep_V_1_vld_in == 1'b0)) | ((out_V_keep_V_1_state == 2'd3) & (out_V_keep_V_1_vld_in == 1'b0) & (out_V_keep_V_1_ack_out == 1'b1)))) begin
            out_V_keep_V_1_state <= 2'd2;
        end else if ((((out_V_keep_V_1_state == 2'd1) & (out_V_keep_V_1_ack_out == 1'b0)) | ((out_V_keep_V_1_state == 2'd3) & (out_V_keep_V_1_ack_out == 1'b0) & (out_V_keep_V_1_vld_in == 1'b1)))) begin
            out_V_keep_V_1_state <= 2'd1;
        end else if (((~((out_V_keep_V_1_vld_in == 1'b0) & (out_V_keep_V_1_ack_out == 1'b1)) & ~((out_V_keep_V_1_ack_out == 1'b0) & (out_V_keep_V_1_vld_in == 1'b1)) & (out_V_keep_V_1_state == 2'd3)) | ((out_V_keep_V_1_state == 2'd1) & (out_V_keep_V_1_ack_out == 1'b1)) | ((out_V_keep_V_1_state == 2'd2) & (out_V_keep_V_1_vld_in == 1'b1)))) begin
            out_V_keep_V_1_state <= 2'd3;
        end else begin
            out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_last_V_1_ack_out == 1'b1) & (out_V_last_V_1_vld_out == 1'b1))) begin
            out_V_last_V_1_sel_rd <= ~out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_last_V_1_ack_in == 1'b1) & (out_V_last_V_1_vld_in == 1'b1))) begin
            out_V_last_V_1_sel_wr <= ~out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_last_V_1_state == 2'd2) & (out_V_last_V_1_vld_in == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_V_last_V_1_vld_in == 1'b0) & (out_V_last_V_1_ack_out == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd2;
        end else if ((((out_V_last_V_1_state == 2'd1) & (out_V_last_V_1_ack_out == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_V_last_V_1_ack_out == 1'b0) & (out_V_last_V_1_vld_in == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd1;
        end else if (((~((out_V_last_V_1_vld_in == 1'b0) & (out_V_last_V_1_ack_out == 1'b1)) & ~((out_V_last_V_1_ack_out == 1'b0) & (out_V_last_V_1_vld_in == 1'b1)) & (out_V_last_V_1_state == 2'd3)) | ((out_V_last_V_1_state == 2'd1) & (out_V_last_V_1_ack_out == 1'b1)) | ((out_V_last_V_1_state == 2'd2) & (out_V_last_V_1_vld_in == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd3;
        end else begin
            out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_strb_V_1_ack_out == 1'b1) & (out_V_strb_V_1_vld_out == 1'b1))) begin
            out_V_strb_V_1_sel_rd <= ~out_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_strb_V_1_ack_in == 1'b1) & (out_V_strb_V_1_vld_in == 1'b1))) begin
            out_V_strb_V_1_sel_wr <= ~out_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_strb_V_1_state == 2'd2) & (out_V_strb_V_1_vld_in == 1'b0)) | ((out_V_strb_V_1_state == 2'd3) & (out_V_strb_V_1_vld_in == 1'b0) & (out_V_strb_V_1_ack_out == 1'b1)))) begin
            out_V_strb_V_1_state <= 2'd2;
        end else if ((((out_V_strb_V_1_state == 2'd1) & (out_V_strb_V_1_ack_out == 1'b0)) | ((out_V_strb_V_1_state == 2'd3) & (out_V_strb_V_1_ack_out == 1'b0) & (out_V_strb_V_1_vld_in == 1'b1)))) begin
            out_V_strb_V_1_state <= 2'd1;
        end else if (((~((out_V_strb_V_1_vld_in == 1'b0) & (out_V_strb_V_1_ack_out == 1'b1)) & ~((out_V_strb_V_1_ack_out == 1'b0) & (out_V_strb_V_1_vld_in == 1'b1)) & (out_V_strb_V_1_state == 2'd3)) | ((out_V_strb_V_1_state == 2'd1) & (out_V_strb_V_1_ack_out == 1'b1)) | ((out_V_strb_V_1_state == 2'd2) & (out_V_strb_V_1_vld_in == 1'b1)))) begin
            out_V_strb_V_1_state <= 2'd3;
        end else begin
            out_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_user_V_1_ack_out == 1'b1) & (out_V_user_V_1_vld_out == 1'b1))) begin
            out_V_user_V_1_sel_rd <= ~out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_user_V_1_ack_in == 1'b1) & (out_V_user_V_1_vld_in == 1'b1))) begin
            out_V_user_V_1_sel_wr <= ~out_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_user_V_1_state == 2'd2) & (out_V_user_V_1_vld_in == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_V_user_V_1_vld_in == 1'b0) & (out_V_user_V_1_ack_out == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd2;
        end else if ((((out_V_user_V_1_state == 2'd1) & (out_V_user_V_1_ack_out == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_V_user_V_1_ack_out == 1'b0) & (out_V_user_V_1_vld_in == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd1;
        end else if (((~((out_V_user_V_1_vld_in == 1'b0) & (out_V_user_V_1_ack_out == 1'b1)) & ~((out_V_user_V_1_ack_out == 1'b0) & (out_V_user_V_1_vld_in == 1'b1)) & (out_V_user_V_1_state == 2'd3)) | ((out_V_user_V_1_state == 2'd1) & (out_V_user_V_1_ack_out == 1'b1)) | ((out_V_user_V_1_state == 2'd2) & (out_V_user_V_1_vld_in == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd3;
        end else begin
            out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_data_V_0_load_A == 1'b1)) begin
        in_V_data_V_0_payload_A <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_data_V_0_load_B == 1'b1)) begin
        in_V_data_V_0_payload_B <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_dest_V_0_load_A == 1'b1)) begin
        in_V_dest_V_0_payload_A <= in_r_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_dest_V_0_load_B == 1'b1)) begin
        in_V_dest_V_0_payload_B <= in_r_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_id_V_0_load_A == 1'b1)) begin
        in_V_id_V_0_payload_A <= in_r_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_id_V_0_load_B == 1'b1)) begin
        in_V_id_V_0_payload_B <= in_r_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_keep_V_0_load_A == 1'b1)) begin
        in_V_keep_V_0_payload_A <= in_r_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_keep_V_0_load_B == 1'b1)) begin
        in_V_keep_V_0_payload_B <= in_r_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_last_V_0_load_A == 1'b1)) begin
        in_V_last_V_0_payload_A <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_last_V_0_load_B == 1'b1)) begin
        in_V_last_V_0_payload_B <= in_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_strb_V_0_load_A == 1'b1)) begin
        in_V_strb_V_0_payload_A <= in_r_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_strb_V_0_load_B == 1'b1)) begin
        in_V_strb_V_0_payload_B <= in_r_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_user_V_0_load_A == 1'b1)) begin
        in_V_user_V_0_payload_A <= in_r_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_user_V_0_load_B == 1'b1)) begin
        in_V_user_V_0_payload_B <= in_r_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_data_V_1_load_A == 1'b1)) begin
        out_V_data_V_1_payload_A <= grp_mem_write_fu_76_out_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_data_V_1_load_B == 1'b1)) begin
        out_V_data_V_1_payload_B <= grp_mem_write_fu_76_out_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_dest_V_1_load_A == 1'b1)) begin
        out_V_dest_V_1_payload_A <= grp_mem_write_fu_76_out_r_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_dest_V_1_load_B == 1'b1)) begin
        out_V_dest_V_1_payload_B <= grp_mem_write_fu_76_out_r_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_id_V_1_load_A == 1'b1)) begin
        out_V_id_V_1_payload_A <= grp_mem_write_fu_76_out_r_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_id_V_1_load_B == 1'b1)) begin
        out_V_id_V_1_payload_B <= grp_mem_write_fu_76_out_r_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_keep_V_1_load_A == 1'b1)) begin
        out_V_keep_V_1_payload_A <= grp_mem_write_fu_76_out_r_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_keep_V_1_load_B == 1'b1)) begin
        out_V_keep_V_1_payload_B <= grp_mem_write_fu_76_out_r_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_last_V_1_load_A == 1'b1)) begin
        out_V_last_V_1_payload_A <= grp_mem_write_fu_76_out_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_last_V_1_load_B == 1'b1)) begin
        out_V_last_V_1_payload_B <= grp_mem_write_fu_76_out_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_strb_V_1_load_A == 1'b1)) begin
        out_V_strb_V_1_payload_A <= grp_mem_write_fu_76_out_r_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_strb_V_1_load_B == 1'b1)) begin
        out_V_strb_V_1_payload_B <= grp_mem_write_fu_76_out_r_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_user_V_1_load_A == 1'b1)) begin
        out_V_user_V_1_payload_A <= grp_mem_write_fu_76_out_r_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_user_V_1_load_B == 1'b1)) begin
        out_V_user_V_1_payload_B <= grp_mem_write_fu_76_out_r_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_8_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_1_reg_142 <= tmp_1_fu_130_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_8_fu_119_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_2_reg_137 <= tmp_2_fu_125_p1;
    end
end

always @ (*) begin
    if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((in_V_data_V_0_sel == 1'b1)) begin
        in_V_data_V_0_data_out = in_V_data_V_0_payload_B;
    end else begin
        in_V_data_V_0_data_out = in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((in_V_dest_V_0_sel == 1'b1)) begin
        in_V_dest_V_0_data_out = in_V_dest_V_0_payload_B;
    end else begin
        in_V_dest_V_0_data_out = in_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((in_V_id_V_0_sel == 1'b1)) begin
        in_V_id_V_0_data_out = in_V_id_V_0_payload_B;
    end else begin
        in_V_id_V_0_data_out = in_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((in_V_keep_V_0_sel == 1'b1)) begin
        in_V_keep_V_0_data_out = in_V_keep_V_0_payload_B;
    end else begin
        in_V_keep_V_0_data_out = in_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((in_V_last_V_0_sel == 1'b1)) begin
        in_V_last_V_0_data_out = in_V_last_V_0_payload_B;
    end else begin
        in_V_last_V_0_data_out = in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((in_V_strb_V_0_sel == 1'b1)) begin
        in_V_strb_V_0_data_out = in_V_strb_V_0_payload_B;
    end else begin
        in_V_strb_V_0_data_out = in_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((in_V_user_V_0_sel == 1'b1)) begin
        in_V_user_V_0_data_out = in_V_user_V_0_payload_B;
    end else begin
        in_V_user_V_0_data_out = in_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((out_V_data_V_1_sel == 1'b1)) begin
        out_V_data_V_1_data_out = out_V_data_V_1_payload_B;
    end else begin
        out_V_data_V_1_data_out = out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_V_dest_V_1_sel == 1'b1)) begin
        out_V_dest_V_1_data_out = out_V_dest_V_1_payload_B;
    end else begin
        out_V_dest_V_1_data_out = out_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_V_id_V_1_sel == 1'b1)) begin
        out_V_id_V_1_data_out = out_V_id_V_1_payload_B;
    end else begin
        out_V_id_V_1_data_out = out_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_V_keep_V_1_sel == 1'b1)) begin
        out_V_keep_V_1_data_out = out_V_keep_V_1_payload_B;
    end else begin
        out_V_keep_V_1_data_out = out_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_V_last_V_1_sel == 1'b1)) begin
        out_V_last_V_1_data_out = out_V_last_V_1_payload_B;
    end else begin
        out_V_last_V_1_data_out = out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_V_strb_V_1_sel == 1'b1)) begin
        out_V_strb_V_1_data_out = out_V_strb_V_1_payload_B;
    end else begin
        out_V_strb_V_1_data_out = out_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((out_V_user_V_1_sel == 1'b1)) begin
        out_V_user_V_1_data_out = out_V_user_V_1_payload_B;
    end else begin
        out_V_user_V_1_data_out = out_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_8_fu_119_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (tmp_8_fu_119_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call2 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_mem_read_fu_97_ap_done == 1'b0) | (grp_mem_write_fu_76_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state3_on_subcall_done = ((tmp_1_reg_142 == 1'd1) & (grp_mem_read_fu_97_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((out_V_dest_V_1_ack_in == 1'b0) | (out_V_id_V_1_ack_in == 1'b0) | (out_V_last_V_1_ack_in == 1'b0) | (out_V_user_V_1_ack_in == 1'b0) | (out_V_strb_V_1_ack_in == 1'b0) | (out_V_keep_V_1_ack_in == 1'b0) | (out_V_data_V_1_ack_in == 1'b0));
end

assign grp_mem_read_fu_97_ap_start = ap_reg_grp_mem_read_fu_97_ap_start;

assign grp_mem_read_fu_97_in_r_TVALID = in_V_dest_V_0_state[1'd0];

assign grp_mem_write_fu_76_ap_start = ap_reg_grp_mem_write_fu_76_ap_start;

assign grp_mem_write_fu_76_out_r_TREADY = out_V_dest_V_1_state[1'd1];

assign in_V_data_V_0_ack_in = in_V_data_V_0_state[1'd1];

assign in_V_data_V_0_ack_out = grp_mem_read_fu_97_in_r_TREADY;

assign in_V_data_V_0_load_A = (in_V_data_V_0_state_cmp_full & ~in_V_data_V_0_sel_wr);

assign in_V_data_V_0_load_B = (in_V_data_V_0_state_cmp_full & in_V_data_V_0_sel_wr);

assign in_V_data_V_0_sel = in_V_data_V_0_sel_rd;

assign in_V_data_V_0_state_cmp_full = ((in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_data_V_0_vld_in = in_r_TVALID;

assign in_V_data_V_0_vld_out = in_V_data_V_0_state[1'd0];

assign in_V_dest_V_0_ack_in = in_V_dest_V_0_state[1'd1];

assign in_V_dest_V_0_ack_out = grp_mem_read_fu_97_in_r_TREADY;

assign in_V_dest_V_0_load_A = (in_V_dest_V_0_state_cmp_full & ~in_V_dest_V_0_sel_wr);

assign in_V_dest_V_0_load_B = (in_V_dest_V_0_state_cmp_full & in_V_dest_V_0_sel_wr);

assign in_V_dest_V_0_sel = in_V_dest_V_0_sel_rd;

assign in_V_dest_V_0_state_cmp_full = ((in_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_dest_V_0_vld_in = in_r_TVALID;

assign in_V_dest_V_0_vld_out = in_V_dest_V_0_state[1'd0];

assign in_V_id_V_0_ack_in = in_V_id_V_0_state[1'd1];

assign in_V_id_V_0_ack_out = grp_mem_read_fu_97_in_r_TREADY;

assign in_V_id_V_0_load_A = (in_V_id_V_0_state_cmp_full & ~in_V_id_V_0_sel_wr);

assign in_V_id_V_0_load_B = (in_V_id_V_0_state_cmp_full & in_V_id_V_0_sel_wr);

assign in_V_id_V_0_sel = in_V_id_V_0_sel_rd;

assign in_V_id_V_0_state_cmp_full = ((in_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_id_V_0_vld_in = in_r_TVALID;

assign in_V_id_V_0_vld_out = in_V_id_V_0_state[1'd0];

assign in_V_keep_V_0_ack_in = in_V_keep_V_0_state[1'd1];

assign in_V_keep_V_0_ack_out = grp_mem_read_fu_97_in_r_TREADY;

assign in_V_keep_V_0_load_A = (in_V_keep_V_0_state_cmp_full & ~in_V_keep_V_0_sel_wr);

assign in_V_keep_V_0_load_B = (in_V_keep_V_0_state_cmp_full & in_V_keep_V_0_sel_wr);

assign in_V_keep_V_0_sel = in_V_keep_V_0_sel_rd;

assign in_V_keep_V_0_state_cmp_full = ((in_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_keep_V_0_vld_in = in_r_TVALID;

assign in_V_keep_V_0_vld_out = in_V_keep_V_0_state[1'd0];

assign in_V_last_V_0_ack_in = in_V_last_V_0_state[1'd1];

assign in_V_last_V_0_ack_out = grp_mem_read_fu_97_in_r_TREADY;

assign in_V_last_V_0_load_A = (in_V_last_V_0_state_cmp_full & ~in_V_last_V_0_sel_wr);

assign in_V_last_V_0_load_B = (in_V_last_V_0_state_cmp_full & in_V_last_V_0_sel_wr);

assign in_V_last_V_0_sel = in_V_last_V_0_sel_rd;

assign in_V_last_V_0_state_cmp_full = ((in_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_last_V_0_vld_in = in_r_TVALID;

assign in_V_last_V_0_vld_out = in_V_last_V_0_state[1'd0];

assign in_V_strb_V_0_ack_in = in_V_strb_V_0_state[1'd1];

assign in_V_strb_V_0_ack_out = grp_mem_read_fu_97_in_r_TREADY;

assign in_V_strb_V_0_load_A = (in_V_strb_V_0_state_cmp_full & ~in_V_strb_V_0_sel_wr);

assign in_V_strb_V_0_load_B = (in_V_strb_V_0_state_cmp_full & in_V_strb_V_0_sel_wr);

assign in_V_strb_V_0_sel = in_V_strb_V_0_sel_rd;

assign in_V_strb_V_0_state_cmp_full = ((in_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_strb_V_0_vld_in = in_r_TVALID;

assign in_V_strb_V_0_vld_out = in_V_strb_V_0_state[1'd0];

assign in_V_user_V_0_ack_in = in_V_user_V_0_state[1'd1];

assign in_V_user_V_0_ack_out = grp_mem_read_fu_97_in_r_TREADY;

assign in_V_user_V_0_load_A = (in_V_user_V_0_state_cmp_full & ~in_V_user_V_0_sel_wr);

assign in_V_user_V_0_load_B = (in_V_user_V_0_state_cmp_full & in_V_user_V_0_sel_wr);

assign in_V_user_V_0_sel = in_V_user_V_0_sel_rd;

assign in_V_user_V_0_state_cmp_full = ((in_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_user_V_0_vld_in = in_r_TVALID;

assign in_V_user_V_0_vld_out = in_V_user_V_0_state[1'd0];

assign in_r_TREADY = in_V_dest_V_0_state[1'd1];

assign out_V_data_V_1_ack_in = out_V_data_V_1_state[1'd1];

assign out_V_data_V_1_ack_out = out_r_TREADY;

assign out_V_data_V_1_load_A = (out_V_data_V_1_state_cmp_full & ~out_V_data_V_1_sel_wr);

assign out_V_data_V_1_load_B = (out_V_data_V_1_state_cmp_full & out_V_data_V_1_sel_wr);

assign out_V_data_V_1_sel = out_V_data_V_1_sel_rd;

assign out_V_data_V_1_state_cmp_full = ((out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_data_V_1_vld_in = grp_mem_write_fu_76_out_r_TVALID;

assign out_V_data_V_1_vld_out = out_V_data_V_1_state[1'd0];

assign out_V_dest_V_1_ack_in = out_V_dest_V_1_state[1'd1];

assign out_V_dest_V_1_ack_out = out_r_TREADY;

assign out_V_dest_V_1_load_A = (out_V_dest_V_1_state_cmp_full & ~out_V_dest_V_1_sel_wr);

assign out_V_dest_V_1_load_B = (out_V_dest_V_1_state_cmp_full & out_V_dest_V_1_sel_wr);

assign out_V_dest_V_1_sel = out_V_dest_V_1_sel_rd;

assign out_V_dest_V_1_state_cmp_full = ((out_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_dest_V_1_vld_in = grp_mem_write_fu_76_out_r_TVALID;

assign out_V_dest_V_1_vld_out = out_V_dest_V_1_state[1'd0];

assign out_V_id_V_1_ack_in = out_V_id_V_1_state[1'd1];

assign out_V_id_V_1_ack_out = out_r_TREADY;

assign out_V_id_V_1_load_A = (out_V_id_V_1_state_cmp_full & ~out_V_id_V_1_sel_wr);

assign out_V_id_V_1_load_B = (out_V_id_V_1_state_cmp_full & out_V_id_V_1_sel_wr);

assign out_V_id_V_1_sel = out_V_id_V_1_sel_rd;

assign out_V_id_V_1_state_cmp_full = ((out_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_id_V_1_vld_in = grp_mem_write_fu_76_out_r_TVALID;

assign out_V_id_V_1_vld_out = out_V_id_V_1_state[1'd0];

assign out_V_keep_V_1_ack_in = out_V_keep_V_1_state[1'd1];

assign out_V_keep_V_1_ack_out = out_r_TREADY;

assign out_V_keep_V_1_load_A = (out_V_keep_V_1_state_cmp_full & ~out_V_keep_V_1_sel_wr);

assign out_V_keep_V_1_load_B = (out_V_keep_V_1_state_cmp_full & out_V_keep_V_1_sel_wr);

assign out_V_keep_V_1_sel = out_V_keep_V_1_sel_rd;

assign out_V_keep_V_1_state_cmp_full = ((out_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_keep_V_1_vld_in = grp_mem_write_fu_76_out_r_TVALID;

assign out_V_keep_V_1_vld_out = out_V_keep_V_1_state[1'd0];

assign out_V_last_V_1_ack_in = out_V_last_V_1_state[1'd1];

assign out_V_last_V_1_ack_out = out_r_TREADY;

assign out_V_last_V_1_load_A = (out_V_last_V_1_state_cmp_full & ~out_V_last_V_1_sel_wr);

assign out_V_last_V_1_load_B = (out_V_last_V_1_state_cmp_full & out_V_last_V_1_sel_wr);

assign out_V_last_V_1_sel = out_V_last_V_1_sel_rd;

assign out_V_last_V_1_state_cmp_full = ((out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_last_V_1_vld_in = grp_mem_write_fu_76_out_r_TVALID;

assign out_V_last_V_1_vld_out = out_V_last_V_1_state[1'd0];

assign out_V_strb_V_1_ack_in = out_V_strb_V_1_state[1'd1];

assign out_V_strb_V_1_ack_out = out_r_TREADY;

assign out_V_strb_V_1_load_A = (out_V_strb_V_1_state_cmp_full & ~out_V_strb_V_1_sel_wr);

assign out_V_strb_V_1_load_B = (out_V_strb_V_1_state_cmp_full & out_V_strb_V_1_sel_wr);

assign out_V_strb_V_1_sel = out_V_strb_V_1_sel_rd;

assign out_V_strb_V_1_state_cmp_full = ((out_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_strb_V_1_vld_in = grp_mem_write_fu_76_out_r_TVALID;

assign out_V_strb_V_1_vld_out = out_V_strb_V_1_state[1'd0];

assign out_V_user_V_1_ack_in = out_V_user_V_1_state[1'd1];

assign out_V_user_V_1_ack_out = out_r_TREADY;

assign out_V_user_V_1_load_A = (out_V_user_V_1_state_cmp_full & ~out_V_user_V_1_sel_wr);

assign out_V_user_V_1_load_B = (out_V_user_V_1_state_cmp_full & out_V_user_V_1_sel_wr);

assign out_V_user_V_1_sel = out_V_user_V_1_sel_rd;

assign out_V_user_V_1_state_cmp_full = ((out_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_user_V_1_vld_in = grp_mem_write_fu_76_out_r_TVALID;

assign out_V_user_V_1_vld_out = out_V_user_V_1_state[1'd0];

assign out_r_TDATA = out_V_data_V_1_data_out;

assign out_r_TDEST = out_V_dest_V_1_data_out;

assign out_r_TID = out_V_id_V_1_data_out;

assign out_r_TKEEP = out_V_keep_V_1_data_out;

assign out_r_TLAST = out_V_last_V_1_data_out;

assign out_r_TSTRB = out_V_strb_V_1_data_out;

assign out_r_TUSER = out_V_user_V_1_data_out;

assign out_r_TVALID = out_V_dest_V_1_state[1'd0];

assign test_init_arr_V_address0 = grp_mem_write_fu_76_test_init_arr_V_address0;

assign test_init_arr_V_ce0 = grp_mem_write_fu_76_test_init_arr_V_ce0;

assign tmp_1_fu_130_p1 = rw[0:0];

assign tmp_2_fu_125_p1 = mask[31:0];

assign tmp_8_fu_119_p2 = ((tmp_fu_115_p1 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_fu_115_p1 = rw[1:0];

endmodule //Block_proc
