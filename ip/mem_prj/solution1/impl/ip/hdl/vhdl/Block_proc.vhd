-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rw : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    mask : IN STD_LOGIC_VECTOR (63 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    test_init_arr_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    test_init_arr_V_ce0 : OUT STD_LOGIC;
    test_init_arr_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of Block_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_V_data_V_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal in_V_data_V_0_vld_in : STD_LOGIC;
    signal in_V_data_V_0_vld_out : STD_LOGIC;
    signal in_V_data_V_0_ack_in : STD_LOGIC;
    signal in_V_data_V_0_ack_out : STD_LOGIC;
    signal in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal in_V_data_V_0_sel : STD_LOGIC;
    signal in_V_data_V_0_load_A : STD_LOGIC;
    signal in_V_data_V_0_load_B : STD_LOGIC;
    signal in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal in_V_keep_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal in_V_keep_V_0_vld_in : STD_LOGIC;
    signal in_V_keep_V_0_vld_out : STD_LOGIC;
    signal in_V_keep_V_0_ack_in : STD_LOGIC;
    signal in_V_keep_V_0_ack_out : STD_LOGIC;
    signal in_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal in_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal in_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal in_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal in_V_keep_V_0_sel : STD_LOGIC;
    signal in_V_keep_V_0_load_A : STD_LOGIC;
    signal in_V_keep_V_0_load_B : STD_LOGIC;
    signal in_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal in_V_strb_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal in_V_strb_V_0_vld_in : STD_LOGIC;
    signal in_V_strb_V_0_vld_out : STD_LOGIC;
    signal in_V_strb_V_0_ack_in : STD_LOGIC;
    signal in_V_strb_V_0_ack_out : STD_LOGIC;
    signal in_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal in_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal in_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal in_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal in_V_strb_V_0_sel : STD_LOGIC;
    signal in_V_strb_V_0_load_A : STD_LOGIC;
    signal in_V_strb_V_0_load_B : STD_LOGIC;
    signal in_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal in_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_user_V_0_vld_in : STD_LOGIC;
    signal in_V_user_V_0_vld_out : STD_LOGIC;
    signal in_V_user_V_0_ack_in : STD_LOGIC;
    signal in_V_user_V_0_ack_out : STD_LOGIC;
    signal in_V_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal in_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal in_V_user_V_0_sel : STD_LOGIC;
    signal in_V_user_V_0_load_A : STD_LOGIC;
    signal in_V_user_V_0_load_B : STD_LOGIC;
    signal in_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal in_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_last_V_0_vld_in : STD_LOGIC;
    signal in_V_last_V_0_vld_out : STD_LOGIC;
    signal in_V_last_V_0_ack_in : STD_LOGIC;
    signal in_V_last_V_0_ack_out : STD_LOGIC;
    signal in_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal in_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal in_V_last_V_0_sel : STD_LOGIC;
    signal in_V_last_V_0_load_A : STD_LOGIC;
    signal in_V_last_V_0_load_B : STD_LOGIC;
    signal in_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal in_V_id_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_id_V_0_vld_in : STD_LOGIC;
    signal in_V_id_V_0_vld_out : STD_LOGIC;
    signal in_V_id_V_0_ack_in : STD_LOGIC;
    signal in_V_id_V_0_ack_out : STD_LOGIC;
    signal in_V_id_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_id_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal in_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal in_V_id_V_0_sel : STD_LOGIC;
    signal in_V_id_V_0_load_A : STD_LOGIC;
    signal in_V_id_V_0_load_B : STD_LOGIC;
    signal in_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal in_V_dest_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_dest_V_0_vld_in : STD_LOGIC;
    signal in_V_dest_V_0_vld_out : STD_LOGIC;
    signal in_V_dest_V_0_ack_in : STD_LOGIC;
    signal in_V_dest_V_0_ack_out : STD_LOGIC;
    signal in_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal in_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal in_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal in_V_dest_V_0_sel : STD_LOGIC;
    signal in_V_dest_V_0_load_A : STD_LOGIC;
    signal in_V_dest_V_0_load_B : STD_LOGIC;
    signal in_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal out_V_data_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal out_V_data_V_1_vld_in : STD_LOGIC;
    signal out_V_data_V_1_vld_out : STD_LOGIC;
    signal out_V_data_V_1_ack_in : STD_LOGIC;
    signal out_V_data_V_1_ack_out : STD_LOGIC;
    signal out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_data_V_1_sel : STD_LOGIC;
    signal out_V_data_V_1_load_A : STD_LOGIC;
    signal out_V_data_V_1_load_B : STD_LOGIC;
    signal out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal out_V_keep_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal out_V_keep_V_1_vld_in : STD_LOGIC;
    signal out_V_keep_V_1_vld_out : STD_LOGIC;
    signal out_V_keep_V_1_ack_in : STD_LOGIC;
    signal out_V_keep_V_1_ack_out : STD_LOGIC;
    signal out_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal out_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal out_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_keep_V_1_sel : STD_LOGIC;
    signal out_V_keep_V_1_load_A : STD_LOGIC;
    signal out_V_keep_V_1_load_B : STD_LOGIC;
    signal out_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal out_V_strb_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal out_V_strb_V_1_vld_in : STD_LOGIC;
    signal out_V_strb_V_1_vld_out : STD_LOGIC;
    signal out_V_strb_V_1_ack_in : STD_LOGIC;
    signal out_V_strb_V_1_ack_out : STD_LOGIC;
    signal out_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal out_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal out_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_strb_V_1_sel : STD_LOGIC;
    signal out_V_strb_V_1_load_A : STD_LOGIC;
    signal out_V_strb_V_1_load_B : STD_LOGIC;
    signal out_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal out_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_user_V_1_vld_in : STD_LOGIC;
    signal out_V_user_V_1_vld_out : STD_LOGIC;
    signal out_V_user_V_1_ack_in : STD_LOGIC;
    signal out_V_user_V_1_ack_out : STD_LOGIC;
    signal out_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_user_V_1_sel : STD_LOGIC;
    signal out_V_user_V_1_load_A : STD_LOGIC;
    signal out_V_user_V_1_load_B : STD_LOGIC;
    signal out_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_last_V_1_vld_in : STD_LOGIC;
    signal out_V_last_V_1_vld_out : STD_LOGIC;
    signal out_V_last_V_1_ack_in : STD_LOGIC;
    signal out_V_last_V_1_ack_out : STD_LOGIC;
    signal out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_last_V_1_sel : STD_LOGIC;
    signal out_V_last_V_1_load_A : STD_LOGIC;
    signal out_V_last_V_1_load_B : STD_LOGIC;
    signal out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal out_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_id_V_1_vld_in : STD_LOGIC;
    signal out_V_id_V_1_vld_out : STD_LOGIC;
    signal out_V_id_V_1_ack_in : STD_LOGIC;
    signal out_V_id_V_1_ack_out : STD_LOGIC;
    signal out_V_id_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_id_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_id_V_1_sel : STD_LOGIC;
    signal out_V_id_V_1_load_A : STD_LOGIC;
    signal out_V_id_V_1_load_B : STD_LOGIC;
    signal out_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal out_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_dest_V_1_vld_in : STD_LOGIC;
    signal out_V_dest_V_1_vld_out : STD_LOGIC;
    signal out_V_dest_V_1_ack_in : STD_LOGIC;
    signal out_V_dest_V_1_ack_out : STD_LOGIC;
    signal out_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_dest_V_1_sel : STD_LOGIC;
    signal out_V_dest_V_1_load_A : STD_LOGIC;
    signal out_V_dest_V_1_load_B : STD_LOGIC;
    signal out_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal tmp_2_fu_125_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_137 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_8_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_130_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_142 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mem_write_fu_76_ap_start : STD_LOGIC;
    signal grp_mem_write_fu_76_ap_done : STD_LOGIC;
    signal grp_mem_write_fu_76_ap_idle : STD_LOGIC;
    signal grp_mem_write_fu_76_ap_ready : STD_LOGIC;
    signal grp_mem_write_fu_76_out_r_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_mem_write_fu_76_out_r_TVALID : STD_LOGIC;
    signal grp_mem_write_fu_76_out_r_TREADY : STD_LOGIC;
    signal grp_mem_write_fu_76_out_r_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mem_write_fu_76_out_r_TSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mem_write_fu_76_out_r_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mem_write_fu_76_out_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mem_write_fu_76_out_r_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mem_write_fu_76_out_r_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mem_write_fu_76_test_init_arr_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_mem_write_fu_76_test_init_arr_V_ce0 : STD_LOGIC;
    signal grp_mem_read_fu_97_ap_start : STD_LOGIC;
    signal grp_mem_read_fu_97_ap_done : STD_LOGIC;
    signal grp_mem_read_fu_97_ap_idle : STD_LOGIC;
    signal grp_mem_read_fu_97_ap_ready : STD_LOGIC;
    signal grp_mem_read_fu_97_in_r_TVALID : STD_LOGIC;
    signal grp_mem_read_fu_97_in_r_TREADY : STD_LOGIC;
    signal ap_reg_grp_mem_write_fu_76_ap_start : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call2 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_reg_grp_mem_read_fu_97_ap_start : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call0 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_115_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_block_state3_on_subcall_done : BOOLEAN;

    component mem_write IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r_TVALID : OUT STD_LOGIC;
        out_r_TREADY : IN STD_LOGIC;
        out_r_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        mask : IN STD_LOGIC_VECTOR (31 downto 0);
        test_init_arr_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        test_init_arr_V_ce0 : OUT STD_LOGIC;
        test_init_arr_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component mem_read IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        in_r_TVALID : IN STD_LOGIC;
        in_r_TREADY : OUT STD_LOGIC;
        in_r_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_mem_write_fu_76 : component mem_write
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mem_write_fu_76_ap_start,
        ap_done => grp_mem_write_fu_76_ap_done,
        ap_idle => grp_mem_write_fu_76_ap_idle,
        ap_ready => grp_mem_write_fu_76_ap_ready,
        out_r_TDATA => grp_mem_write_fu_76_out_r_TDATA,
        out_r_TVALID => grp_mem_write_fu_76_out_r_TVALID,
        out_r_TREADY => grp_mem_write_fu_76_out_r_TREADY,
        out_r_TKEEP => grp_mem_write_fu_76_out_r_TKEEP,
        out_r_TSTRB => grp_mem_write_fu_76_out_r_TSTRB,
        out_r_TUSER => grp_mem_write_fu_76_out_r_TUSER,
        out_r_TLAST => grp_mem_write_fu_76_out_r_TLAST,
        out_r_TID => grp_mem_write_fu_76_out_r_TID,
        out_r_TDEST => grp_mem_write_fu_76_out_r_TDEST,
        mask => tmp_2_reg_137,
        test_init_arr_V_address0 => grp_mem_write_fu_76_test_init_arr_V_address0,
        test_init_arr_V_ce0 => grp_mem_write_fu_76_test_init_arr_V_ce0,
        test_init_arr_V_q0 => test_init_arr_V_q0);

    grp_mem_read_fu_97 : component mem_read
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mem_read_fu_97_ap_start,
        ap_done => grp_mem_read_fu_97_ap_done,
        ap_idle => grp_mem_read_fu_97_ap_idle,
        ap_ready => grp_mem_read_fu_97_ap_ready,
        in_r_TDATA => in_V_data_V_0_data_out,
        in_r_TVALID => grp_mem_read_fu_97_in_r_TVALID,
        in_r_TREADY => grp_mem_read_fu_97_in_r_TREADY,
        in_r_TKEEP => in_V_keep_V_0_data_out,
        in_r_TSTRB => in_V_strb_V_0_data_out,
        in_r_TUSER => in_V_user_V_0_data_out,
        in_r_TLAST => in_V_last_V_0_data_out,
        in_r_TID => in_V_id_V_0_data_out,
        in_r_TDEST => in_V_dest_V_0_data_out);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((out_V_dest_V_1_ack_in = ap_const_logic_0) or (out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_strb_V_1_ack_in = ap_const_logic_0) or (out_V_keep_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_mem_read_fu_97_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_mem_read_fu_97_ap_start <= ap_const_logic_0;
            else
                if (((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_1_fu_130_p1 = ap_const_lv1_1) and (tmp_8_fu_119_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_8_fu_119_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    ap_reg_grp_mem_read_fu_97_ap_start <= ap_const_logic_1;
                elsif ((grp_mem_read_fu_97_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_mem_read_fu_97_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_mem_write_fu_76_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_mem_write_fu_76_ap_start <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_8_fu_119_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_reg_grp_mem_write_fu_76_ap_start <= ap_const_logic_1;
                elsif ((grp_mem_write_fu_76_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_mem_write_fu_76_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_V_data_V_0_ack_out = ap_const_logic_1) and (in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        in_V_data_V_0_sel_rd <= not(in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_V_data_V_0_ack_in = ap_const_logic_1) and (in_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        in_V_data_V_0_sel_wr <= not(in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_V_data_V_0_state = ap_const_lv2_2) and (in_V_data_V_0_vld_in = ap_const_logic_0)) or ((in_V_data_V_0_state = ap_const_lv2_3) and (in_V_data_V_0_vld_in = ap_const_logic_0) and (in_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((in_V_data_V_0_state = ap_const_lv2_1) and (in_V_data_V_0_ack_out = ap_const_logic_0)) or ((in_V_data_V_0_state = ap_const_lv2_3) and (in_V_data_V_0_ack_out = ap_const_logic_0) and (in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_V_data_V_0_vld_in = ap_const_logic_0) and (in_V_data_V_0_ack_out = ap_const_logic_1))) and not(((in_V_data_V_0_ack_out = ap_const_logic_0) and (in_V_data_V_0_vld_in = ap_const_logic_1))) and (in_V_data_V_0_state = ap_const_lv2_3)) or ((in_V_data_V_0_state = ap_const_lv2_1) and (in_V_data_V_0_ack_out = ap_const_logic_1)) or ((in_V_data_V_0_state = ap_const_lv2_2) and (in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_V_dest_V_0_ack_out = ap_const_logic_1) and (in_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        in_V_dest_V_0_sel_rd <= not(in_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_V_dest_V_0_ack_in = ap_const_logic_1) and (in_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        in_V_dest_V_0_sel_wr <= not(in_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_V_dest_V_0_state = ap_const_lv2_2) and (in_V_dest_V_0_vld_in = ap_const_logic_0)) or ((in_V_dest_V_0_state = ap_const_lv2_3) and (in_V_dest_V_0_vld_in = ap_const_logic_0) and (in_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    in_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((in_V_dest_V_0_state = ap_const_lv2_1) and (in_V_dest_V_0_ack_out = ap_const_logic_0)) or ((in_V_dest_V_0_state = ap_const_lv2_3) and (in_V_dest_V_0_ack_out = ap_const_logic_0) and (in_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_V_dest_V_0_vld_in = ap_const_logic_0) and (in_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((in_V_dest_V_0_ack_out = ap_const_logic_0) and (in_V_dest_V_0_vld_in = ap_const_logic_1))) and (in_V_dest_V_0_state = ap_const_lv2_3)) or ((in_V_dest_V_0_state = ap_const_lv2_1) and (in_V_dest_V_0_ack_out = ap_const_logic_1)) or ((in_V_dest_V_0_state = ap_const_lv2_2) and (in_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    in_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_V_id_V_0_ack_out = ap_const_logic_1) and (in_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        in_V_id_V_0_sel_rd <= not(in_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_V_id_V_0_ack_in = ap_const_logic_1) and (in_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        in_V_id_V_0_sel_wr <= not(in_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_V_id_V_0_state = ap_const_lv2_2) and (in_V_id_V_0_vld_in = ap_const_logic_0)) or ((in_V_id_V_0_state = ap_const_lv2_3) and (in_V_id_V_0_vld_in = ap_const_logic_0) and (in_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    in_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((in_V_id_V_0_state = ap_const_lv2_1) and (in_V_id_V_0_ack_out = ap_const_logic_0)) or ((in_V_id_V_0_state = ap_const_lv2_3) and (in_V_id_V_0_ack_out = ap_const_logic_0) and (in_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_V_id_V_0_vld_in = ap_const_logic_0) and (in_V_id_V_0_ack_out = ap_const_logic_1))) and not(((in_V_id_V_0_ack_out = ap_const_logic_0) and (in_V_id_V_0_vld_in = ap_const_logic_1))) and (in_V_id_V_0_state = ap_const_lv2_3)) or ((in_V_id_V_0_state = ap_const_lv2_1) and (in_V_id_V_0_ack_out = ap_const_logic_1)) or ((in_V_id_V_0_state = ap_const_lv2_2) and (in_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    in_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_V_keep_V_0_vld_out = ap_const_logic_1) and (in_V_keep_V_0_ack_out = ap_const_logic_1))) then 
                                        in_V_keep_V_0_sel_rd <= not(in_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_V_keep_V_0_vld_in = ap_const_logic_1) and (in_V_keep_V_0_ack_in = ap_const_logic_1))) then 
                                        in_V_keep_V_0_sel_wr <= not(in_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_V_keep_V_0_state = ap_const_lv2_2) and (in_V_keep_V_0_vld_in = ap_const_logic_0)) or ((in_V_keep_V_0_state = ap_const_lv2_3) and (in_V_keep_V_0_vld_in = ap_const_logic_0) and (in_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    in_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((in_V_keep_V_0_state = ap_const_lv2_1) and (in_V_keep_V_0_ack_out = ap_const_logic_0)) or ((in_V_keep_V_0_state = ap_const_lv2_3) and (in_V_keep_V_0_ack_out = ap_const_logic_0) and (in_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_V_keep_V_0_vld_in = ap_const_logic_0) and (in_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((in_V_keep_V_0_ack_out = ap_const_logic_0) and (in_V_keep_V_0_vld_in = ap_const_logic_1))) and (in_V_keep_V_0_state = ap_const_lv2_3)) or ((in_V_keep_V_0_state = ap_const_lv2_1) and (in_V_keep_V_0_ack_out = ap_const_logic_1)) or ((in_V_keep_V_0_state = ap_const_lv2_2) and (in_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    in_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_V_last_V_0_ack_out = ap_const_logic_1) and (in_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        in_V_last_V_0_sel_rd <= not(in_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_V_last_V_0_ack_in = ap_const_logic_1) and (in_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        in_V_last_V_0_sel_wr <= not(in_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_V_last_V_0_state = ap_const_lv2_2) and (in_V_last_V_0_vld_in = ap_const_logic_0)) or ((in_V_last_V_0_state = ap_const_lv2_3) and (in_V_last_V_0_vld_in = ap_const_logic_0) and (in_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    in_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((in_V_last_V_0_state = ap_const_lv2_1) and (in_V_last_V_0_ack_out = ap_const_logic_0)) or ((in_V_last_V_0_state = ap_const_lv2_3) and (in_V_last_V_0_ack_out = ap_const_logic_0) and (in_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_V_last_V_0_vld_in = ap_const_logic_0) and (in_V_last_V_0_ack_out = ap_const_logic_1))) and not(((in_V_last_V_0_ack_out = ap_const_logic_0) and (in_V_last_V_0_vld_in = ap_const_logic_1))) and (in_V_last_V_0_state = ap_const_lv2_3)) or ((in_V_last_V_0_state = ap_const_lv2_1) and (in_V_last_V_0_ack_out = ap_const_logic_1)) or ((in_V_last_V_0_state = ap_const_lv2_2) and (in_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    in_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_V_strb_V_0_ack_out = ap_const_logic_1) and (in_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        in_V_strb_V_0_sel_rd <= not(in_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_V_strb_V_0_ack_in = ap_const_logic_1) and (in_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        in_V_strb_V_0_sel_wr <= not(in_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_V_strb_V_0_state = ap_const_lv2_2) and (in_V_strb_V_0_vld_in = ap_const_logic_0)) or ((in_V_strb_V_0_state = ap_const_lv2_3) and (in_V_strb_V_0_vld_in = ap_const_logic_0) and (in_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    in_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((in_V_strb_V_0_state = ap_const_lv2_1) and (in_V_strb_V_0_ack_out = ap_const_logic_0)) or ((in_V_strb_V_0_state = ap_const_lv2_3) and (in_V_strb_V_0_ack_out = ap_const_logic_0) and (in_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_V_strb_V_0_vld_in = ap_const_logic_0) and (in_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((in_V_strb_V_0_ack_out = ap_const_logic_0) and (in_V_strb_V_0_vld_in = ap_const_logic_1))) and (in_V_strb_V_0_state = ap_const_lv2_3)) or ((in_V_strb_V_0_state = ap_const_lv2_1) and (in_V_strb_V_0_ack_out = ap_const_logic_1)) or ((in_V_strb_V_0_state = ap_const_lv2_2) and (in_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    in_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_V_user_V_0_ack_out = ap_const_logic_1) and (in_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        in_V_user_V_0_sel_rd <= not(in_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_V_user_V_0_ack_in = ap_const_logic_1) and (in_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        in_V_user_V_0_sel_wr <= not(in_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_V_user_V_0_state = ap_const_lv2_2) and (in_V_user_V_0_vld_in = ap_const_logic_0)) or ((in_V_user_V_0_state = ap_const_lv2_3) and (in_V_user_V_0_vld_in = ap_const_logic_0) and (in_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    in_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((in_V_user_V_0_state = ap_const_lv2_1) and (in_V_user_V_0_ack_out = ap_const_logic_0)) or ((in_V_user_V_0_state = ap_const_lv2_3) and (in_V_user_V_0_ack_out = ap_const_logic_0) and (in_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_V_user_V_0_vld_in = ap_const_logic_0) and (in_V_user_V_0_ack_out = ap_const_logic_1))) and not(((in_V_user_V_0_ack_out = ap_const_logic_0) and (in_V_user_V_0_vld_in = ap_const_logic_1))) and (in_V_user_V_0_state = ap_const_lv2_3)) or ((in_V_user_V_0_state = ap_const_lv2_1) and (in_V_user_V_0_ack_out = ap_const_logic_1)) or ((in_V_user_V_0_state = ap_const_lv2_2) and (in_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    in_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    in_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_data_V_1_ack_out = ap_const_logic_1) and (out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_data_V_1_sel_rd <= not(out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_V_data_V_1_ack_in = ap_const_logic_1) and (out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        out_V_data_V_1_sel_wr <= not(out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_data_V_1_state = ap_const_lv2_2) and (out_V_data_V_1_vld_in = ap_const_logic_0)) or ((out_V_data_V_1_state = ap_const_lv2_3) and (out_V_data_V_1_vld_in = ap_const_logic_0) and (out_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_data_V_1_state = ap_const_lv2_1) and (out_V_data_V_1_ack_out = ap_const_logic_0)) or ((out_V_data_V_1_state = ap_const_lv2_3) and (out_V_data_V_1_ack_out = ap_const_logic_0) and (out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_data_V_1_vld_in = ap_const_logic_0) and (out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((out_V_data_V_1_ack_out = ap_const_logic_0) and (out_V_data_V_1_vld_in = ap_const_logic_1))) and (out_V_data_V_1_state = ap_const_lv2_3)) or ((out_V_data_V_1_state = ap_const_lv2_1) and (out_V_data_V_1_ack_out = ap_const_logic_1)) or ((out_V_data_V_1_state = ap_const_lv2_2) and (out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_dest_V_1_ack_out = ap_const_logic_1) and (out_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_dest_V_1_sel_rd <= not(out_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_V_dest_V_1_ack_in = ap_const_logic_1) and (out_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        out_V_dest_V_1_sel_wr <= not(out_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_dest_V_1_state = ap_const_lv2_2) and (out_V_dest_V_1_vld_in = ap_const_logic_0)) or ((out_V_dest_V_1_state = ap_const_lv2_3) and (out_V_dest_V_1_vld_in = ap_const_logic_0) and (out_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_dest_V_1_state = ap_const_lv2_1) and (out_V_dest_V_1_ack_out = ap_const_logic_0)) or ((out_V_dest_V_1_state = ap_const_lv2_3) and (out_V_dest_V_1_ack_out = ap_const_logic_0) and (out_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_dest_V_1_vld_in = ap_const_logic_0) and (out_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((out_V_dest_V_1_ack_out = ap_const_logic_0) and (out_V_dest_V_1_vld_in = ap_const_logic_1))) and (out_V_dest_V_1_state = ap_const_lv2_3)) or ((out_V_dest_V_1_state = ap_const_lv2_1) and (out_V_dest_V_1_ack_out = ap_const_logic_1)) or ((out_V_dest_V_1_state = ap_const_lv2_2) and (out_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_id_V_1_ack_out = ap_const_logic_1) and (out_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_id_V_1_sel_rd <= not(out_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_V_id_V_1_ack_in = ap_const_logic_1) and (out_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        out_V_id_V_1_sel_wr <= not(out_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_id_V_1_state = ap_const_lv2_2) and (out_V_id_V_1_vld_in = ap_const_logic_0)) or ((out_V_id_V_1_state = ap_const_lv2_3) and (out_V_id_V_1_vld_in = ap_const_logic_0) and (out_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_id_V_1_state = ap_const_lv2_1) and (out_V_id_V_1_ack_out = ap_const_logic_0)) or ((out_V_id_V_1_state = ap_const_lv2_3) and (out_V_id_V_1_ack_out = ap_const_logic_0) and (out_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_id_V_1_vld_in = ap_const_logic_0) and (out_V_id_V_1_ack_out = ap_const_logic_1))) and not(((out_V_id_V_1_ack_out = ap_const_logic_0) and (out_V_id_V_1_vld_in = ap_const_logic_1))) and (out_V_id_V_1_state = ap_const_lv2_3)) or ((out_V_id_V_1_state = ap_const_lv2_1) and (out_V_id_V_1_ack_out = ap_const_logic_1)) or ((out_V_id_V_1_state = ap_const_lv2_2) and (out_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_keep_V_1_ack_out = ap_const_logic_1) and (out_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_keep_V_1_sel_rd <= not(out_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_V_keep_V_1_ack_in = ap_const_logic_1) and (out_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        out_V_keep_V_1_sel_wr <= not(out_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_keep_V_1_state = ap_const_lv2_2) and (out_V_keep_V_1_vld_in = ap_const_logic_0)) or ((out_V_keep_V_1_state = ap_const_lv2_3) and (out_V_keep_V_1_vld_in = ap_const_logic_0) and (out_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_keep_V_1_state = ap_const_lv2_1) and (out_V_keep_V_1_ack_out = ap_const_logic_0)) or ((out_V_keep_V_1_state = ap_const_lv2_3) and (out_V_keep_V_1_ack_out = ap_const_logic_0) and (out_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_keep_V_1_vld_in = ap_const_logic_0) and (out_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((out_V_keep_V_1_ack_out = ap_const_logic_0) and (out_V_keep_V_1_vld_in = ap_const_logic_1))) and (out_V_keep_V_1_state = ap_const_lv2_3)) or ((out_V_keep_V_1_state = ap_const_lv2_1) and (out_V_keep_V_1_ack_out = ap_const_logic_1)) or ((out_V_keep_V_1_state = ap_const_lv2_2) and (out_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_last_V_1_ack_out = ap_const_logic_1) and (out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_last_V_1_sel_rd <= not(out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_V_last_V_1_ack_in = ap_const_logic_1) and (out_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        out_V_last_V_1_sel_wr <= not(out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_last_V_1_state = ap_const_lv2_2) and (out_V_last_V_1_vld_in = ap_const_logic_0)) or ((out_V_last_V_1_state = ap_const_lv2_3) and (out_V_last_V_1_vld_in = ap_const_logic_0) and (out_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_last_V_1_state = ap_const_lv2_1) and (out_V_last_V_1_ack_out = ap_const_logic_0)) or ((out_V_last_V_1_state = ap_const_lv2_3) and (out_V_last_V_1_ack_out = ap_const_logic_0) and (out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_last_V_1_vld_in = ap_const_logic_0) and (out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((out_V_last_V_1_ack_out = ap_const_logic_0) and (out_V_last_V_1_vld_in = ap_const_logic_1))) and (out_V_last_V_1_state = ap_const_lv2_3)) or ((out_V_last_V_1_state = ap_const_lv2_1) and (out_V_last_V_1_ack_out = ap_const_logic_1)) or ((out_V_last_V_1_state = ap_const_lv2_2) and (out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_strb_V_1_ack_out = ap_const_logic_1) and (out_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_strb_V_1_sel_rd <= not(out_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_V_strb_V_1_ack_in = ap_const_logic_1) and (out_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        out_V_strb_V_1_sel_wr <= not(out_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_strb_V_1_state = ap_const_lv2_2) and (out_V_strb_V_1_vld_in = ap_const_logic_0)) or ((out_V_strb_V_1_state = ap_const_lv2_3) and (out_V_strb_V_1_vld_in = ap_const_logic_0) and (out_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_strb_V_1_state = ap_const_lv2_1) and (out_V_strb_V_1_ack_out = ap_const_logic_0)) or ((out_V_strb_V_1_state = ap_const_lv2_3) and (out_V_strb_V_1_ack_out = ap_const_logic_0) and (out_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_strb_V_1_vld_in = ap_const_logic_0) and (out_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((out_V_strb_V_1_ack_out = ap_const_logic_0) and (out_V_strb_V_1_vld_in = ap_const_logic_1))) and (out_V_strb_V_1_state = ap_const_lv2_3)) or ((out_V_strb_V_1_state = ap_const_lv2_1) and (out_V_strb_V_1_ack_out = ap_const_logic_1)) or ((out_V_strb_V_1_state = ap_const_lv2_2) and (out_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((out_V_user_V_1_ack_out = ap_const_logic_1) and (out_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        out_V_user_V_1_sel_rd <= not(out_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((out_V_user_V_1_ack_in = ap_const_logic_1) and (out_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        out_V_user_V_1_sel_wr <= not(out_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                out_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((out_V_user_V_1_state = ap_const_lv2_2) and (out_V_user_V_1_vld_in = ap_const_logic_0)) or ((out_V_user_V_1_state = ap_const_lv2_3) and (out_V_user_V_1_vld_in = ap_const_logic_0) and (out_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    out_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((out_V_user_V_1_state = ap_const_lv2_1) and (out_V_user_V_1_ack_out = ap_const_logic_0)) or ((out_V_user_V_1_state = ap_const_lv2_3) and (out_V_user_V_1_ack_out = ap_const_logic_0) and (out_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((out_V_user_V_1_vld_in = ap_const_logic_0) and (out_V_user_V_1_ack_out = ap_const_logic_1))) and not(((out_V_user_V_1_ack_out = ap_const_logic_0) and (out_V_user_V_1_vld_in = ap_const_logic_1))) and (out_V_user_V_1_state = ap_const_lv2_3)) or ((out_V_user_V_1_state = ap_const_lv2_1) and (out_V_user_V_1_ack_out = ap_const_logic_1)) or ((out_V_user_V_1_state = ap_const_lv2_2) and (out_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    out_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_data_V_0_load_A = ap_const_logic_1)) then
                in_V_data_V_0_payload_A <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_data_V_0_load_B = ap_const_logic_1)) then
                in_V_data_V_0_payload_B <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_dest_V_0_load_A = ap_const_logic_1)) then
                in_V_dest_V_0_payload_A <= in_r_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_dest_V_0_load_B = ap_const_logic_1)) then
                in_V_dest_V_0_payload_B <= in_r_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_id_V_0_load_A = ap_const_logic_1)) then
                in_V_id_V_0_payload_A <= in_r_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_id_V_0_load_B = ap_const_logic_1)) then
                in_V_id_V_0_payload_B <= in_r_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_keep_V_0_load_A = ap_const_logic_1)) then
                in_V_keep_V_0_payload_A <= in_r_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_keep_V_0_load_B = ap_const_logic_1)) then
                in_V_keep_V_0_payload_B <= in_r_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_last_V_0_load_A = ap_const_logic_1)) then
                in_V_last_V_0_payload_A <= in_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_last_V_0_load_B = ap_const_logic_1)) then
                in_V_last_V_0_payload_B <= in_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_strb_V_0_load_A = ap_const_logic_1)) then
                in_V_strb_V_0_payload_A <= in_r_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_strb_V_0_load_B = ap_const_logic_1)) then
                in_V_strb_V_0_payload_B <= in_r_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_user_V_0_load_A = ap_const_logic_1)) then
                in_V_user_V_0_payload_A <= in_r_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_V_user_V_0_load_B = ap_const_logic_1)) then
                in_V_user_V_0_payload_B <= in_r_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_data_V_1_load_A = ap_const_logic_1)) then
                out_V_data_V_1_payload_A <= grp_mem_write_fu_76_out_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_data_V_1_load_B = ap_const_logic_1)) then
                out_V_data_V_1_payload_B <= grp_mem_write_fu_76_out_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_dest_V_1_load_A = ap_const_logic_1)) then
                out_V_dest_V_1_payload_A <= grp_mem_write_fu_76_out_r_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_dest_V_1_load_B = ap_const_logic_1)) then
                out_V_dest_V_1_payload_B <= grp_mem_write_fu_76_out_r_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_id_V_1_load_A = ap_const_logic_1)) then
                out_V_id_V_1_payload_A <= grp_mem_write_fu_76_out_r_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_id_V_1_load_B = ap_const_logic_1)) then
                out_V_id_V_1_payload_B <= grp_mem_write_fu_76_out_r_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_keep_V_1_load_A = ap_const_logic_1)) then
                out_V_keep_V_1_payload_A <= grp_mem_write_fu_76_out_r_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_keep_V_1_load_B = ap_const_logic_1)) then
                out_V_keep_V_1_payload_B <= grp_mem_write_fu_76_out_r_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_last_V_1_load_A = ap_const_logic_1)) then
                out_V_last_V_1_payload_A <= grp_mem_write_fu_76_out_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_last_V_1_load_B = ap_const_logic_1)) then
                out_V_last_V_1_payload_B <= grp_mem_write_fu_76_out_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_strb_V_1_load_A = ap_const_logic_1)) then
                out_V_strb_V_1_payload_A <= grp_mem_write_fu_76_out_r_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_strb_V_1_load_B = ap_const_logic_1)) then
                out_V_strb_V_1_payload_B <= grp_mem_write_fu_76_out_r_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_user_V_1_load_A = ap_const_logic_1)) then
                out_V_user_V_1_payload_A <= grp_mem_write_fu_76_out_r_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((out_V_user_V_1_load_B = ap_const_logic_1)) then
                out_V_user_V_1_payload_B <= grp_mem_write_fu_76_out_r_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_8_fu_119_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_1_reg_142 <= tmp_1_fu_130_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_8_fu_119_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_2_reg_137 <= tmp_2_fu_125_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_V_data_V_1_ack_in, out_V_keep_V_1_ack_in, out_V_strb_V_1_ack_in, out_V_user_V_1_ack_in, out_V_last_V_1_ack_in, out_V_id_V_1_ack_in, out_V_dest_V_1_ack_in, tmp_8_fu_119_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_block_state2_on_subcall_done, ap_block_state3_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_8_fu_119_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (tmp_8_fu_119_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((out_V_dest_V_1_ack_in = ap_const_logic_0) or (out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_strb_V_1_ack_in = ap_const_logic_0) or (out_V_keep_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call0_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call2_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call2 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(grp_mem_write_fu_76_ap_done, grp_mem_read_fu_97_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_mem_read_fu_97_ap_done = ap_const_logic_0) or (grp_mem_write_fu_76_ap_done = ap_const_logic_0));
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(tmp_1_reg_142, grp_mem_read_fu_97_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((tmp_1_reg_142 = ap_const_lv1_1) and (grp_mem_read_fu_97_ap_done = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(out_V_data_V_1_ack_in, out_V_keep_V_1_ack_in, out_V_strb_V_1_ack_in, out_V_user_V_1_ack_in, out_V_last_V_1_ack_in, out_V_id_V_1_ack_in, out_V_dest_V_1_ack_in)
    begin
                ap_block_state4 <= ((out_V_dest_V_1_ack_in = ap_const_logic_0) or (out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_strb_V_1_ack_in = ap_const_logic_0) or (out_V_keep_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, out_V_data_V_1_ack_in, out_V_keep_V_1_ack_in, out_V_strb_V_1_ack_in, out_V_user_V_1_ack_in, out_V_last_V_1_ack_in, out_V_id_V_1_ack_in, out_V_dest_V_1_ack_in, ap_CS_fsm_state4)
    begin
        if ((not(((out_V_dest_V_1_ack_in = ap_const_logic_0) or (out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_strb_V_1_ack_in = ap_const_logic_0) or (out_V_keep_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_V_data_V_1_ack_in, out_V_keep_V_1_ack_in, out_V_strb_V_1_ack_in, out_V_user_V_1_ack_in, out_V_last_V_1_ack_in, out_V_id_V_1_ack_in, out_V_dest_V_1_ack_in, ap_CS_fsm_state4)
    begin
        if ((not(((out_V_dest_V_1_ack_in = ap_const_logic_0) or (out_V_id_V_1_ack_in = ap_const_logic_0) or (out_V_last_V_1_ack_in = ap_const_logic_0) or (out_V_user_V_1_ack_in = ap_const_logic_0) or (out_V_strb_V_1_ack_in = ap_const_logic_0) or (out_V_keep_V_1_ack_in = ap_const_logic_0) or (out_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_mem_read_fu_97_ap_start <= ap_reg_grp_mem_read_fu_97_ap_start;
    grp_mem_read_fu_97_in_r_TVALID <= in_V_dest_V_0_state(0);
    grp_mem_write_fu_76_ap_start <= ap_reg_grp_mem_write_fu_76_ap_start;
    grp_mem_write_fu_76_out_r_TREADY <= out_V_dest_V_1_state(1);
    in_V_data_V_0_ack_in <= in_V_data_V_0_state(1);
    in_V_data_V_0_ack_out <= grp_mem_read_fu_97_in_r_TREADY;

    in_V_data_V_0_data_out_assign_proc : process(in_V_data_V_0_payload_A, in_V_data_V_0_payload_B, in_V_data_V_0_sel)
    begin
        if ((in_V_data_V_0_sel = ap_const_logic_1)) then 
            in_V_data_V_0_data_out <= in_V_data_V_0_payload_B;
        else 
            in_V_data_V_0_data_out <= in_V_data_V_0_payload_A;
        end if; 
    end process;

    in_V_data_V_0_load_A <= (in_V_data_V_0_state_cmp_full and not(in_V_data_V_0_sel_wr));
    in_V_data_V_0_load_B <= (in_V_data_V_0_state_cmp_full and in_V_data_V_0_sel_wr);
    in_V_data_V_0_sel <= in_V_data_V_0_sel_rd;
    in_V_data_V_0_state_cmp_full <= '0' when (in_V_data_V_0_state = ap_const_lv2_1) else '1';
    in_V_data_V_0_vld_in <= in_r_TVALID;
    in_V_data_V_0_vld_out <= in_V_data_V_0_state(0);
    in_V_dest_V_0_ack_in <= in_V_dest_V_0_state(1);
    in_V_dest_V_0_ack_out <= grp_mem_read_fu_97_in_r_TREADY;

    in_V_dest_V_0_data_out_assign_proc : process(in_V_dest_V_0_payload_A, in_V_dest_V_0_payload_B, in_V_dest_V_0_sel)
    begin
        if ((in_V_dest_V_0_sel = ap_const_logic_1)) then 
            in_V_dest_V_0_data_out <= in_V_dest_V_0_payload_B;
        else 
            in_V_dest_V_0_data_out <= in_V_dest_V_0_payload_A;
        end if; 
    end process;

    in_V_dest_V_0_load_A <= (in_V_dest_V_0_state_cmp_full and not(in_V_dest_V_0_sel_wr));
    in_V_dest_V_0_load_B <= (in_V_dest_V_0_state_cmp_full and in_V_dest_V_0_sel_wr);
    in_V_dest_V_0_sel <= in_V_dest_V_0_sel_rd;
    in_V_dest_V_0_state_cmp_full <= '0' when (in_V_dest_V_0_state = ap_const_lv2_1) else '1';
    in_V_dest_V_0_vld_in <= in_r_TVALID;
    in_V_dest_V_0_vld_out <= in_V_dest_V_0_state(0);
    in_V_id_V_0_ack_in <= in_V_id_V_0_state(1);
    in_V_id_V_0_ack_out <= grp_mem_read_fu_97_in_r_TREADY;

    in_V_id_V_0_data_out_assign_proc : process(in_V_id_V_0_payload_A, in_V_id_V_0_payload_B, in_V_id_V_0_sel)
    begin
        if ((in_V_id_V_0_sel = ap_const_logic_1)) then 
            in_V_id_V_0_data_out <= in_V_id_V_0_payload_B;
        else 
            in_V_id_V_0_data_out <= in_V_id_V_0_payload_A;
        end if; 
    end process;

    in_V_id_V_0_load_A <= (in_V_id_V_0_state_cmp_full and not(in_V_id_V_0_sel_wr));
    in_V_id_V_0_load_B <= (in_V_id_V_0_state_cmp_full and in_V_id_V_0_sel_wr);
    in_V_id_V_0_sel <= in_V_id_V_0_sel_rd;
    in_V_id_V_0_state_cmp_full <= '0' when (in_V_id_V_0_state = ap_const_lv2_1) else '1';
    in_V_id_V_0_vld_in <= in_r_TVALID;
    in_V_id_V_0_vld_out <= in_V_id_V_0_state(0);
    in_V_keep_V_0_ack_in <= in_V_keep_V_0_state(1);
    in_V_keep_V_0_ack_out <= grp_mem_read_fu_97_in_r_TREADY;

    in_V_keep_V_0_data_out_assign_proc : process(in_V_keep_V_0_payload_A, in_V_keep_V_0_payload_B, in_V_keep_V_0_sel)
    begin
        if ((in_V_keep_V_0_sel = ap_const_logic_1)) then 
            in_V_keep_V_0_data_out <= in_V_keep_V_0_payload_B;
        else 
            in_V_keep_V_0_data_out <= in_V_keep_V_0_payload_A;
        end if; 
    end process;

    in_V_keep_V_0_load_A <= (in_V_keep_V_0_state_cmp_full and not(in_V_keep_V_0_sel_wr));
    in_V_keep_V_0_load_B <= (in_V_keep_V_0_state_cmp_full and in_V_keep_V_0_sel_wr);
    in_V_keep_V_0_sel <= in_V_keep_V_0_sel_rd;
    in_V_keep_V_0_state_cmp_full <= '0' when (in_V_keep_V_0_state = ap_const_lv2_1) else '1';
    in_V_keep_V_0_vld_in <= in_r_TVALID;
    in_V_keep_V_0_vld_out <= in_V_keep_V_0_state(0);
    in_V_last_V_0_ack_in <= in_V_last_V_0_state(1);
    in_V_last_V_0_ack_out <= grp_mem_read_fu_97_in_r_TREADY;

    in_V_last_V_0_data_out_assign_proc : process(in_V_last_V_0_payload_A, in_V_last_V_0_payload_B, in_V_last_V_0_sel)
    begin
        if ((in_V_last_V_0_sel = ap_const_logic_1)) then 
            in_V_last_V_0_data_out <= in_V_last_V_0_payload_B;
        else 
            in_V_last_V_0_data_out <= in_V_last_V_0_payload_A;
        end if; 
    end process;

    in_V_last_V_0_load_A <= (in_V_last_V_0_state_cmp_full and not(in_V_last_V_0_sel_wr));
    in_V_last_V_0_load_B <= (in_V_last_V_0_state_cmp_full and in_V_last_V_0_sel_wr);
    in_V_last_V_0_sel <= in_V_last_V_0_sel_rd;
    in_V_last_V_0_state_cmp_full <= '0' when (in_V_last_V_0_state = ap_const_lv2_1) else '1';
    in_V_last_V_0_vld_in <= in_r_TVALID;
    in_V_last_V_0_vld_out <= in_V_last_V_0_state(0);
    in_V_strb_V_0_ack_in <= in_V_strb_V_0_state(1);
    in_V_strb_V_0_ack_out <= grp_mem_read_fu_97_in_r_TREADY;

    in_V_strb_V_0_data_out_assign_proc : process(in_V_strb_V_0_payload_A, in_V_strb_V_0_payload_B, in_V_strb_V_0_sel)
    begin
        if ((in_V_strb_V_0_sel = ap_const_logic_1)) then 
            in_V_strb_V_0_data_out <= in_V_strb_V_0_payload_B;
        else 
            in_V_strb_V_0_data_out <= in_V_strb_V_0_payload_A;
        end if; 
    end process;

    in_V_strb_V_0_load_A <= (in_V_strb_V_0_state_cmp_full and not(in_V_strb_V_0_sel_wr));
    in_V_strb_V_0_load_B <= (in_V_strb_V_0_state_cmp_full and in_V_strb_V_0_sel_wr);
    in_V_strb_V_0_sel <= in_V_strb_V_0_sel_rd;
    in_V_strb_V_0_state_cmp_full <= '0' when (in_V_strb_V_0_state = ap_const_lv2_1) else '1';
    in_V_strb_V_0_vld_in <= in_r_TVALID;
    in_V_strb_V_0_vld_out <= in_V_strb_V_0_state(0);
    in_V_user_V_0_ack_in <= in_V_user_V_0_state(1);
    in_V_user_V_0_ack_out <= grp_mem_read_fu_97_in_r_TREADY;

    in_V_user_V_0_data_out_assign_proc : process(in_V_user_V_0_payload_A, in_V_user_V_0_payload_B, in_V_user_V_0_sel)
    begin
        if ((in_V_user_V_0_sel = ap_const_logic_1)) then 
            in_V_user_V_0_data_out <= in_V_user_V_0_payload_B;
        else 
            in_V_user_V_0_data_out <= in_V_user_V_0_payload_A;
        end if; 
    end process;

    in_V_user_V_0_load_A <= (in_V_user_V_0_state_cmp_full and not(in_V_user_V_0_sel_wr));
    in_V_user_V_0_load_B <= (in_V_user_V_0_state_cmp_full and in_V_user_V_0_sel_wr);
    in_V_user_V_0_sel <= in_V_user_V_0_sel_rd;
    in_V_user_V_0_state_cmp_full <= '0' when (in_V_user_V_0_state = ap_const_lv2_1) else '1';
    in_V_user_V_0_vld_in <= in_r_TVALID;
    in_V_user_V_0_vld_out <= in_V_user_V_0_state(0);
    in_r_TREADY <= in_V_dest_V_0_state(1);
    out_V_data_V_1_ack_in <= out_V_data_V_1_state(1);
    out_V_data_V_1_ack_out <= out_r_TREADY;

    out_V_data_V_1_data_out_assign_proc : process(out_V_data_V_1_payload_A, out_V_data_V_1_payload_B, out_V_data_V_1_sel)
    begin
        if ((out_V_data_V_1_sel = ap_const_logic_1)) then 
            out_V_data_V_1_data_out <= out_V_data_V_1_payload_B;
        else 
            out_V_data_V_1_data_out <= out_V_data_V_1_payload_A;
        end if; 
    end process;

    out_V_data_V_1_load_A <= (out_V_data_V_1_state_cmp_full and not(out_V_data_V_1_sel_wr));
    out_V_data_V_1_load_B <= (out_V_data_V_1_state_cmp_full and out_V_data_V_1_sel_wr);
    out_V_data_V_1_sel <= out_V_data_V_1_sel_rd;
    out_V_data_V_1_state_cmp_full <= '0' when (out_V_data_V_1_state = ap_const_lv2_1) else '1';
    out_V_data_V_1_vld_in <= grp_mem_write_fu_76_out_r_TVALID;
    out_V_data_V_1_vld_out <= out_V_data_V_1_state(0);
    out_V_dest_V_1_ack_in <= out_V_dest_V_1_state(1);
    out_V_dest_V_1_ack_out <= out_r_TREADY;

    out_V_dest_V_1_data_out_assign_proc : process(out_V_dest_V_1_payload_A, out_V_dest_V_1_payload_B, out_V_dest_V_1_sel)
    begin
        if ((out_V_dest_V_1_sel = ap_const_logic_1)) then 
            out_V_dest_V_1_data_out <= out_V_dest_V_1_payload_B;
        else 
            out_V_dest_V_1_data_out <= out_V_dest_V_1_payload_A;
        end if; 
    end process;

    out_V_dest_V_1_load_A <= (out_V_dest_V_1_state_cmp_full and not(out_V_dest_V_1_sel_wr));
    out_V_dest_V_1_load_B <= (out_V_dest_V_1_state_cmp_full and out_V_dest_V_1_sel_wr);
    out_V_dest_V_1_sel <= out_V_dest_V_1_sel_rd;
    out_V_dest_V_1_state_cmp_full <= '0' when (out_V_dest_V_1_state = ap_const_lv2_1) else '1';
    out_V_dest_V_1_vld_in <= grp_mem_write_fu_76_out_r_TVALID;
    out_V_dest_V_1_vld_out <= out_V_dest_V_1_state(0);
    out_V_id_V_1_ack_in <= out_V_id_V_1_state(1);
    out_V_id_V_1_ack_out <= out_r_TREADY;

    out_V_id_V_1_data_out_assign_proc : process(out_V_id_V_1_payload_A, out_V_id_V_1_payload_B, out_V_id_V_1_sel)
    begin
        if ((out_V_id_V_1_sel = ap_const_logic_1)) then 
            out_V_id_V_1_data_out <= out_V_id_V_1_payload_B;
        else 
            out_V_id_V_1_data_out <= out_V_id_V_1_payload_A;
        end if; 
    end process;

    out_V_id_V_1_load_A <= (out_V_id_V_1_state_cmp_full and not(out_V_id_V_1_sel_wr));
    out_V_id_V_1_load_B <= (out_V_id_V_1_state_cmp_full and out_V_id_V_1_sel_wr);
    out_V_id_V_1_sel <= out_V_id_V_1_sel_rd;
    out_V_id_V_1_state_cmp_full <= '0' when (out_V_id_V_1_state = ap_const_lv2_1) else '1';
    out_V_id_V_1_vld_in <= grp_mem_write_fu_76_out_r_TVALID;
    out_V_id_V_1_vld_out <= out_V_id_V_1_state(0);
    out_V_keep_V_1_ack_in <= out_V_keep_V_1_state(1);
    out_V_keep_V_1_ack_out <= out_r_TREADY;

    out_V_keep_V_1_data_out_assign_proc : process(out_V_keep_V_1_payload_A, out_V_keep_V_1_payload_B, out_V_keep_V_1_sel)
    begin
        if ((out_V_keep_V_1_sel = ap_const_logic_1)) then 
            out_V_keep_V_1_data_out <= out_V_keep_V_1_payload_B;
        else 
            out_V_keep_V_1_data_out <= out_V_keep_V_1_payload_A;
        end if; 
    end process;

    out_V_keep_V_1_load_A <= (out_V_keep_V_1_state_cmp_full and not(out_V_keep_V_1_sel_wr));
    out_V_keep_V_1_load_B <= (out_V_keep_V_1_state_cmp_full and out_V_keep_V_1_sel_wr);
    out_V_keep_V_1_sel <= out_V_keep_V_1_sel_rd;
    out_V_keep_V_1_state_cmp_full <= '0' when (out_V_keep_V_1_state = ap_const_lv2_1) else '1';
    out_V_keep_V_1_vld_in <= grp_mem_write_fu_76_out_r_TVALID;
    out_V_keep_V_1_vld_out <= out_V_keep_V_1_state(0);
    out_V_last_V_1_ack_in <= out_V_last_V_1_state(1);
    out_V_last_V_1_ack_out <= out_r_TREADY;

    out_V_last_V_1_data_out_assign_proc : process(out_V_last_V_1_payload_A, out_V_last_V_1_payload_B, out_V_last_V_1_sel)
    begin
        if ((out_V_last_V_1_sel = ap_const_logic_1)) then 
            out_V_last_V_1_data_out <= out_V_last_V_1_payload_B;
        else 
            out_V_last_V_1_data_out <= out_V_last_V_1_payload_A;
        end if; 
    end process;

    out_V_last_V_1_load_A <= (out_V_last_V_1_state_cmp_full and not(out_V_last_V_1_sel_wr));
    out_V_last_V_1_load_B <= (out_V_last_V_1_state_cmp_full and out_V_last_V_1_sel_wr);
    out_V_last_V_1_sel <= out_V_last_V_1_sel_rd;
    out_V_last_V_1_state_cmp_full <= '0' when (out_V_last_V_1_state = ap_const_lv2_1) else '1';
    out_V_last_V_1_vld_in <= grp_mem_write_fu_76_out_r_TVALID;
    out_V_last_V_1_vld_out <= out_V_last_V_1_state(0);
    out_V_strb_V_1_ack_in <= out_V_strb_V_1_state(1);
    out_V_strb_V_1_ack_out <= out_r_TREADY;

    out_V_strb_V_1_data_out_assign_proc : process(out_V_strb_V_1_payload_A, out_V_strb_V_1_payload_B, out_V_strb_V_1_sel)
    begin
        if ((out_V_strb_V_1_sel = ap_const_logic_1)) then 
            out_V_strb_V_1_data_out <= out_V_strb_V_1_payload_B;
        else 
            out_V_strb_V_1_data_out <= out_V_strb_V_1_payload_A;
        end if; 
    end process;

    out_V_strb_V_1_load_A <= (out_V_strb_V_1_state_cmp_full and not(out_V_strb_V_1_sel_wr));
    out_V_strb_V_1_load_B <= (out_V_strb_V_1_state_cmp_full and out_V_strb_V_1_sel_wr);
    out_V_strb_V_1_sel <= out_V_strb_V_1_sel_rd;
    out_V_strb_V_1_state_cmp_full <= '0' when (out_V_strb_V_1_state = ap_const_lv2_1) else '1';
    out_V_strb_V_1_vld_in <= grp_mem_write_fu_76_out_r_TVALID;
    out_V_strb_V_1_vld_out <= out_V_strb_V_1_state(0);
    out_V_user_V_1_ack_in <= out_V_user_V_1_state(1);
    out_V_user_V_1_ack_out <= out_r_TREADY;

    out_V_user_V_1_data_out_assign_proc : process(out_V_user_V_1_payload_A, out_V_user_V_1_payload_B, out_V_user_V_1_sel)
    begin
        if ((out_V_user_V_1_sel = ap_const_logic_1)) then 
            out_V_user_V_1_data_out <= out_V_user_V_1_payload_B;
        else 
            out_V_user_V_1_data_out <= out_V_user_V_1_payload_A;
        end if; 
    end process;

    out_V_user_V_1_load_A <= (out_V_user_V_1_state_cmp_full and not(out_V_user_V_1_sel_wr));
    out_V_user_V_1_load_B <= (out_V_user_V_1_state_cmp_full and out_V_user_V_1_sel_wr);
    out_V_user_V_1_sel <= out_V_user_V_1_sel_rd;
    out_V_user_V_1_state_cmp_full <= '0' when (out_V_user_V_1_state = ap_const_lv2_1) else '1';
    out_V_user_V_1_vld_in <= grp_mem_write_fu_76_out_r_TVALID;
    out_V_user_V_1_vld_out <= out_V_user_V_1_state(0);
    out_r_TDATA <= out_V_data_V_1_data_out;
    out_r_TDEST <= out_V_dest_V_1_data_out;
    out_r_TID <= out_V_id_V_1_data_out;
    out_r_TKEEP <= out_V_keep_V_1_data_out;
    out_r_TLAST <= out_V_last_V_1_data_out;
    out_r_TSTRB <= out_V_strb_V_1_data_out;
    out_r_TUSER <= out_V_user_V_1_data_out;
    out_r_TVALID <= out_V_dest_V_1_state(0);
    test_init_arr_V_address0 <= grp_mem_write_fu_76_test_init_arr_V_address0;
    test_init_arr_V_ce0 <= grp_mem_write_fu_76_test_init_arr_V_ce0;
    tmp_1_fu_130_p1 <= rw(1 - 1 downto 0);
    tmp_2_fu_125_p1 <= mask(32 - 1 downto 0);
    tmp_8_fu_119_p2 <= "1" when (tmp_fu_115_p1 = ap_const_lv2_0) else "0";
    tmp_fu_115_p1 <= rw(2 - 1 downto 0);
end behav;
