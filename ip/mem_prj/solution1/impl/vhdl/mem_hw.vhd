-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mem_hw is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 12;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_r_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    in_r_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    in_r_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC );
end;


architecture behav of mem_hw is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mem_hw,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=800.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.001750,HLS_SYN_LAT=524164,HLS_SYN_TPT=524165,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=942,HLS_SYN_LUT=1655}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal rw : STD_LOGIC_VECTOR (31 downto 0);
    signal mask : STD_LOGIC_VECTOR (63 downto 0);
    signal test_init_arr_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_proc_U0_ap_start : STD_LOGIC;
    signal Block_proc_U0_ap_done : STD_LOGIC;
    signal Block_proc_U0_ap_continue : STD_LOGIC;
    signal Block_proc_U0_ap_idle : STD_LOGIC;
    signal Block_proc_U0_ap_ready : STD_LOGIC;
    signal Block_proc_U0_in_r_TREADY : STD_LOGIC;
    signal Block_proc_U0_out_r_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_proc_U0_out_r_TVALID : STD_LOGIC;
    signal Block_proc_U0_out_r_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_proc_U0_out_r_TSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_proc_U0_out_r_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_proc_U0_out_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_proc_U0_out_r_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_proc_U0_out_r_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_proc_U0_test_init_arr_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_proc_U0_test_init_arr_V_ce0 : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal Block_proc_U0_start_full_n : STD_LOGIC;
    signal Block_proc_U0_start_write : STD_LOGIC;

    component Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rw : IN STD_LOGIC_VECTOR (31 downto 0);
        in_r_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        in_r_TVALID : IN STD_LOGIC;
        in_r_TREADY : OUT STD_LOGIC;
        in_r_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        mask : IN STD_LOGIC_VECTOR (63 downto 0);
        out_r_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r_TVALID : OUT STD_LOGIC;
        out_r_TREADY : IN STD_LOGIC;
        out_r_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_r_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        test_init_arr_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        test_init_arr_V_ce0 : OUT STD_LOGIC;
        test_init_arr_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component mem_hw_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        rw : OUT STD_LOGIC_VECTOR (31 downto 0);
        mask : OUT STD_LOGIC_VECTOR (63 downto 0);
        test_init_arr_V_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        test_init_arr_V_ce0 : IN STD_LOGIC;
        test_init_arr_V_q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    mem_hw_CONTROL_BUS_s_axi_U : component mem_hw_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        rw => rw,
        mask => mask,
        test_init_arr_V_address0 => Block_proc_U0_test_init_arr_V_address0,
        test_init_arr_V_ce0 => Block_proc_U0_test_init_arr_V_ce0,
        test_init_arr_V_q0 => test_init_arr_V_q0);

    Block_proc_U0 : component Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_proc_U0_ap_start,
        ap_done => Block_proc_U0_ap_done,
        ap_continue => Block_proc_U0_ap_continue,
        ap_idle => Block_proc_U0_ap_idle,
        ap_ready => Block_proc_U0_ap_ready,
        rw => rw,
        in_r_TDATA => in_r_TDATA,
        in_r_TVALID => in_r_TVALID,
        in_r_TREADY => Block_proc_U0_in_r_TREADY,
        in_r_TKEEP => in_r_TKEEP,
        in_r_TSTRB => in_r_TSTRB,
        in_r_TUSER => in_r_TUSER,
        in_r_TLAST => in_r_TLAST,
        in_r_TID => in_r_TID,
        in_r_TDEST => in_r_TDEST,
        mask => mask,
        out_r_TDATA => Block_proc_U0_out_r_TDATA,
        out_r_TVALID => Block_proc_U0_out_r_TVALID,
        out_r_TREADY => out_r_TREADY,
        out_r_TKEEP => Block_proc_U0_out_r_TKEEP,
        out_r_TSTRB => Block_proc_U0_out_r_TSTRB,
        out_r_TUSER => Block_proc_U0_out_r_TUSER,
        out_r_TLAST => Block_proc_U0_out_r_TLAST,
        out_r_TID => Block_proc_U0_out_r_TID,
        out_r_TDEST => Block_proc_U0_out_r_TDEST,
        test_init_arr_V_address0 => Block_proc_U0_test_init_arr_V_address0,
        test_init_arr_V_ce0 => Block_proc_U0_test_init_arr_V_ce0,
        test_init_arr_V_q0 => test_init_arr_V_q0);




    Block_proc_U0_ap_continue <= ap_const_logic_1;
    Block_proc_U0_ap_start <= ap_start;
    Block_proc_U0_start_full_n <= ap_const_logic_1;
    Block_proc_U0_start_write <= ap_const_logic_0;
    ap_done <= Block_proc_U0_ap_done;
    ap_idle <= Block_proc_U0_ap_idle;
    ap_ready <= Block_proc_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Block_proc_U0_ap_done;
    ap_sync_ready <= Block_proc_U0_ap_ready;
    in_r_TREADY <= Block_proc_U0_in_r_TREADY;
    out_r_TDATA <= Block_proc_U0_out_r_TDATA;
    out_r_TDEST <= Block_proc_U0_out_r_TDEST;
    out_r_TID <= Block_proc_U0_out_r_TID;
    out_r_TKEEP <= Block_proc_U0_out_r_TKEEP;
    out_r_TLAST <= Block_proc_U0_out_r_TLAST;
    out_r_TSTRB <= Block_proc_U0_out_r_TSTRB;
    out_r_TUSER <= Block_proc_U0_out_r_TUSER;
    out_r_TVALID <= Block_proc_U0_out_r_TVALID;
end behav;
