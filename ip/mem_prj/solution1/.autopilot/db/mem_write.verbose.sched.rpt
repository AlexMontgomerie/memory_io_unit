

================================================================
== Vivado HLS Report for 'mem_write'
================================================================
* Date:           Mon Jun  4 11:41:29 2018

* Version:        2017.4 (Build 2086221 on Fri Dec 15 21:13:33 MST 2017)
* Project:        mem_prj
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+--------+----------+------------+
    |  Clock | Target | Estimated| Uncertainty|
    +--------+--------+----------+------------+
    |ap_clk  |  800.00|      8.00|      100.00|
    +--------+--------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +---------+---------+---------+---------+---------+
    |      Latency      |      Interval     | Pipeline|
    |   min   |   max   |   min   |   max   |   Type  |
    +---------+---------+---------+---------+---------+
    |  1048323|  1048323|  1048323|  1048323|   none  |
    +---------+---------+---------+---------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------------------+---------+---------+----------+-----------+-----------+---------+----------+
        |                       |      Latency      | Iteration|  Initiation Interval  |   Trip  |          |
        |       Loop Name       |   min   |   max   |  Latency |  achieved |   target  |  Count  | Pipelined|
        +-----------------------+---------+---------+----------+-----------+-----------+---------+----------+
        |- main_loop_data_loop  |  1048321|  1048321|         3|          1|          1|  1048320|    yes   |
        +-----------------------+---------+---------+----------+-----------+-----------+---------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 5
* Pipeline : 1
  Pipeline-0 : II = 1, D = 3, States = { 2 3 4 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	5  / (exitcond_flatten)
	3  / (!exitcond_flatten)
3 --> 
	4  / true
4 --> 
	2  / true
5 --> 

* FSM state operations: 

 <State 1> : 1.77ns
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecMemCore([256 x i64]* %test_init_arr_V, [1 x i8]* @p_str3, [7 x i8]* @RAM_1P_str, [1 x i8]* @p_str3, i32 -1, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3, [1 x i8]* @p_str3)"
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i64* %out_stream_V_data_V, i8* %out_stream_V_keep_V, i8* %out_stream_V_strb_V, i1* %out_stream_V_user_V, i1* %out_stream_V_last_V, i1* %out_stream_V_id_V, i1* %out_stream_V_dest_V, [5 x i8]* @p_str7, i32 1, i32 1, [5 x i8]* @p_str8, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2, [1 x i8]* @p_str2) nounwind"
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%mask_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %mask)"
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%tmp = sext i32 %mask_read to i64" [mem.cpp:43]
ST_1 : Operation 10 [1/1] (1.76ns)   --->   "br label %1" [mem.cpp:24]

 <State 2> : 8.00ns
ST_2 : Operation 11 [1/1] (0.00ns)   --->   "%indvar_flatten = phi i20 [ 0, %0 ], [ %indvar_flatten_next, %.reset ]"
ST_2 : Operation 12 [1/1] (0.00ns)   --->   "%i = phi i12 [ 0, %0 ], [ %tmp_1_mid2_v_v, %.reset ]" [mem.cpp:37]
ST_2 : Operation 13 [1/1] (0.00ns)   --->   "%tmp_user_V = phi i1 [ true, %0 ], [ false, %.reset ]"
ST_2 : Operation 14 [1/1] (0.00ns)   --->   "%j = phi i9 [ 0, %0 ], [ %j_1, %.reset ]"
ST_2 : Operation 15 [1/1] (2.44ns)   --->   "%exitcond_flatten = icmp eq i20 %indvar_flatten, -256"   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.44> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 16 [1/1] (2.19ns)   --->   "%indvar_flatten_next = add i20 %indvar_flatten, 1"   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.93> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 17 [1/1] (0.00ns)   --->   "br i1 %exitcond_flatten, label %2, label %.reset"
ST_2 : Operation 18 [1/1] (1.66ns)   --->   "%exitcond6 = icmp eq i9 %j, -256" [mem.cpp:26]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.44> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 19 [1/1] (1.37ns)   --->   "%j_mid2 = select i1 %exitcond6, i9 0, i9 %j" [mem.cpp:26]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 20 [1/1] (1.99ns)   --->   "%i_s = add i12 %i, 1" [mem.cpp:24]   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.93> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 21 [1/1] (1.37ns)   --->   "%tmp_1_mid2_v_v = select i1 %exitcond6, i12 %i_s, i12 %i" [mem.cpp:37]   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 1.37> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 22 [1/1] (0.00ns)   --->   "%tmp_1_mid2 = call i20 @_ssdm_op_BitConcatenate.i20.i12.i8(i12 %tmp_1_mid2_v_v, i8 0)" [mem.cpp:37]
ST_2 : Operation 23 [1/1] (0.00ns)   --->   "%j_cast3 = zext i9 %j_mid2 to i20" [mem.cpp:26]
ST_2 : Operation 24 [1/1] (2.19ns)   --->   "%tmp_3 = add i20 %j_cast3, %tmp_1_mid2" [mem.cpp:37]   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.93> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 25 [1/1] (2.44ns)   --->   "%tmp_last_V = icmp eq i20 %tmp_3, -257" [mem.cpp:37]   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 2.44> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 26 [1/1] (0.00ns)   --->   "%tmp_5 = zext i9 %j_mid2 to i64" [mem.cpp:43]
ST_2 : Operation 27 [1/1] (0.00ns)   --->   "%test_init_arr_V_addr = getelementptr [256 x i64]* %test_init_arr_V, i64 0, i64 %tmp_5" [mem.cpp:43]
ST_2 : Operation 28 [2/2] (2.26ns)   --->   "%test_init_arr_V_load = load i64* %test_init_arr_V_addr, align 8" [mem.cpp:43]   --->   Core 42 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.26> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 64> <Depth = 256> <RAM>
ST_2 : Operation 29 [1/1] (1.93ns)   --->   "%j_1 = add i9 %j_mid2, 1" [mem.cpp:26]   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.93> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

 <State 3> : 3.13ns
ST_3 : Operation 30 [1/2] (2.26ns)   --->   "%test_init_arr_V_load = load i64* %test_init_arr_V_addr, align 8" [mem.cpp:43]   --->   Core 42 'RAM_1P' <Latency = 1> <II = 1> <Delay = 2.26> <Storage> <Opcode : 'load' 'store'> <Ports = 1> <Width = 64> <Depth = 256> <RAM>
ST_3 : Operation 31 [1/1] (0.85ns)   --->   "%axi_data_V = and i64 %test_init_arr_V_load, %tmp" [mem.cpp:43]   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.85> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 32 [2/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i64P.i8P.i8P.i1P.i1P.i1P.i1P(i64* %out_stream_V_data_V, i8* %out_stream_V_keep_V, i8* %out_stream_V_strb_V, i1* %out_stream_V_user_V, i1* %out_stream_V_last_V, i1* %out_stream_V_id_V, i1* %out_stream_V_dest_V, i64 %axi_data_V, i8 -1, i8 undef, i1 %tmp_user_V, i1 %tmp_last_V, i1 undef, i1 undef)" [mem.cpp:45]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_3 : Operation 33 [1/1] (0.00ns)   --->   "br label %1"

 <State 4> : 0.00ns
ST_4 : Operation 34 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([20 x i8]* @main_loop_data_loop_s)"
ST_4 : Operation 35 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopTripCount(i64 1048320, i64 1048320, i64 1048320)"
ST_4 : Operation 36 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([10 x i8]* @p_str4) nounwind" [mem.cpp:27]
ST_4 : Operation 37 [1/1] (0.00ns)   --->   "%tmp_6 = call i32 (...)* @_ssdm_op_SpecRegionBegin([10 x i8]* @p_str4)" [mem.cpp:27]
ST_4 : Operation 38 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str2) nounwind" [mem.cpp:29]
ST_4 : Operation 39 [1/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i64P.i8P.i8P.i1P.i1P.i1P.i1P(i64* %out_stream_V_data_V, i8* %out_stream_V_keep_V, i8* %out_stream_V_strb_V, i1* %out_stream_V_user_V, i1* %out_stream_V_last_V, i1* %out_stream_V_id_V, i1* %out_stream_V_dest_V, i64 %axi_data_V, i8 -1, i8 undef, i1 %tmp_user_V, i1 %tmp_last_V, i1 undef, i1 undef)" [mem.cpp:45]   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_4 : Operation 40 [1/1] (0.00ns)   --->   "%empty_2 = call i32 (...)* @_ssdm_op_SpecRegionEnd([10 x i8]* @p_str4, i32 %tmp_6)" [mem.cpp:46]

 <State 5> : 0.00ns
ST_5 : Operation 41 [1/1] (0.00ns)   --->   "ret void" [mem.cpp:48]


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 800ns, clock uncertainty: 100ns.

 <State 1>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('indvar_flatten') with incoming values : ('indvar_flatten_next') [16]  (1.77 ns)

 <State 2>: 8ns
The critical path consists of the following:
	'phi' operation ('i', mem.cpp:37) with incoming values : ('tmp_1_mid2_v_v', mem.cpp:37) [17]  (0 ns)
	'add' operation ('i_s', mem.cpp:24) [28]  (2 ns)
	'select' operation ('tmp_1_mid2_v_v', mem.cpp:37) [29]  (1.37 ns)
	'add' operation ('tmp_3', mem.cpp:37) [35]  (2.2 ns)
	'icmp' operation ('tmp.last.V', mem.cpp:37) [36]  (2.44 ns)

 <State 3>: 3.13ns
The critical path consists of the following:
	'load' operation ('test_init_arr_V_load', mem.cpp:43) on array 'test_init_arr_V' [39]  (2.27 ns)
	'and' operation ('axi.data.V', mem.cpp:43) [40]  (0.859 ns)

 <State 4>: 0ns
The critical path consists of the following:

 <State 5>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
